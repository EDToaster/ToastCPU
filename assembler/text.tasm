.reset
    imov    r0  .start
    jnz     r0
.vga_addr
    0xC000
.vga_max_offset
    0x3FFF
.text_start_offset
    0x0100
.bitmap
    0b0000000000000000
    0b0101011101010111
    0b0111010101110001
    0b0111000100010111
    0b0111010101010011
    0b0111001100010111
    0b0001000100110111
    0b0011010100010110
    0b0101010101110101
    0b0010001000100010
    0b0110010101000111
    0b0101001101010001
    0b0111000100010001
    0b0101010101110101
    0b0101011100000000
    0b0111010101010111
    0b0001011101010111
    0b1111010101010111
    0b0101001101010111
    0b0011001000100110
    0b0010001000100111
    0b0111010101010101
    0b0010010101010101
    0b0101011101010101
    0b0101001000100101
    0b0010001000100101
    0b0110001000100011
    0b0000000000000000
.text
    // the quick brown fox jumped over
    0x0014
    0x0008
    0x0005
    0x001B
    0x0011
    0x0015
    0x0009
    0x0003
    0x000B
    0x001B
    0x0002
    0x0012
    0x000F
    0x0017
    0x000E
    0x001B
    0x0006
    0x000F
    0x0018
    0x001B
    0x000A
    0x0015
    0x000D
    0x0010
    0x0005
    0x0004
    0x001B
    0x000F
    0x0016
    0x0005
    0x0012
    0x0000
.start
    imov    r0  .vga_addr
    load    r0  [r0]    // vga address
    imov    r5  .text_start_offset
    load    r5  [r5]
    imov    r11 .bitmap
    imov    r1  .text
.reset
    load    r9  [r1]    // r9 contains offset into bitmap
    imov    r10 .halt   
    mov     r9  r9
    jz      r10         // if r9 is null terminator, halt

    add     r9  r11     // r9 contains bitmap address
    load    r9  [r9]    // r9 contains the bitmap info of first letter
    imov    r2  0xF     // r2 contains the offset into the bit
.loop
    imov    r10 .skip
    imov    r3  0x01    // r3 = mask
    shl     r3  r2      
    and     r3  r9      // r3 = draw?
    jz      r10
    // draw
    mov     r7  r2
    iand    r7  0x3
    mov     r8  r2
    iand    r8  0xC     // r7/8 contains the x,y offsets, r7 contains raw offset
    ishl    r8  5
    or      r7  r8
    add     r7  r0      
    add     r7  r5      // r7 is the address to draw at
    
    imov    r8  0xFF
    str     [r7] r8
.skip
    // decrement r2
    imov    r10 .next_char
    mov     r2  r2
    jz      r10
    isub    r2  1
    imov    r10 .loop
    jnz     r10
.next_char
    iadd    r1  1
    iadd    r5  4
    imov    r10 .reset
    jnz     r10
.halt
    halt