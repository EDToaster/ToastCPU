.print_init # ( ) -> ( )
    imov    t0 0
    str!    .ptr_counter t0

    imov!   t0 100
    str!    .ptr_line_counter t0
    
    jmpr
#end .print_init

.print_string # (char *str) -> ( )
    push!   t0 t1 p0

    mov     t0 p0   # t0 = str

.print_string_loop  # loop through each char of the string
    load    t1 t0
    iadd    t1 0    # if (t0 == '\0')
    jz!     .print_string_exit

    mov     p0 t1
    call!   .print_char
    iadd    t0 1    # t0++

    jmp!    .print_string_loop
.print_string_exit
    pop!    p0 t1 t0
    jmpr
#end .print_string


# allocate memory
.ptr_counter        [1]
.ptr_line_counter   [1]

.print_char # (word c) -> ( )
    push!   t0 t1 t2

    mov     t0 p0                   # t0 = c

    icmp    t0 0x0A                 # if (t0 == '\n')
    jnz!    .print_char_keep_going  

    load!   t1 .ptr_counter
    load!   t2 .ptr_line_counter
    add     t1 t2
    str!    .ptr_counter t1
    imov!   t2 100
    jmp!    .print_char_store_and_exit
.print_char_keep_going              # else

    # get counter into t2
    load!   t2 .ptr_counter

    imov    t1 0b00111000
    ishl    t1 8
    or      t0 t1

    # vga addr
    str     t2 t0

    iadd    t2 1
    str!    .ptr_counter t2

    load!   t2 .ptr_line_counter
    isub    t2 1
    jnz!    .print_char_store_and_exit
    imov!   t2 100
.print_char_store_and_exit

    # if (.ptr_counter > 6000)
    load!   t1 .ptr_counter
    icmp!   t1 6000
    jn!     .print_char_skip_reset
    imov    t1 0
    str!    .ptr_counter t1

.print_char_skip_reset
    str!    .ptr_line_counter t2

    # restore registers and return
    pop!    t2 t1 t0
    jmpr
#end .print_char