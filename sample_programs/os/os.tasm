# Some useful stuff
# r12 - ISR
# r13 - SP
# r14 - SR
# r15 - PC

.reset
    # setup isr and jump to main
    imov r12 .isr
    call! .main
    halt

# due to dumb limitation, all referenced labels must be within 256 words of memory
.isr
    rti

# WORD *counter_ptr = 0xA000
.counter_ptr    0xA000

.main # ( )
    imov  r1 0
    str!  .counter_ptr r1

    imov r1 .welcome_message        # load message
    push r1                         # push argument to stack
    call! .print_string
    call! .print_string
    call! .print_string
    call! .print_string
    call! .print_string
    call! .print_string
    call! .print_string
    call! .print_string
    pop  r1
    jmpr
# end main

.print_string # (char *)
    # message pointer
    # char to print
    # VGA pointer
    # jmp loc
    # counter_ptr
    push! r2 r3 r4 r5

    # address counter
    load! r4 .counter_ptr

    # get argument into r2
    mov  r2 r13
    isub r2 6
    load r2 r2 # r2 is now the argument/pointer

    # loop through each char of the string
.print_string_loop
    # load exit point
    imov r5 .print_string_exit
    load r3 r2
    iadd r3 0 # load doesn't do arith
    jz   r5

    push! r3 r4
    call! .print_char
    pop! r4 r3

    # increment vga and text loc
    iadd r2 1
    iadd r4 1

    imov r5 .print_string_loop
    jmp  r5

.print_string_exit
    str! .counter_ptr r4
    # restore registers and return
    pop! r5 r4 r3 r2
    jmpr
# end print_string

.print_char # (word char_to_print, word *print_loc)
    # save registers
    push! r2 r3 r4

    # get argument into r2
    mov  r2 r13
    isub r2 6
    load r2 r2 # r2 is now char

    # get argument into r2
    mov  r4 r13
    isub r4 5
    load r4 r4 # r4 is now word *

    imov r3 0b00111000
    ishl r3 8
    or  r2 r3

    # vga addr
    str  r4 r2

    # restore registers and return
    pop! r4 r3 r2
    jmpr
# end print_char

.welcome_message
    "Hello from ToastOS!                                                                                 "
    0