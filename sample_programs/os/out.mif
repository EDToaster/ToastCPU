DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C4D; --   imov    isr .isr
0001 : 2050; -- . imov r0 .main  [call!   .main]
0002 : 3000; -- | imoh r0 .main
0003 : A010; -- ' jmpl
0004 : 7000; --   halt
0005 : 5D50; -- . push [push! t0 t1 p0]
0006 : 5D60; -- | push
0007 : 5D10; -- ' push
0008 : 8516; --   mov  t0 p0 # r2 is now the string pointer
0009 : 0650; --   load t1 t0
000A : 9604; --   iadd t1 0 # load doesn't set flags
000B : 2016; -- . imov [jz!  .print_string_exit]
000C : 3000; -- | imoh
000D : A001; -- ' j_op
000E : 8166; --   mov   p0 t1
000F : 201A; -- . imov r0 .print_char  [call! .print_char]
0010 : 3000; -- | imoh r0 .print_char
0011 : A010; -- ' jmpl
0012 : 9514; --   iadd t0 1
0013 : 2009; -- . imov [jmp! .print_string_loop]
0014 : 3000; -- | imoh
0015 : A000; -- ' j_op
0016 : 61D0; -- . pop [pop! p0 t1 t0]
0017 : 66D0; -- | pop
0018 : 65D0; -- ' pop
0019 : A020; --   jmpr
001A : 5D50; -- . push [push! t0 t1 t2]
001B : 5D60; -- | push
001C : 5D70; -- ' push
001D : 8516; --   mov t0 p0 # r0 is now char
001E : 95A5; --   isub t0 0x0A
001F : 2031; -- . imov [jnz! .print_char_keep_going]
0020 : 3000; -- | imoh
0021 : A002; -- ' j_op
0022 : 26FF; -- . imov [load! t1 .ptr_counter]
0023 : 36BF; -- | imoh
0024 : 0660; -- ' load
0025 : 27FE; -- . imov [load! t2 .ptr_line_counter]
0026 : 37BF; -- | imoh
0027 : 0770; -- ' load
0028 : 8674; --   add   t1 t2
0029 : 20FF; -- . imov [str!  .ptr_counter t1]
002A : 30BF; -- | imoh
002B : 1060; -- ' str
002C : 2764; -- . imov [imov! t2 100]
002D : 3700; -- ' imoh
002E : 2046; -- . imov [jmp!  .print_char_store_and_exit]
002F : 3000; -- | imoh
0030 : A000; -- ' j_op
0031 : 8516; --   mov t0 p0 # r2 is now char
0032 : 27FF; -- . imov [load! t2 .ptr_counter]
0033 : 37BF; -- | imoh
0034 : 0770; -- ' load
0035 : 2638; --   imov t1 0b00111000
0036 : 968A; --   ishl t1 8
0037 : 8562; --   or   t0 t1
0038 : 1750; --   str  t2 t0
0039 : 9714; --   iadd t2 1
003A : 20FF; -- . imov [str! .ptr_counter t2]
003B : 30BF; -- | imoh
003C : 1070; -- ' str
003D : 27FE; -- . imov [load! t2 .ptr_line_counter]
003E : 37BF; -- | imoh
003F : 0770; -- ' load
0040 : 9715; --   isub  t2 1
0041 : 2046; -- . imov [jnz!  .print_char_store_and_exit]
0042 : 3000; -- | imoh
0043 : A002; -- ' j_op
0044 : 2764; -- . imov [imov!  t2 100]
0045 : 3700; -- ' imoh
0046 : 20FE; -- . imov [str!  .ptr_line_counter t2]
0047 : 30BF; -- | imoh
0048 : 1070; -- ' str
0049 : 67D0; -- . pop [pop! t2 t1 t0]
004A : 66D0; -- | pop
004B : 65D0; -- ' pop
004C : A020; --   jmpr
004D : 5D00; -- Â· push r0 [isr!]
004E : 60D0; -- . pop r0 [rti!]
004F : C000; -- ' rti
0050 : 2500; --   imov    t0 0
0051 : 20FF; -- . imov [str!    .ptr_counter t0]
0052 : 30BF; -- | imoh
0053 : 1050; -- ' str
0054 : 2564; -- . imov [imov!   t0 100]
0055 : 3500; -- ' imoh
0056 : 20FE; -- . imov [str!    .ptr_line_counter t0]
0057 : 30BF; -- | imoh
0058 : 1050; -- ' str
0059 : 215F; -- . imov [imov!   p0 .welcome_message        # load message]
005A : 3100; -- ' imoh
005B : 2005; -- . imov r0 .print_string  [call!   .print_string]
005C : 3000; -- | imoh r0 .print_string
005D : A010; -- ' jmpl
005E : A020; --   jmpr
005F : 0048; -- H
0060 : 0065; -- e
0061 : 006C; -- l
0062 : 006C; -- l
0063 : 006F; -- o
0064 : 0020; --  
0065 : 0066; -- f
0066 : 0072; -- r
0067 : 006F; -- o
0068 : 006D; -- m
0069 : 0020; --  
006A : 003C; -- <
006B : 0054; -- T
006C : 006F; -- o
006D : 0061; -- a
006E : 0073; -- s
006F : 0074; -- t
0070 : 004F; -- O
0071 : 0053; -- S
0072 : 003E; -- >
0073 : 000A; -- \n
0074 : 0000; -- \x00
END;