DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C05; -- imov r12 .isr
0001 : 2006; -- call! .main
0002 : 3000; -- |
0003 : A010; -- |
0004 : 7000; -- halt
0005 : C000; -- rti
0006 : 2100; -- imov  r1 0
0007 : 20FF; -- str!  .ptr_counter r1
0008 : 30BF; -- |
0009 : 1010; -- |
000A : 2164; -- imov  r1 100
000B : 3100; -- imoh  r1 0
000C : 20FE; -- str!  .ptr_line_counter r1
000D : 30BF; -- |
000E : 1010; -- |
000F : 216B; -- imov r1 .welcome_message        # load message
0010 : 5D10; -- push r1                         # push argument to stack
0011 : 201C; -- call! .print_string
0012 : 3000; -- |
0013 : A010; -- |
0014 : 201C; -- call! .print_string
0015 : 3000; -- |
0016 : A010; -- |
0017 : 201C; -- call! .print_string
0018 : 3000; -- |
0019 : A010; -- |
001A : 61D0; -- pop  r1
001B : A020; -- jmpr
001C : 5D20; -- push! r2 r3 r4 r5
001D : 5D30; -- ║
001E : 5D40; -- ║
001F : 5D50; -- ╝
0020 : 82D6; -- mov  r2 r13
0021 : 9265; -- isub r2 6
0022 : 0220; -- load r2 r2 # r2 is now the argument/pointer
0023 : 0320; -- load r3 r2
0024 : 9304; -- iadd r3 0 # load doesn't set flags
0025 : 2032; -- jz!  .print_string_exit
0026 : 3000; -- |
0027 : A001; -- |
0028 : 5D30; -- push  r3
0029 : 2037; -- call! .print_char
002A : 3000; -- |
002B : A010; -- |
002C : 63D0; -- pop   r3
002D : 9214; -- iadd r2 1
002E : 9414; -- iadd r4 1
002F : 2023; -- jmp! .print_string_loop
0030 : 3000; -- |
0031 : A000; -- |
0032 : 65D0; -- pop! r5 r4 r3 r2
0033 : 64D0; -- ║
0034 : 63D0; -- ║
0035 : 62D0; -- ╝
0036 : A020; -- jmpr
0037 : 5D20; -- push! r2 r3 r4
0038 : 5D30; -- ║
0039 : 5D40; -- ╝
003A : 83D6; -- mov  r3 r13
003B : 9355; -- isub r3 5
003C : 0230; -- load r2 r3 # r2 is now char
003D : 92A5; -- isub r2 0x0A
003E : 2050; -- jnz! .print_char_keep_going
003F : 3000; -- |
0040 : A002; -- |
0041 : 23FF; -- load! r3 .ptr_counter
0042 : 33BF; -- |
0043 : 0330; -- |
0044 : 24FE; -- load! r4 .ptr_line_counter
0045 : 34BF; -- |
0046 : 0440; -- |
0047 : 8344; -- add   r3 r4
0048 : 20FF; -- str!  .ptr_counter r3
0049 : 30BF; -- |
004A : 1030; -- |
004B : 2400; -- imov  r4 0
004C : 4A644; -- iadd  r4 100
004D : 2064; -- jmp!  .print_char_store_and_exit
004E : 3000; -- |
004F : A000; -- |
0050 : 0230; -- load r2 r3 # r2 is now char
0051 : 24FF; -- load! r4 .ptr_counter
0052 : 34BF; -- |
0053 : 0440; -- |
0054 : 2338; -- imov r3 0b00111000
0055 : 938A; -- ishl r3 8
0056 : 8232; -- or  r2 r3
0057 : 1420; -- str  r4 r2
0058 : 9414; -- iadd r4 1
0059 : 20FF; -- str! .ptr_counter r4
005A : 30BF; -- |
005B : 1040; -- |
005C : 24FE; -- load! r4 .ptr_line_counter
005D : 34BF; -- |
005E : 0440; -- |
005F : 9415; -- isub  r4 1
0060 : 2064; -- jnz!  .print_char_store_and_exit
0061 : 3000; -- |
0062 : A002; -- |
0063 : 4A644; -- iadd  r4 100
0064 : 20FE; -- str!  .ptr_line_counter r4
0065 : 30BF; -- |
0066 : 1040; -- |
0067 : 64D0; -- pop! r4 r3 r2
0068 : 63D0; -- ║
0069 : 62D0; -- ╝
006A : A020; -- jmpr
006B : 0048; -- H
006C : 0065; -- e
006D : 006C; -- l
006E : 006C; -- l
006F : 006F; -- o
0070 : 0020; --  
0071 : 0066; -- f
0072 : 0072; -- r
0073 : 006F; -- o
0074 : 006D; -- m
0075 : 0020; --  
0076 : 0054; -- T
0077 : 006F; -- o
0078 : 0061; -- a
0079 : 0073; -- s
007A : 0074; -- t
007B : 004F; -- O
007C : 0053; -- S
007D : 0021; -- !
007E : 000A; -- 0x0A
007F : 0000; -- 0
END;