DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2CA2; -- . imov [imov!   isr .isr]
0001 : 3C01; -- ' imoh
0002 : 20AC; -- . imov r0 .main  [call!   .main]
0003 : 3001; -- | imoh r0 .main
0004 : A010; -- ' jmpl
0005 : 7000; --   halt
0006 : 2600; --   imov    t0 0
0007 : 20FF; -- . imov [str!    .ptr_counter t0]
0008 : 30BF; -- | imoh
0009 : 1060; -- ' str
000A : 2664; -- . imov [imov!   t0 100]
000B : 3600; -- ' imoh
000C : 20FE; -- . imov [str!    .ptr_line_counter t0]
000D : 30BF; -- | imoh
000E : 1060; -- ' str
000F : A020; --   jmpr
0010 : 5D60; -- . push [push!   t0 t1 p0]
0011 : 5D70; -- | push
0012 : 5D10; -- ' push
0013 : 8616; --   mov     t0 p0   # t0 = str
0014 : 0760; --   load    t1 t0
0015 : 9704; --   iadd    t1 0    # if (t0 == '\0')
0016 : 2021; -- . imov [jz!     .print_string_exit]
0017 : 3000; -- | imoh
0018 : A001; -- ' j_op
0019 : 8176; --   mov     p0 t1
001A : 2025; -- . imov r0 .print_char  [call!   .print_char]
001B : 3000; -- | imoh r0 .print_char
001C : A010; -- ' jmpl
001D : 9614; --   iadd    t0 1    # t0++
001E : 2014; -- . imov [jmp!    .print_string_loop]
001F : 3000; -- | imoh
0020 : A000; -- ' j_op
0021 : 61D0; -- . pop [pop!    p0 t1 t0]
0022 : 67D0; -- | pop
0023 : 66D0; -- ' pop
0024 : A020; --   jmpr
0025 : 5D60; -- . push [push!   t0 t1 t2]
0026 : 5D70; -- | push
0027 : 5D80; -- ' push
0028 : 8616; --   mov     t0 p0                   # t0 = c
0029 : 96A5; --   isub    t0 0x0A                 # if (t0 == '\n')
002A : 203C; -- . imov [jnz!    .print_char_keep_going]
002B : 3000; -- | imoh
002C : A002; -- ' j_op
002D : 27FF; -- . imov [load!   t1 .ptr_counter]
002E : 37BF; -- | imoh
002F : 0770; -- ' load
0030 : 28FE; -- . imov [load!   t2 .ptr_line_counter]
0031 : 38BF; -- | imoh
0032 : 0880; -- ' load
0033 : 8784; --   add     t1 t2
0034 : 20FF; -- . imov [str!    .ptr_counter t1]
0035 : 30BF; -- | imoh
0036 : 1070; -- ' str
0037 : 2864; -- . imov [imov!   t2 100]
0038 : 3800; -- ' imoh
0039 : 2051; -- . imov [jmp!    .print_char_store_and_exit]
003A : 3000; -- | imoh
003B : A000; -- ' j_op
003C : 8616; --   mov     t0 p0
003D : 28FF; -- . imov [load!   t2 .ptr_counter]
003E : 38BF; -- | imoh
003F : 0880; -- ' load
0040 : 2738; --   imov    t1 0b00111000
0041 : 978A; --   ishl    t1 8
0042 : 8672; --   or      t0 t1
0043 : 1860; --   str     t2 t0
0044 : 9814; --   iadd    t2 1
0045 : 20FF; -- . imov [str!    .ptr_counter t2]
0046 : 30BF; -- | imoh
0047 : 1080; -- ' str
0048 : 28FE; -- . imov [load!   t2 .ptr_line_counter]
0049 : 38BF; -- | imoh
004A : 0880; -- ' load
004B : 9815; --   isub    t2 1
004C : 2051; -- . imov [jnz!    .print_char_store_and_exit]
004D : 3000; -- | imoh
004E : A002; -- ' j_op
004F : 2864; -- . imov [imov!   t2 100]
0050 : 3800; -- ' imoh
0051 : 20FE; -- . imov [str!    .ptr_line_counter t2]
0052 : 30BF; -- | imoh
0053 : 1080; -- ' str
0054 : 68D0; -- . pop [pop!    t2 t1 t0]
0055 : 67D0; -- | pop
0056 : 66D0; -- ' pop
0057 : A020; --   jmpr
0058 : 0020; --  
0059 : 0020; --  
005A : 0020; --  
005B : 0020; --  
005C : 0020; --  
005D : 0020; --  
005E : 0020; --  
005F : 0020; --  
0060 : 0020; --  
0061 : 0020; --  
0062 : 0020; --  
0063 : 0020; --  
0064 : 0020; --  
0065 : 0020; --  
0066 : 0060; -- `
0067 : 0020; --  
0068 : 0020; --  
0069 : 0020; --  
006A : 0020; --  
006B : 0020; --  
006C : 0020; --  
006D : 0071; -- q
006E : 0031; -- 1
006F : 0020; --  
0070 : 0020; --  
0071 : 0020; --  
0072 : 007A; -- z
0073 : 0073; -- s
0074 : 0061; -- a
0075 : 0077; -- w
0076 : 0032; -- 2
0077 : 0020; --  
0078 : 0020; --  
0079 : 0063; -- c
007A : 0078; -- x
007B : 0064; -- d
007C : 0065; -- e
007D : 0034; -- 4
007E : 0033; -- 3
007F : 0020; --  
0080 : 0020; --  
0081 : 0020; --  
0082 : 0076; -- v
0083 : 0066; -- f
0084 : 0074; -- t
0085 : 0072; -- r
0086 : 0035; -- 5
0087 : 0020; --  
0088 : 0020; --  
0089 : 006E; -- n
008A : 0062; -- b
008B : 0068; -- h
008C : 0067; -- g
008D : 0079; -- y
008E : 0036; -- 6
008F : 0020; --  
0090 : 0020; --  
0091 : 0020; --  
0092 : 006D; -- m
0093 : 006A; -- j
0094 : 0075; -- u
0095 : 0037; -- 7
0096 : 0038; -- 8
0097 : 0020; --  
0098 : 0020; --  
0099 : 002C; -- ,
009A : 006B; -- k
009B : 0069; -- i
009C : 006F; -- o
009D : 0030; -- 0
009E : 0039; -- 9
009F : 0020; --  
00A0 : 0020; --  
00A1 : 002E; -- .
00A2 : 002F; -- /
00A3 : 006C; -- l
00A4 : 003B; -- ;
00A5 : 0070; -- p
00A6 : 002D; -- -
00A7 : 0020; --  
00A8 : 0020; --  
00A9 : 0020; --  
00AA : 0020; --  
00AB : 0020; --  
00AC : 005B; -- [
00AD : 003D; -- =
00AE : 0020; --  
00AF : 0020; --  
00B0 : 0020; --  
00B1 : 0020; --  
00B2 : 000A; -- \n
00B3 : 005D; -- ]
00B4 : 0020; --  
00B5 : 005C; -- \\
00B6 : 0020; --  
00B7 : 0020; --  
00B8 : 0020; --  
00B9 : 0020; --  
00BA : 0020; --  
00BB : 0020; --  
00BC : 0020; --  
00BD : 0020; --  
00BE : 0020; --  
00BF : 0020; --  
00C0 : 0020; --  
00C1 : 0020; --  
00C2 : 0020; --  
00C3 : 0020; --  
00C4 : 0020; --  
00C5 : 0020; --  
00C6 : 0020; --  
00C7 : 0020; --  
00C8 : 0020; --  
00C9 : 0020; --  
00CA : 0020; --  
00CB : 0020; --  
00CC : 0020; --  
00CD : 0020; --  
00CE : 0020; --  
00CF : 0020; --  
00D0 : 0020; --  
00D1 : 0020; --  
00D2 : 0020; --  
00D3 : 0020; --  
00D4 : 0020; --  
00D5 : 0020; --  
00D6 : 0020; --  
00D7 : 0020; --  
00D8 : 0020; --  
00D9 : 0020; --  
00DA : 0020; --  
00DB : 0020; --  
00DC : 0020; --  
00DD : 0020; --  
00DE : 0020; --  
00DF : 0020; --  
00E0 : 0020; --  
00E1 : 0020; --  
00E2 : 0020; --  
00E3 : 0020; --  
00E4 : 0020; --  
00E5 : 0020; --  
00E6 : 0020; --  
00E7 : 0020; --  
00E8 : 0020; --  
00E9 : 0020; --  
00EA : 0020; --  
00EB : 0020; --  
00EC : 0020; --  
00ED : 0020; --  
00EE : 0020; --  
00EF : 0020; --  
00F0 : 0020; --  
00F1 : 0020; --  
00F2 : 0020; --  
00F3 : 0020; --  
00F4 : 0020; --  
00F5 : 0020; --  
00F6 : 0020; --  
00F7 : 0020; --  
00F8 : 0020; --  
00F9 : 0020; --  
00FA : 0020; --  
00FB : 0020; --  
00FC : 0020; --  
00FD : 0020; --  
00FE : 0020; --  
00FF : 0020; --  
0100 : 0020; --  
0101 : 0020; --  
0102 : 0020; --  
0103 : 0020; --  
0104 : 0020; --  
0105 : 0020; --  
0106 : 0020; --  
0107 : 0020; --  
0108 : 0020; --  
0109 : 0020; --  
010A : 0020; --  
010B : 0020; --  
010C : 0020; --  
010D : 0020; --  
010E : 0020; --  
010F : 0020; --  
0110 : 0020; --  
0111 : 0020; --  
0112 : 0020; --  
0113 : 0020; --  
0114 : 0020; --  
0115 : 0020; --  
0116 : 0020; --  
0117 : 0020; --  
0118 : 0020; --  
0119 : 0020; --  
011A : 0020; --  
011B : 0020; --  
011C : 0020; --  
011D : 0020; --  
011E : 0020; --  
011F : 0020; --  
0120 : 0020; --  
0121 : 0020; --  
0122 : 0020; --  
0123 : 0020; --  
0124 : 0020; --  
0125 : 0020; --  
0126 : 0020; --  
0127 : 0020; --  
0128 : 0020; --  
0129 : 0020; --  
012A : 0020; --  
012B : 0020; --  
012C : 0020; --  
012D : 0020; --  
012E : 0020; --  
012F : 0020; --  
0130 : 0020; --  
0131 : 0020; --  
0132 : 0020; --  
0133 : 0020; --  
0134 : 0020; --  
0135 : 0020; --  
0136 : 0020; --  
0137 : 0020; --  
0138 : 0020; --  
0139 : 0020; --  
013A : 0020; --  
013B : 0020; --  
013C : 0020; --  
013D : 0020; --  
013E : 0020; --  
013F : 0020; --  
0140 : 0020; --  
0141 : 0020; --  
0142 : 0020; --  
0143 : 0020; --  
0144 : 0020; --  
0145 : 0020; --  
0146 : 0020; --  
0147 : 0020; --  
0148 : 0020; --  
0149 : 0020; --  
014A : 0020; --  
014B : 0020; --  
014C : 0020; --  
014D : 0020; --  
014E : 0020; --  
014F : 0020; --  
0150 : 0020; --  
0151 : 0020; --  
0152 : 0020; --  
0153 : 0020; --  
0154 : 0020; --  
0155 : 0020; --  
0156 : 0020; --  
0157 : 0020; --  
0158 : 5D60; -- . push [push!   t0]
0159 : 2558; -- . imov [imov!   v0 .ps2_lut]
015A : 3500; -- ' imoh
015B : 26FF; -- . imov [load!   t0 .ps2_scancode_ptr]
015C : 36FF; -- | imoh
015D : 0660; -- ' load
015E : 8564; --   add     v0 t0
015F : 0550; --   load    v0 v0
0160 : 66D0; -- . pop [pop!    t0]
0161 : A020; --   jmpr
0162 : 0048; -- H
0163 : 0065; -- e
0164 : 006C; -- l
0165 : 006C; -- l
0166 : 006F; -- o
0167 : 0020; --  
0168 : 0066; -- f
0169 : 0072; -- r
016A : 006F; -- o
016B : 006D; -- m
016C : 0020; --  
016D : 0054; -- T
016E : 006F; -- o
016F : 0061; -- a
0170 : 0073; -- s
0171 : 0074; -- t
0172 : 004F; -- O
0173 : 0053; -- S
0174 : 000A; -- \n
0175 : 004D; -- M
0176 : 0065; -- e
0177 : 006D; -- m
0178 : 006F; -- o
0179 : 0072; -- r
017A : 0079; -- y
017B : 0020; --  
017C : 004C; -- L
017D : 0061; -- a
017E : 0079; -- y
017F : 006F; -- o
0180 : 0075; -- u
0181 : 0074; -- t
0182 : 003A; -- :
0183 : 0020; --  
0184 : 0033; -- 3
0185 : 0032; -- 2
0186 : 006B; -- k
0187 : 0057; -- W
0188 : 0020; --  
0189 : 0052; -- R
018A : 004F; -- O
018B : 004D; -- M
018C : 0020; --  
018D : 0031; -- 1
018E : 0036; -- 6
018F : 006B; -- k
0190 : 0057; -- W
0191 : 0020; --  
0192 : 0052; -- R
0193 : 0041; -- A
0194 : 004D; -- M
0195 : 0020; --  
0196 : 0031; -- 1
0197 : 0036; -- 6
0198 : 006B; -- k
0199 : 0057; -- W
019A : 0020; --  
019B : 0049; -- I
019C : 004F; -- O
019D : 000A; -- \n
019E : 0000; -- \x00
019F : 0024; -- $
01A0 : 0020; --  
01A1 : 0000; -- \x00
01A2 : 5D00; -- Â· push r0 [isr!]
01A3 : 2058; -- . imov r0 .get_keyboard_ascii  [call!   .get_keyboard_ascii]
01A4 : 3001; -- | imoh r0 .get_keyboard_ascii
01A5 : A010; -- ' jmpl
01A6 : 8156; --   mov     p0 v0
01A7 : 2025; -- . imov r0 .print_char  [call!   .print_char]
01A8 : 3000; -- | imoh r0 .print_char
01A9 : A010; -- ' jmpl
01AA : 60D0; -- . pop r0 [rti!]
01AB : C000; -- ' rti
01AC : 2006; -- . imov r0 .print_init  [call!   .print_init]
01AD : 3000; -- | imoh r0 .print_init
01AE : A010; -- ' jmpl
01AF : 2162; -- . imov [imov!   p0 .welcome_message]
01B0 : 3101; -- ' imoh
01B1 : 2010; -- . imov r0 .print_string  [call!   .print_string]
01B2 : 3000; -- | imoh r0 .print_string
01B3 : A010; -- ' jmpl
01B4 : 219F; -- . imov [imov!   p0 .prompt_message]
01B5 : 3101; -- ' imoh
01B6 : 2010; -- . imov r0 .print_string  [call!   .print_string]
01B7 : 3000; -- | imoh r0 .print_string
01B8 : A010; -- ' jmpl
01B9 : 20B9; -- . imov [jmp!    .main_loop]
01BA : 3001; -- | imoh
01BB : A000; -- ' j_op
01BC : A020; --   jmpr    # deadcode
END;