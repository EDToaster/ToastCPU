.reset
    call! .fn_main
    halt

#include<../../lib/std/print>

.isr
    isr!
    rti!

.memory_table       [1024]

.jump_forward_table [1024] # mapping scope level to ptr of corresponding ']'
.jump_back_table    [1024] # mapping scope level to ptr of corresponding '['

#   0      5      10      15
#   +++ [ +++ [ +++ ] +++ ] +++
#       L0    L1    L2    L1
#   Forward Table:  Back Table:
#   [ 15, 11 ]      [ x, 3, 7 ]

.fn_preprocess
    push! t0 t1 t2 t3 t4 t5

    # t0 = program counter
    # t1 = current command
    # t2 = scope level
    # t3 = corresponding start loop loc

    # t4 = whatever we need it for

    imov! t0 .bf_main
    imov  t2 0


.preprocessing_loop
    load  t1 t0

    icmp! t1 '['
    jz!   .preprocessing_handle_start_loop
    
    icmp! t1 ']'
    jz!   .preprocessing_handle_end_loop

    tst   t1
    jz!   .preprocessing_exit
    
    jmp! .preprocessing_next

.preprocessing_handle_start_loop
    # push current address on to stack
    push t0
    iadd t2 1
    jmp! .preprocessing_next

.preprocessing_handle_end_loop
    # pop start loop address
    pop  t3

    # jump_forward_table[t2] = t0
    # jump_back_table[t2-1]    = t3

    imov! t4 .jump_back_table
    add   t4 t2
    str   t4 t3

    isub t2 1

    imov! t4 .jump_forward_table
    add   t4 t2
    str   t4 t0


    jmp! .preprocessing_next

.preprocessing_next
    iadd t0 1
    jmp! .preprocessing_loop

.preprocessing_exit
    pop!  t5 t4 t3 t2 t1 t0
    jmpr
#end .fn_preprocess



.fn_main
    push! t0 t1 t2 t3 t4 t5
    call!   .print_init

    # sp = previous 
    # t0 = program counter
    # t1 = current command
    # t2 = memory ptr
    # t3 = scope level

    # t5 = handler specific


    # we do some funky preprocessing of jump tables
    call! .fn_preprocess

    # start executing main program
    imov! t0 .bf_main
    imov! t2 .memory_table
    imov  t3 0
.loop
    # get command
    load  t1 t0
    
    # check for commands
    icmp! t1 '['
    jz!   .handle_start_loop
    
    icmp! t1 ']'
    jz!   .handle_end_loop

    icmp! t1 '>'
    jz!   .handle_ptr_right
    
    icmp! t1 '<'
    jz!   .handle_ptr_left
    
    icmp! t1 '+'
    jz!   .handle_inc
    
    icmp! t1 '-'
    jz!   .handle_dec

    icmp! t1 '.'
    jz!   .handle_out


    tst   t1
    jz!   .exit_main

    # assume it is a comment
    jmp! .next_loop

.handle_start_loop
    # check if we need to skip
    load t5 t2
    tst  t5
    jnz! .handle_start_loop_continue

.handle_start_loop_skip
    # pc = jump_forward_table[t3]
    imov! t0 .jump_forward_table
    add   t0 t3
    load  t0 t0
    jmp! .next_loop

.handle_start_loop_continue
    # increment scope level and continue
    iadd t3 1
    jmp! .next_loop

.handle_end_loop
    # check if we need to skip
    load t5 t2
    tst  t5
    jz!  .handle_end_loop_continue

.handle_end_loop_skip
    # pc = jump_back_table[t3]
    imov! t0 .jump_back_table
    add   t0 t3
    load  t0 t0
    jmp! .next_loop

.handle_end_loop_continue
    # decrement scope level
    isub t3 1
    jmp! .next_loop

.handle_ptr_right
    iadd t2 1
    jmp! .next_loop

.handle_ptr_left
    isub t2 1
    jmp! .next_loop

.handle_inc
    load t5 t2
    iadd t5 1
    str  t2 t5
    jmp! .next_loop

.handle_dec
    load t5 t2
    isub t5 1
    str  t2 t5
    jmp! .next_loop

.handle_out 
    load p0 t2
    call! .print_char
    jmp! .next_loop
    
.next_loop
    iadd t0 1
    jmp! .loop

.exit_main
    pop!  t5 t4 t3 t2 t1 t0
    jmpr
#end .fn_main

.bf_main
    ">++++++++[<+++++++++>-]<..."
    # ">++++[<+++++++>-]<+."
    0
