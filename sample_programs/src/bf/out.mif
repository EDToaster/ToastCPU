DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 20BB; -- . imov r0 .fn_main  [call! .fn_main]
0001 : 3000; -- | imoh r0 .fn_main
0002 : A010; -- ' jmpl
0003 : 7000; --   halt
0004 : 2600; --   imov    t0 0
0005 : 20FF; -- . imov [str!    .ptr_counter t0]
0006 : 30BF; -- | imoh
0007 : 1060; -- ' str
0008 : 2664; -- . imov [imov!   t0 100]
0009 : 3600; -- ' imoh
000A : 20FE; -- . imov [str!    .ptr_line_counter t0]
000B : 30BF; -- | imoh
000C : 1060; -- ' str
000D : A020; --   jmpr
000E : 5D60; -- . push [push!   t0 t1 p0]
000F : 5D70; -- | push
0010 : 5D10; -- ' push
0011 : 8616; --   mov     t0 p0   # t0 = str
0012 : 0760; --   load    t1 t0
0013 : 9704; --   iadd    t1 0    # if (t0 == '\0')
0014 : 201F; -- . imov [jz!     .print_string_exit]
0015 : 3000; -- | imoh
0016 : A001; -- ' j_op
0017 : 8176; --   mov     p0 t1
0018 : 2023; -- . imov r0 .print_char  [call!   .print_char]
0019 : 3000; -- | imoh r0 .print_char
001A : A010; -- ' jmpl
001B : 9614; --   iadd    t0 1    # t0++
001C : 2012; -- . imov [jmp!    .print_string_loop]
001D : 3000; -- | imoh
001E : A000; -- ' j_op
001F : 61D0; -- . pop [pop!    p0 t1 t0]
0020 : 67D0; -- | pop
0021 : 66D0; -- ' pop
0022 : A020; --   jmpr
0023 : 5D60; -- . push [push!   t0 t1 t2]
0024 : 5D70; -- | push
0025 : 5D80; -- ' push
0026 : 8616; --   mov     t0 p0                   # t0 = c
0027 : 96A7; --   icmp    t0 0x0A                 # if (t0 == '\n')
0028 : 203A; -- . imov [jnz!    .print_char_keep_going]
0029 : 3000; -- | imoh
002A : A002; -- ' j_op
002B : 27FF; -- . imov [load!   t1 .ptr_counter]
002C : 37BF; -- | imoh
002D : 0770; -- ' load
002E : 28FE; -- . imov [load!   t2 .ptr_line_counter]
002F : 38BF; -- | imoh
0030 : 0880; -- ' load
0031 : 8784; --   add     t1 t2
0032 : 20FF; -- . imov [str!    .ptr_counter t1]
0033 : 30BF; -- | imoh
0034 : 1070; -- ' str
0035 : 2864; -- . imov [imov!   t2 100]
0036 : 3800; -- ' imoh
0037 : 204E; -- . imov [jmp!    .print_char_store_and_exit]
0038 : 3000; -- | imoh
0039 : A000; -- ' j_op
003A : 28FF; -- . imov [load!   t2 .ptr_counter]
003B : 38BF; -- | imoh
003C : 0880; -- ' load
003D : 2738; --   imov    t1 0b00111000
003E : 978A; --   ishl    t1 8
003F : 8672; --   or      t0 t1
0040 : 1860; --   str     t2 t0
0041 : 9814; --   iadd    t2 1
0042 : 20FF; -- . imov [str!    .ptr_counter t2]
0043 : 30BF; -- | imoh
0044 : 1080; -- ' str
0045 : 28FE; -- . imov [load!   t2 .ptr_line_counter]
0046 : 38BF; -- | imoh
0047 : 0880; -- ' load
0048 : 9815; --   isub    t2 1
0049 : 204E; -- . imov [jnz!    .print_char_store_and_exit]
004A : 3000; -- | imoh
004B : A002; -- ' j_op
004C : 2864; -- . imov [imov!   t2 100]
004D : 3800; -- ' imoh
004E : 20FE; -- . imov [str!    .ptr_line_counter t2]
004F : 30BF; -- | imoh
0050 : 1080; -- ' str
0051 : 68D0; -- . pop [pop!    t2 t1 t0]
0052 : 67D0; -- | pop
0053 : 66D0; -- ' pop
0054 : A020; --   jmpr
0055 : 5D60; -- . push [push! t0 t1 t2]
0056 : 5D70; -- | push
0057 : 5D80; -- ' push
0058 : 2500; --   imov  v0 0
0059 : 8537; --   cmp   v0 p2
005A : 2068; -- . imov [jz!   .arr_find_set_not_found]
005B : 3000; -- | imoh
005C : A001; -- ' j_op
005D : 8716; --   mov   t1 p0
005E : 8754; --   add   t1 v0
005F : 0770; --   load  t1 t1
0060 : 8727; --   cmp   t1 p1
0061 : 206A; -- . imov [jz!   .arr_find_exit]
0062 : 3000; -- | imoh
0063 : A001; -- ' j_op
0064 : 9514; --   iadd  v0 1
0065 : 2059; -- . imov [jmp!  .arr_find_next]
0066 : 3000; -- | imoh
0067 : A000; -- ' j_op
0068 : 25FF; -- . imov [imov! v0 0xFFFF]
0069 : 35FF; -- ' imoh
006A : 68D0; -- . pop [pop!  t2 t1 t0]
006B : 67D0; -- | pop
006C : 66D0; -- ' pop
006D : A020; --   jmpr
006E : 5D60; -- . push [push! t0 t1]
006F : 5D70; -- ' push
0070 : 2600; --   imov  t0 0
0071 : 8637; --   cmp   t0 p2
0072 : 207C; -- . imov [jz!   .arr_memset_exit]
0073 : 3000; -- | imoh
0074 : A001; -- ' j_op
0075 : 8766; --   mov   t1 t0
0076 : 8714; --   add   t1 p0
0077 : 1720; --   str   t1 p1
0078 : 9614; --   iadd  t0 1
0079 : 2071; -- . imov [jmp!  .arr_memset_loop]
007A : 3000; -- | imoh
007B : A000; -- ' j_op
007C : 67D0; -- . pop [pop!  t1 t0]
007D : 66D0; -- ' pop
007E : A020; --   jmpr
007F : 5D00; -- Â· push r0 [isr!]
0080 : 60D0; -- . pop r0 [rti!]
0081 : C000; -- ' rti
0082 : 5D60; -- . push [push! t0 t1 t2 t3 t4 t5]
0083 : 5D70; -- | push
0084 : 5D80; -- | push
0085 : 5D90; -- | push
0086 : 5DA0; -- | push
0087 : 5DB0; -- ' push
0088 : 2653; -- . imov [imov! t0 .bf_main]
0089 : 3601; -- ' imoh
008A : 2800; --   imov  t2 0
008B : 0760; --   load  t1 t0
008C : 205B; -- . imov [icmp! t1 '[']
008D : 3000; -- | imoh
008E : 8707; -- ' cmp
008F : 209F; -- . imov [jz!   .preprocessing_handle_start_loop]
0090 : 3000; -- | imoh
0091 : A001; -- ' j_op
0092 : 205D; -- . imov [icmp! t1 ']']
0093 : 3000; -- | imoh
0094 : 8707; -- ' cmp
0095 : 20A3; -- . imov [jz!   .preprocessing_handle_end_loop]
0096 : 3000; -- | imoh
0097 : A001; -- ' j_op
0098 : 9707; --   tst   t1
0099 : 20B4; -- . imov [jz!   .preprocessing_exit]
009A : 3000; -- | imoh
009B : A001; -- ' j_op
009C : 20B0; -- . imov [jmp! .preprocessing_next]
009D : 3000; -- | imoh
009E : A000; -- ' j_op
009F : 5D60; --   push t0
00A0 : 20B0; -- . imov [jmp! .preprocessing_next]
00A1 : 3000; -- | imoh
00A2 : A000; -- ' j_op
00A3 : 69D0; --   pop  t3
00A4 : 2AFE; -- . imov [imov! t4 .jump_forward]
00A5 : 3A93; -- ' imoh
00A6 : 8A84; --   add   t4 t2
00A7 : 1A90; --   str   t4 t3
00A8 : 2AFE; -- . imov [imov! t4 .jump_backward]
00A9 : 3A8F; -- ' imoh
00AA : 8A84; --   add   t4 t2
00AB : 1A60; --   str   t4 t0
00AC : 9814; --   iadd  t2 1
00AD : 20B0; -- . imov [jmp! .preprocessing_next]
00AE : 3000; -- | imoh
00AF : A000; -- ' j_op
00B0 : 9614; --   iadd t0 1
00B1 : 208B; -- . imov [jmp! .preprocessing_loop]
00B2 : 3000; -- | imoh
00B3 : A000; -- ' j_op
00B4 : 6BD0; -- . pop [pop!  t5 t4 t3 t2 t1 t0]
00B5 : 6AD0; -- | pop
00B6 : 69D0; -- | pop
00B7 : 68D0; -- | pop
00B8 : 67D0; -- | pop
00B9 : 66D0; -- ' pop
00BA : A020; --   jmpr
00BB : 5D60; -- . push [push! t0 t1 t2 t3 t4 t5]
00BC : 5D70; -- | push
00BD : 5D80; -- | push
00BE : 5D90; -- | push
00BF : 5DA0; -- | push
00C0 : 5DB0; -- ' push
00C1 : 2004; -- . imov r0 .print_init  [call!   .print_init]
00C2 : 3000; -- | imoh r0 .print_init
00C3 : A010; -- ' jmpl
00C4 : 21FE; -- . imov [imov! p0 .decode_table]
00C5 : 318E; -- ' imoh
00C6 : 2248; -- . imov [imov! p1 .next_loop]
00C7 : 3201; -- ' imoh
00C8 : 2300; -- . imov [imov! p2 256]
00C9 : 3301; -- ' imoh
00CA : 206E; -- . imov r0 .arr_memset  [call! .arr_memset]
00CB : 3000; -- | imoh r0 .arr_memset
00CC : A010; -- ' jmpl
00CD : 26FE; -- . imov [imov! t0 .decode_table]
00CE : 368E; -- ' imoh
00CF : 274C; -- . imov [imov! t1 .exit_main]
00D0 : 3701; -- ' imoh
00D1 : 1670; --   str   t0 t1
00D2 : 2735; -- . imov [imov! t1 .handle_inc]
00D3 : 3701; -- ' imoh
00D4 : 9684; --   iadd  t0 8
00D5 : 9684; --   iadd  t0 8
00D6 : 9684; --   iadd  t0 8
00D7 : 9684; --   iadd  t0 8
00D8 : 9684; --   iadd  t0 8
00D9 : 9634; --   iadd  t0 3
00DA : 1670; --   str   t0 t1
00DB : 2748; -- . imov [imov! t1 .next_loop]
00DC : 3701; -- ' imoh
00DD : 9614; --   iadd  t0 1
00DE : 1670; --   str   t0 t1
00DF : 273B; -- . imov [imov! t1 .handle_dec]
00E0 : 3701; -- ' imoh
00E1 : 9614; --   iadd  t0 1
00E2 : 1670; --   str   t0 t1
00E3 : 2741; -- . imov [imov! t1 .handle_out]
00E4 : 3701; -- ' imoh
00E5 : 9614; --   iadd  t0 1
00E6 : 1670; --   str   t0 t1
00E7 : 2731; -- . imov [imov! t1 .handle_ptr_left]
00E8 : 3701; -- ' imoh
00E9 : 96E4; --   iadd  t0 14
00EA : 1670; --   str   t0 t1
00EB : 272D; -- . imov [imov! t1 .handle_ptr_right]
00EC : 3701; -- ' imoh
00ED : 9624; --   iadd  t0 2
00EE : 1670; --   str   t0 t1
00EF : 2705; -- . imov [imov! t1 .handle_start_loop]
00F0 : 3701; -- ' imoh
00F1 : 96F4; --   iadd  t0 15
00F2 : 96E4; --   iadd  t0 14
00F3 : 1670; --   str   t0 t1
00F4 : 2719; -- . imov [imov! t1 .handle_end_loop]
00F5 : 3701; -- ' imoh
00F6 : 9624; --   iadd  t0 2
00F7 : 1670; --   str   t0 t1
00F8 : 2082; -- . imov r0 .fn_preprocess  [call! .fn_preprocess]
00F9 : 3000; -- | imoh r0 .fn_preprocess
00FA : A010; -- ' jmpl
00FB : 2653; -- . imov [imov! t0 .bf_main]
00FC : 3601; -- ' imoh
00FD : 28FE; -- . imov [imov! t2 .memory_table]
00FE : 3897; -- ' imoh
00FF : 29FE; -- . imov [imov! t3 .decode_table]
0100 : 398E; -- ' imoh
0101 : 0760; --   load  t1 t0
0102 : 8794; --   add   t1 t3
0103 : 0770; --   load  t1 t1
0104 : A700; --   jmp   t1
0105 : 0B80; --   load t5 t2
0106 : 9B07; --   tst  t5
0107 : 2048; -- . imov [jnz! .next_loop]
0108 : 3001; -- | imoh
0109 : A002; -- ' j_op
010A : 21FE; -- . imov [imov! p0  .jump_forward]
010B : 3193; -- ' imoh
010C : 8266; --   mov   p1  t0
010D : 2300; -- . imov [imov! p2  1024]
010E : 3304; -- ' imoh
010F : 2055; -- . imov r0 .arr_find  [call! .arr_find]
0110 : 3000; -- | imoh r0 .arr_find
0111 : A010; -- ' jmpl
0112 : 26FE; -- . imov [imov! t0 .jump_backward]
0113 : 368F; -- ' imoh
0114 : 8654; --   add   t0 v0
0115 : 0660; --   load  t0 t0
0116 : 2048; -- . imov [jmp! .next_loop]
0117 : 3001; -- | imoh
0118 : A000; -- ' j_op
0119 : 0B80; --   load t5 t2
011A : 9B07; --   tst  t5
011B : 2048; -- . imov [jz!  .next_loop]
011C : 3001; -- | imoh
011D : A001; -- ' j_op
011E : 21FE; -- . imov [imov! p0  .jump_backward]
011F : 318F; -- ' imoh
0120 : 8266; --   mov   p1  t0
0121 : 2300; -- . imov [imov! p2  1024]
0122 : 3304; -- ' imoh
0123 : 2055; -- . imov r0 .arr_find  [call! .arr_find]
0124 : 3000; -- | imoh r0 .arr_find
0125 : A010; -- ' jmpl
0126 : 26FE; -- . imov [imov! t0 .jump_forward]
0127 : 3693; -- ' imoh
0128 : 8654; --   add   t0 v0
0129 : 0660; --   load  t0 t0
012A : 2048; -- . imov [jmp! .next_loop]
012B : 3001; -- | imoh
012C : A000; -- ' j_op
012D : 9814; --   iadd t2 1
012E : 2048; -- . imov [jmp! .next_loop]
012F : 3001; -- | imoh
0130 : A000; -- ' j_op
0131 : 9815; --   isub t2 1
0132 : 2048; -- . imov [jmp! .next_loop]
0133 : 3001; -- | imoh
0134 : A000; -- ' j_op
0135 : 0B80; --   load t5 t2
0136 : 9B14; --   iadd t5 1
0137 : 18B0; --   str  t2 t5
0138 : 2048; -- . imov [jmp! .next_loop]
0139 : 3001; -- | imoh
013A : A000; -- ' j_op
013B : 0B80; --   load t5 t2
013C : 9B15; --   isub t5 1
013D : 18B0; --   str  t2 t5
013E : 2048; -- . imov [jmp! .next_loop]
013F : 3001; -- | imoh
0140 : A000; -- ' j_op
0141 : 0180; --   load p0 t2
0142 : 2023; -- . imov r0 .print_char  [call! .print_char]
0143 : 3000; -- | imoh r0 .print_char
0144 : A010; -- ' jmpl
0145 : 2048; -- . imov [jmp! .next_loop]
0146 : 3001; -- | imoh
0147 : A000; -- ' j_op
0148 : 9614; --   iadd t0 1
0149 : 2001; -- . imov [jmp! .loop]
014A : 3001; -- | imoh
014B : A000; -- ' j_op
014C : 6BD0; -- . pop [pop!  t5 t4 t3 t2 t1 t0]
014D : 6AD0; -- | pop
014E : 69D0; -- | pop
014F : 68D0; -- | pop
0150 : 67D0; -- | pop
0151 : 66D0; -- ' pop
0152 : A020; --   jmpr
0153 : 003E; -- >
0154 : 002B; -- +
0155 : 002B; -- +
0156 : 002B; -- +
0157 : 002B; -- +
0158 : 002B; -- +
0159 : 002B; -- +
015A : 002B; -- +
015B : 002B; -- +
015C : 002B; -- +
015D : 002B; -- +
015E : 002B; -- +
015F : 002B; -- +
0160 : 002B; -- +
0161 : 002B; -- +
0162 : 002B; -- +
0163 : 002B; -- +
0164 : 002B; -- +
0165 : 002B; -- +
0166 : 002B; -- +
0167 : 002B; -- +
0168 : 002B; -- +
0169 : 002B; -- +
016A : 002B; -- +
016B : 002B; -- +
016C : 002B; -- +
016D : 002B; -- +
016E : 002B; -- +
016F : 002B; -- +
0170 : 002B; -- +
0171 : 002B; -- +
0172 : 002B; -- +
0173 : 002B; -- +
0174 : 003E; -- >
0175 : 002B; -- +
0176 : 003E; -- >
0177 : 002B; -- +
0178 : 005B; -- [
0179 : 005B; -- [
017A : 002B; -- +
017B : 002B; -- +
017C : 002B; -- +
017D : 002B; -- +
017E : 002B; -- +
017F : 005B; -- [
0180 : 003E; -- >
0181 : 002B; -- +
0182 : 002B; -- +
0183 : 002B; -- +
0184 : 002B; -- +
0185 : 002B; -- +
0186 : 002B; -- +
0187 : 002B; -- +
0188 : 002B; -- +
0189 : 003C; -- <
018A : 002D; -- -
018B : 005D; -- ]
018C : 003E; -- >
018D : 002E; -- .
018E : 003C; -- <
018F : 002B; -- +
0190 : 002B; -- +
0191 : 002B; -- +
0192 : 002B; -- +
0193 : 002B; -- +
0194 : 002B; -- +
0195 : 005B; -- [
0196 : 003E; -- >
0197 : 002D; -- -
0198 : 002D; -- -
0199 : 002D; -- -
019A : 002D; -- -
019B : 002D; -- -
019C : 002D; -- -
019D : 002D; -- -
019E : 002D; -- -
019F : 003C; -- <
01A0 : 002D; -- -
01A1 : 005D; -- ]
01A2 : 002B; -- +
01A3 : 003C; -- <
01A4 : 003C; -- <
01A5 : 003C; -- <
01A6 : 005D; -- ]
01A7 : 003E; -- >
01A8 : 002E; -- .
01A9 : 003E; -- >
01AA : 003E; -- >
01AB : 005B; -- [
01AC : 005B; -- [
01AD : 002D; -- -
01AE : 005D; -- ]
01AF : 003C; -- <
01B0 : 005B; -- [
01B1 : 003E; -- >
01B2 : 002B; -- +
01B3 : 003C; -- <
01B4 : 002D; -- -
01B5 : 005D; -- ]
01B6 : 003E; -- >
01B7 : 003E; -- >
01B8 : 005B; -- [
01B9 : 003C; -- <
01BA : 003C; -- <
01BB : 002B; -- +
01BC : 003E; -- >
01BD : 002B; -- +
01BE : 003E; -- >
01BF : 002D; -- -
01C0 : 005D; -- ]
01C1 : 003C; -- <
01C2 : 005B; -- [
01C3 : 003E; -- >
01C4 : 002B; -- +
01C5 : 003C; -- <
01C6 : 002D; -- -
01C7 : 005B; -- [
01C8 : 003E; -- >
01C9 : 002B; -- +
01CA : 003C; -- <
01CB : 002D; -- -
01CC : 005B; -- [
01CD : 003E; -- >
01CE : 002B; -- +
01CF : 003C; -- <
01D0 : 002D; -- -
01D1 : 005B; -- [
01D2 : 003E; -- >
01D3 : 002B; -- +
01D4 : 003C; -- <
01D5 : 002D; -- -
01D6 : 005B; -- [
01D7 : 003E; -- >
01D8 : 002B; -- +
01D9 : 003C; -- <
01DA : 002D; -- -
01DB : 005B; -- [
01DC : 003E; -- >
01DD : 002B; -- +
01DE : 003C; -- <
01DF : 002D; -- -
01E0 : 005B; -- [
01E1 : 003E; -- >
01E2 : 002B; -- +
01E3 : 003C; -- <
01E4 : 002D; -- -
01E5 : 005B; -- [
01E6 : 003E; -- >
01E7 : 002B; -- +
01E8 : 003C; -- <
01E9 : 002D; -- -
01EA : 005B; -- [
01EB : 003E; -- >
01EC : 002B; -- +
01ED : 003C; -- <
01EE : 002D; -- -
01EF : 005B; -- [
01F0 : 003E; -- >
01F1 : 005B; -- [
01F2 : 002D; -- -
01F3 : 005D; -- ]
01F4 : 003E; -- >
01F5 : 002B; -- +
01F6 : 003E; -- >
01F7 : 002B; -- +
01F8 : 003C; -- <
01F9 : 003C; -- <
01FA : 003C; -- <
01FB : 002D; -- -
01FC : 005B; -- [
01FD : 003E; -- >
01FE : 002B; -- +
01FF : 003C; -- <
0200 : 002D; -- -
0201 : 005D; -- ]
0202 : 005D; -- ]
0203 : 005D; -- ]
0204 : 005D; -- ]
0205 : 005D; -- ]
0206 : 005D; -- ]
0207 : 005D; -- ]
0208 : 005D; -- ]
0209 : 005D; -- ]
020A : 005D; -- ]
020B : 005D; -- ]
020C : 002B; -- +
020D : 003E; -- >
020E : 003E; -- >
020F : 003E; -- >
0210 : 005D; -- ]
0211 : 003C; -- <
0212 : 003C; -- <
0213 : 003C; -- <
0214 : 005D; -- ]
0215 : 0000; -- 0
END;