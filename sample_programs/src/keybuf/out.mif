DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C0C; -- . imov [imov! isr .isr]
0001 : 3C00; -- ' imoh
0002 : 201A; -- . imov r0 .print_init  [call! .print_init]
0003 : 3000; -- | imoh r0 .print_init
0004 : A010; -- ' jmpl
0005 : 206B; -- . imov r0 .key_buffer_init  [call! .key_buffer_init]
0006 : 3000; -- | imoh r0 .key_buffer_init
0007 : A010; -- ' jmpl
0008 : 20D2; -- . imov r0 .main  [call! .main]
0009 : 3001; -- | imoh r0 .main
000A : A010; -- ' jmpl
000B : 7000; --   halt
000C : 5D00; -- Â· push r0 [isr!]
000D : 5D10; -- . push [push! p0 v0]
000E : 5D50; -- ' push
000F : 209E; -- . imov r0 .get_keyboard_ascii  [call! .get_keyboard_ascii]
0010 : 3001; -- | imoh r0 .get_keyboard_ascii
0011 : A010; -- ' jmpl
0012 : 8156; --   mov p0 v0
0013 : 2075; -- . imov r0 .key_buffer_push  [call! .key_buffer_push]
0014 : 3000; -- | imoh r0 .key_buffer_push
0015 : A010; -- ' jmpl
0016 : 65D0; -- . pop [pop! v0 p0]
0017 : 61D0; -- ' pop
0018 : 60D0; -- . pop r0 [rti!]
0019 : C000; -- ' rti
001A : 2600; --   imov    t0 0
001B : 20FF; -- . imov [str!    .ptr_counter t0]
001C : 30BF; -- | imoh
001D : 1060; -- ' str
001E : 2664; -- . imov [imov!   t0 100]
001F : 3600; -- ' imoh
0020 : 20FE; -- . imov [str!    .ptr_line_counter t0]
0021 : 30BF; -- | imoh
0022 : 1060; -- ' str
0023 : A020; --   jmpr
0024 : 5D60; -- . push [push!   t0 t1 p0]
0025 : 5D70; -- | push
0026 : 5D10; -- ' push
0027 : 8616; --   mov     t0 p0   # t0 = str
0028 : 0760; --   load    t1 t0
0029 : 9704; --   iadd    t1 0    # if (t0 == '\0')
002A : 2035; -- . imov [jz!     .print_string_exit]
002B : 3000; -- | imoh
002C : A001; -- ' j_op
002D : 8176; --   mov     p0 t1
002E : 2039; -- . imov r0 .print_char  [call!   .print_char]
002F : 3000; -- | imoh r0 .print_char
0030 : A010; -- ' jmpl
0031 : 9614; --   iadd    t0 1    # t0++
0032 : 2028; -- . imov [jmp!    .print_string_loop]
0033 : 3000; -- | imoh
0034 : A000; -- ' j_op
0035 : 61D0; -- . pop [pop!    p0 t1 t0]
0036 : 67D0; -- | pop
0037 : 66D0; -- ' pop
0038 : A020; --   jmpr
0039 : 5D60; -- . push [push!   t0 t1 t2]
003A : 5D70; -- | push
003B : 5D80; -- ' push
003C : 8616; --   mov     t0 p0                   # t0 = c
003D : 96A7; --   icmp    t0 0x0A                 # if (t0 == '\n')
003E : 2050; -- . imov [jnz!    .print_char_keep_going]
003F : 3000; -- | imoh
0040 : A002; -- ' j_op
0041 : 27FF; -- . imov [load!   t1 .ptr_counter]
0042 : 37BF; -- | imoh
0043 : 0770; -- ' load
0044 : 28FE; -- . imov [load!   t2 .ptr_line_counter]
0045 : 38BF; -- | imoh
0046 : 0880; -- ' load
0047 : 8784; --   add     t1 t2
0048 : 20FF; -- . imov [str!    .ptr_counter t1]
0049 : 30BF; -- | imoh
004A : 1070; -- ' str
004B : 2864; -- . imov [imov!   t2 100]
004C : 3800; -- ' imoh
004D : 2064; -- . imov [jmp!    .print_char_store_and_exit]
004E : 3000; -- | imoh
004F : A000; -- ' j_op
0050 : 28FF; -- . imov [load!   t2 .ptr_counter]
0051 : 38BF; -- | imoh
0052 : 0880; -- ' load
0053 : 2738; --   imov    t1 0b00111000
0054 : 978A; --   ishl    t1 8
0055 : 8672; --   or      t0 t1
0056 : 1860; --   str     t2 t0
0057 : 9814; --   iadd    t2 1
0058 : 20FF; -- . imov [str!    .ptr_counter t2]
0059 : 30BF; -- | imoh
005A : 1080; -- ' str
005B : 28FE; -- . imov [load!   t2 .ptr_line_counter]
005C : 38BF; -- | imoh
005D : 0880; -- ' load
005E : 9815; --   isub    t2 1
005F : 2064; -- . imov [jnz!    .print_char_store_and_exit]
0060 : 3000; -- | imoh
0061 : A002; -- ' j_op
0062 : 2864; -- . imov [imov!   t2 100]
0063 : 3800; -- ' imoh
0064 : 20FE; -- . imov [str!    .ptr_line_counter t2]
0065 : 30BF; -- | imoh
0066 : 1080; -- ' str
0067 : 68D0; -- . pop [pop!    t2 t1 t0]
0068 : 67D0; -- | pop
0069 : 66D0; -- ' pop
006A : A020; --   jmpr
006B : 5D60; -- . push [push! t0]
006C : 2600; --   imov t0 0
006D : 20EC; -- . imov [str!  .key_buffer_write_offset t0]
006E : 30BF; -- | imoh
006F : 1060; -- ' str
0070 : 20ED; -- . imov [str!  .key_buffer_read_offset t0]
0071 : 30BF; -- | imoh
0072 : 1060; -- ' str
0073 : 66D0; -- . pop [pop! t0]
0074 : A020; --   jmpr
0075 : 5D60; -- . push [push! t0 t1]
0076 : 5D70; -- ' push
0077 : 27EE; -- . imov [imov! t1 .key_buffer]
0078 : 37BF; -- ' imoh
0079 : 26EC; -- . imov [load! t0 .key_buffer_write_offset]
007A : 36BF; -- | imoh
007B : 0660; -- ' load
007C : 8764; --   add   t1 t0
007D : 1710; --   str   t1 p0
007E : 9614; --   iadd  t0 1
007F : 96F1; --   iand  t0 0b1111
0080 : 20EC; -- . imov [str!  .key_buffer_write_offset t0]
0081 : 30BF; -- | imoh
0082 : 1060; -- ' str
0083 : 67D0; -- . pop [pop!  t1 t0]
0084 : 66D0; -- ' pop
0085 : A020; --   jmpr
0086 : 5D60; -- . push [push! t0 t1]
0087 : 5D70; -- ' push
0088 : 26ED; -- . imov [load! t0 .key_buffer_read_offset]
0089 : 36BF; -- | imoh
008A : 0660; -- ' load
008B : 27EC; -- . imov [load! t1 .key_buffer_write_offset]
008C : 37BF; -- | imoh
008D : 0770; -- ' load
008E : 8677; --   cmp t0 t1
008F : 2088; -- . imov [jz! .key_buffer_read_loop]
0090 : 3000; -- | imoh
0091 : A001; -- ' j_op
0092 : 27EE; -- . imov [imov! t1 .key_buffer]
0093 : 37BF; -- ' imoh
0094 : 8764; --   add   t1 t0
0095 : 0570; --   load  v0 t1
0096 : 9614; --   iadd t0 1
0097 : 96F1; --   iand t0 0b1111
0098 : 20ED; -- . imov [str! .key_buffer_read_offset t0]
0099 : 30BF; -- | imoh
009A : 1060; -- ' str
009B : 67D0; -- . pop [pop!  t1 t0]
009C : 66D0; -- ' pop
009D : A020; --   jmpr
009E : 0020; --  
009F : 0020; --  
00A0 : 0020; --  
00A1 : 0020; --  
00A2 : 0020; --  
00A3 : 0020; --  
00A4 : 0020; --  
00A5 : 0020; --  
00A6 : 0020; --  
00A7 : 0020; --  
00A8 : 0020; --  
00A9 : 0020; --  
00AA : 0020; --  
00AB : 0020; --  
00AC : 0060; -- `
00AD : 0020; --  
00AE : 0020; --  
00AF : 0020; --  
00B0 : 0020; --  
00B1 : 0020; --  
00B2 : 0020; --  
00B3 : 0071; -- q
00B4 : 0031; -- 1
00B5 : 0020; --  
00B6 : 0020; --  
00B7 : 0020; --  
00B8 : 007A; -- z
00B9 : 0073; -- s
00BA : 0061; -- a
00BB : 0077; -- w
00BC : 0032; -- 2
00BD : 0020; --  
00BE : 0020; --  
00BF : 0063; -- c
00C0 : 0078; -- x
00C1 : 0064; -- d
00C2 : 0065; -- e
00C3 : 0034; -- 4
00C4 : 0033; -- 3
00C5 : 0020; --  
00C6 : 0020; --  
00C7 : 0020; --  
00C8 : 0076; -- v
00C9 : 0066; -- f
00CA : 0074; -- t
00CB : 0072; -- r
00CC : 0035; -- 5
00CD : 0020; --  
00CE : 0020; --  
00CF : 006E; -- n
00D0 : 0062; -- b
00D1 : 0068; -- h
00D2 : 0067; -- g
00D3 : 0079; -- y
00D4 : 0036; -- 6
00D5 : 0020; --  
00D6 : 0020; --  
00D7 : 0020; --  
00D8 : 006D; -- m
00D9 : 006A; -- j
00DA : 0075; -- u
00DB : 0037; -- 7
00DC : 0038; -- 8
00DD : 0020; --  
00DE : 0020; --  
00DF : 002C; -- ,
00E0 : 006B; -- k
00E1 : 0069; -- i
00E2 : 006F; -- o
00E3 : 0030; -- 0
00E4 : 0039; -- 9
00E5 : 0020; --  
00E6 : 0020; --  
00E7 : 002E; -- .
00E8 : 002F; -- /
00E9 : 006C; -- l
00EA : 003B; -- ;
00EB : 0070; -- p
00EC : 002D; -- -
00ED : 0020; --  
00EE : 0020; --  
00EF : 0020; --  
00F0 : 0020; --  
00F1 : 0020; --  
00F2 : 005B; -- [
00F3 : 003D; -- =
00F4 : 0020; --  
00F5 : 0020; --  
00F6 : 0020; --  
00F7 : 0020; --  
00F8 : 000A; -- \n
00F9 : 005D; -- ]
00FA : 0020; --  
00FB : 005C; -- \\
00FC : 0020; --  
00FD : 0020; --  
00FE : 0020; --  
00FF : 0020; --  
0100 : 0020; --  
0101 : 0020; --  
0102 : 0020; --  
0103 : 0020; --  
0104 : 0020; --  
0105 : 0020; --  
0106 : 0020; --  
0107 : 0020; --  
0108 : 0020; --  
0109 : 0020; --  
010A : 0020; --  
010B : 0020; --  
010C : 0020; --  
010D : 0020; --  
010E : 0020; --  
010F : 0020; --  
0110 : 0020; --  
0111 : 0020; --  
0112 : 0020; --  
0113 : 0020; --  
0114 : 0020; --  
0115 : 0020; --  
0116 : 0020; --  
0117 : 0020; --  
0118 : 0020; --  
0119 : 0020; --  
011A : 0020; --  
011B : 0020; --  
011C : 0020; --  
011D : 0020; --  
011E : 0020; --  
011F : 0020; --  
0120 : 0020; --  
0121 : 0020; --  
0122 : 0020; --  
0123 : 0020; --  
0124 : 0020; --  
0125 : 0020; --  
0126 : 0020; --  
0127 : 0020; --  
0128 : 0020; --  
0129 : 0020; --  
012A : 0020; --  
012B : 0020; --  
012C : 0020; --  
012D : 0020; --  
012E : 0020; --  
012F : 0020; --  
0130 : 0020; --  
0131 : 0020; --  
0132 : 0020; --  
0133 : 0020; --  
0134 : 0020; --  
0135 : 0020; --  
0136 : 0020; --  
0137 : 0020; --  
0138 : 0020; --  
0139 : 0020; --  
013A : 0020; --  
013B : 0020; --  
013C : 0020; --  
013D : 0020; --  
013E : 0020; --  
013F : 0020; --  
0140 : 0020; --  
0141 : 0020; --  
0142 : 0020; --  
0143 : 0020; --  
0144 : 0020; --  
0145 : 0020; --  
0146 : 0020; --  
0147 : 0020; --  
0148 : 0020; --  
0149 : 0020; --  
014A : 0020; --  
014B : 0020; --  
014C : 0020; --  
014D : 0020; --  
014E : 0020; --  
014F : 0020; --  
0150 : 0020; --  
0151 : 0020; --  
0152 : 0020; --  
0153 : 0020; --  
0154 : 0020; --  
0155 : 0020; --  
0156 : 0020; --  
0157 : 0020; --  
0158 : 0020; --  
0159 : 0020; --  
015A : 0020; --  
015B : 0020; --  
015C : 0020; --  
015D : 0020; --  
015E : 0020; --  
015F : 0020; --  
0160 : 0020; --  
0161 : 0020; --  
0162 : 0020; --  
0163 : 0020; --  
0164 : 0020; --  
0165 : 0020; --  
0166 : 0020; --  
0167 : 0020; --  
0168 : 0020; --  
0169 : 0020; --  
016A : 0020; --  
016B : 0020; --  
016C : 0020; --  
016D : 0020; --  
016E : 0020; --  
016F : 0020; --  
0170 : 0020; --  
0171 : 0020; --  
0172 : 0020; --  
0173 : 0020; --  
0174 : 0020; --  
0175 : 0020; --  
0176 : 0020; --  
0177 : 0020; --  
0178 : 0020; --  
0179 : 0020; --  
017A : 0020; --  
017B : 0020; --  
017C : 0020; --  
017D : 0020; --  
017E : 0020; --  
017F : 0020; --  
0180 : 0020; --  
0181 : 0020; --  
0182 : 0020; --  
0183 : 0020; --  
0184 : 0020; --  
0185 : 0020; --  
0186 : 0020; --  
0187 : 0020; --  
0188 : 0020; --  
0189 : 0020; --  
018A : 0020; --  
018B : 0020; --  
018C : 0020; --  
018D : 0020; --  
018E : 0020; --  
018F : 0020; --  
0190 : 0020; --  
0191 : 0020; --  
0192 : 0020; --  
0193 : 0020; --  
0194 : 0020; --  
0195 : 0020; --  
0196 : 0020; --  
0197 : 0020; --  
0198 : 0020; --  
0199 : 0020; --  
019A : 0020; --  
019B : 0020; --  
019C : 0020; --  
019D : 0020; --  
019E : 5D60; -- . push [push!   t0]
019F : 259E; -- . imov [imov!   v0 .ps2_lut]
01A0 : 3500; -- ' imoh
01A1 : 26FF; -- . imov [load!   t0 .ps2_scancode_ptr]
01A2 : 36FF; -- | imoh
01A3 : 0660; -- ' load
01A4 : 8564; --   add     v0 t0
01A5 : 0550; --   load    v0 v0
01A6 : 66D0; -- . pop [pop!    t0]
01A7 : A020; --   jmpr
01A8 : 5D60; -- . push [push! t0 t1 t2]
01A9 : 5D70; -- | push
01AA : 5D80; -- ' push
01AB : 2500; --   imov  v0 0
01AC : 8537; --   cmp   v0 p2
01AD : 20BB; -- . imov [jz!   .arr_find_set_not_found]
01AE : 3001; -- | imoh
01AF : A001; -- ' j_op
01B0 : 8716; --   mov   t1 p0
01B1 : 8754; --   add   t1 v0
01B2 : 0770; --   load  t1 t1
01B3 : 8727; --   cmp   t1 p1
01B4 : 20BD; -- . imov [jz!   .arr_find_exit]
01B5 : 3001; -- | imoh
01B6 : A001; -- ' j_op
01B7 : 9514; --   iadd  v0 1
01B8 : 20AC; -- . imov [jmp!  .arr_find_next]
01B9 : 3001; -- | imoh
01BA : A000; -- ' j_op
01BB : 25FF; -- . imov [imov! v0 0xFFFF]
01BC : 35FF; -- ' imoh
01BD : 68D0; -- . pop [pop!  t2 t1 t0]
01BE : 67D0; -- | pop
01BF : 66D0; -- ' pop
01C0 : A020; --   jmpr
01C1 : 5D60; -- . push [push! t0 t1]
01C2 : 5D70; -- ' push
01C3 : 2600; --   imov  t0 0
01C4 : 8637; --   cmp   t0 p2
01C5 : 20CF; -- . imov [jz!   .arr_memset_exit]
01C6 : 3001; -- | imoh
01C7 : A001; -- ' j_op
01C8 : 8766; --   mov   t1 t0
01C9 : 8714; --   add   t1 p0
01CA : 1720; --   str   t1 p1
01CB : 9614; --   iadd  t0 1
01CC : 20C4; -- . imov [jmp!  .arr_memset_loop]
01CD : 3001; -- | imoh
01CE : A000; -- ' j_op
01CF : 67D0; -- . pop [pop!  t1 t0]
01D0 : 66D0; -- ' pop
01D1 : A020; --   jmpr
01D2 : 2086; -- . imov r0 .key_buffer_read  [call! .key_buffer_read]
01D3 : 3000; -- | imoh r0 .key_buffer_read
01D4 : A010; -- ' jmpl
01D5 : 8156; --   mov p0 v0
01D6 : 2039; -- . imov r0 .print_char  [call! .print_char]
01D7 : 3000; -- | imoh r0 .print_char
01D8 : A010; -- ' jmpl
01D9 : 20D2; -- . imov [jmp! .loop]
01DA : 3001; -- | imoh
01DB : A000; -- ' j_op
01DC : A020; --   jmpr
END;