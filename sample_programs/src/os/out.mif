DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C19; -- . imov [imov!   isr .isr]
0001 : 3C02; -- ' imoh
0002 : 2023; -- . imov r0 .main  [call!   .main]
0003 : 3002; -- | imoh r0 .main
0004 : A010; -- ' jmpl
0005 : 7000; --   halt
0006 : 2600; --   imov    t0 0
0007 : 2000; -- . imov [str!    .ptr_counter t0]
0008 : 3080; -- | imoh
0009 : 1060; -- ' str
000A : 2664; -- . imov [imov!   t0 100]
000B : 3600; -- ' imoh
000C : 2001; -- . imov [str!    .ptr_line_counter t0]
000D : 3080; -- | imoh
000E : 1060; -- ' str
000F : A020; --   jmpr
0010 : 5D60; -- . push [push!   t0 t1 p0]
0011 : 5D70; -- | push
0012 : 5D10; -- ' push
0013 : 8616; --   mov     t0 p0   # t0 = str
0014 : 0760; --   load    t1 t0
0015 : 9704; --   iadd    t1 0    # if (t0 == '\0')
0016 : 2021; -- . imov [jz!     .print_string_exit]
0017 : 3000; -- | imoh
0018 : A001; -- ' j_op
0019 : 8176; --   mov     p0 t1
001A : 205D; -- . imov r0 .print_char  [call!   .print_char]
001B : 3000; -- | imoh r0 .print_char
001C : A010; -- ' jmpl
001D : 9614; --   iadd    t0 1    # t0++
001E : 2014; -- . imov [jmp!    .print_string_loop]
001F : 3000; -- | imoh
0020 : A000; -- ' j_op
0021 : 61D0; -- . pop [pop!    p0 t1 t0]
0022 : 67D0; -- | pop
0023 : 66D0; -- ' pop
0024 : A020; --   jmpr
0025 : 5D60; -- . push [push!  t0 p0]
0026 : 5D10; -- ' push
0027 : 8616; --   mov    t0 p0
0028 : 91C8; --   ishr   p0 12
0029 : 91F1; --   iand   p0 0xF
002A : 2051; -- . imov r0 .print_nibble  [call!  .print_nibble]
002B : 3000; -- | imoh r0 .print_nibble
002C : A010; -- ' jmpl
002D : 8166; --   mov    p0 t0
002E : 9188; --   ishr   p0 8
002F : 91F1; --   iand   p0 0xF
0030 : 2051; -- . imov r0 .print_nibble  [call!  .print_nibble]
0031 : 3000; -- | imoh r0 .print_nibble
0032 : A010; -- ' jmpl
0033 : 8166; --   mov    p0 t0
0034 : 9148; --   ishr   p0 4
0035 : 91F1; --   iand   p0 0xF
0036 : 2051; -- . imov r0 .print_nibble  [call!  .print_nibble]
0037 : 3000; -- | imoh r0 .print_nibble
0038 : A010; -- ' jmpl
0039 : 8166; --   mov    p0 t0
003A : 91F1; --   iand   p0 0xF
003B : 2051; -- . imov r0 .print_nibble  [call!  .print_nibble]
003C : 3000; -- | imoh r0 .print_nibble
003D : A010; -- ' jmpl
003E : 61D0; -- . pop [pop!   p0 t0]
003F : 66D0; -- ' pop
0040 : A020; --   jmpr
0041 : 0030; -- 0
0042 : 0031; -- 1
0043 : 0032; -- 2
0044 : 0033; -- 3
0045 : 0034; -- 4
0046 : 0035; -- 5
0047 : 0036; -- 6
0048 : 0037; -- 7
0049 : 0038; -- 8
004A : 0039; -- 9
004B : 0041; -- A
004C : 0042; -- B
004D : 0043; -- C
004E : 0044; -- D
004F : 0045; -- E
0050 : 0046; -- F
0051 : 5D60; -- . push [push!   t0 p0]
0052 : 5D10; -- ' push
0053 : 2641; -- . imov [imov!   t0 .print_hex_char]
0054 : 3600; -- ' imoh
0055 : 8164; --   add     p0 t0
0056 : 0110; --   load    p0 p0
0057 : 205D; -- . imov r0 .print_char  [call!   .print_char]
0058 : 3000; -- | imoh r0 .print_char
0059 : A010; -- ' jmpl
005A : 61D0; -- . pop [pop!    p0 t0]
005B : 66D0; -- ' pop
005C : A020; --   jmpr
005D : 5D60; -- . push [push!   t0 t1 t2]
005E : 5D70; -- | push
005F : 5D80; -- ' push
0060 : 8616; --   mov     t0 p0                   # t0 = c
0061 : 96A7; --   icmp    t0 0x0A                 # if (t0 == '\n')
0062 : 2074; -- . imov [jnz!    .print_char_keep_going]
0063 : 3000; -- | imoh
0064 : A002; -- ' j_op
0065 : 2700; -- . imov [load!   t1 .ptr_counter]
0066 : 3780; -- | imoh
0067 : 0770; -- ' load
0068 : 2801; -- . imov [load!   t2 .ptr_line_counter]
0069 : 3880; -- | imoh
006A : 0880; -- ' load
006B : 8784; --   add     t1 t2
006C : 2000; -- . imov [str!    .ptr_counter t1]
006D : 3080; -- | imoh
006E : 1070; -- ' str
006F : 2864; -- . imov [imov!   t2 100]
0070 : 3800; -- ' imoh
0071 : 2088; -- . imov [jmp!    .print_char_store_and_exit]
0072 : 3000; -- | imoh
0073 : A000; -- ' j_op
0074 : 2800; -- . imov [load!   t2 .ptr_counter]
0075 : 3880; -- | imoh
0076 : 0880; -- ' load
0077 : 2738; --   imov    t1 0b00111000
0078 : 978A; --   ishl    t1 8
0079 : 8672; --   or      t0 t1
007A : 1860; --   str     t2 t0
007B : 9814; --   iadd    t2 1
007C : 2000; -- . imov [str!    .ptr_counter t2]
007D : 3080; -- | imoh
007E : 1080; -- ' str
007F : 2801; -- . imov [load!   t2 .ptr_line_counter]
0080 : 3880; -- | imoh
0081 : 0880; -- ' load
0082 : 9815; --   isub    t2 1
0083 : 2088; -- . imov [jnz!    .print_char_store_and_exit]
0084 : 3000; -- | imoh
0085 : A002; -- ' j_op
0086 : 2864; -- . imov [imov!   t2 100]
0087 : 3800; -- ' imoh
0088 : 2700; -- . imov [load!   t1 .ptr_counter]
0089 : 3780; -- | imoh
008A : 0770; -- ' load
008B : 2070; -- . imov [icmp!   t1 6000]
008C : 3017; -- | imoh
008D : 8707; -- ' cmp
008E : 2095; -- . imov [jn!     .print_char_skip_reset]
008F : 3000; -- | imoh
0090 : A003; -- ' j_op
0091 : 2700; --   imov    t1 0
0092 : 2000; -- . imov [str!    .ptr_counter t1]
0093 : 3080; -- | imoh
0094 : 1070; -- ' str
0095 : 2001; -- . imov [str!    .ptr_line_counter t2]
0096 : 3080; -- | imoh
0097 : 1080; -- ' str
0098 : 68D0; -- . pop [pop!    t2 t1 t0]
0099 : 67D0; -- | pop
009A : 66D0; -- ' pop
009B : A020; --   jmpr
009C : 5D60; -- . push [push! t0]
009D : 2600; --   imov t0 0
009E : 2013; -- . imov [str!  .key_buffer_write_offset t0]
009F : 3080; -- | imoh
00A0 : 1060; -- ' str
00A1 : 2012; -- . imov [str!  .key_buffer_read_offset t0]
00A2 : 3080; -- | imoh
00A3 : 1060; -- ' str
00A4 : 66D0; -- . pop [pop! t0]
00A5 : A020; --   jmpr
00A6 : 5D60; -- . push [push! t0 t1]
00A7 : 5D70; -- ' push
00A8 : 2702; -- . imov [imov! t1 .key_buffer]
00A9 : 3780; -- ' imoh
00AA : 2613; -- . imov [load! t0 .key_buffer_write_offset]
00AB : 3680; -- | imoh
00AC : 0660; -- ' load
00AD : 8764; --   add   t1 t0
00AE : 1710; --   str   t1 p0
00AF : 9614; --   iadd  t0 1
00B0 : 96F1; --   iand  t0 0b1111
00B1 : 2013; -- . imov [str!  .key_buffer_write_offset t0]
00B2 : 3080; -- | imoh
00B3 : 1060; -- ' str
00B4 : 67D0; -- . pop [pop!  t1 t0]
00B5 : 66D0; -- ' pop
00B6 : A020; --   jmpr
00B7 : 5D60; -- . push [push! t0 t1]
00B8 : 5D70; -- ' push
00B9 : 2612; -- . imov [load! t0 .key_buffer_read_offset]
00BA : 3680; -- | imoh
00BB : 0660; -- ' load
00BC : 2713; -- . imov [load! t1 .key_buffer_write_offset]
00BD : 3780; -- | imoh
00BE : 0770; -- ' load
00BF : 8677; --   cmp t0 t1
00C0 : 20B9; -- . imov [jz! .key_buffer_read_loop]
00C1 : 3000; -- | imoh
00C2 : A001; -- ' j_op
00C3 : 2702; -- . imov [imov! t1 .key_buffer]
00C4 : 3780; -- ' imoh
00C5 : 8764; --   add   t1 t0
00C6 : 0570; --   load  v0 t1
00C7 : 9614; --   iadd t0 1
00C8 : 96F1; --   iand t0 0b1111
00C9 : 2012; -- . imov [str! .key_buffer_read_offset t0]
00CA : 3080; -- | imoh
00CB : 1060; -- ' str
00CC : 67D0; -- . pop [pop!  t1 t0]
00CD : 66D0; -- ' pop
00CE : A020; --   jmpr
00CF : 0020; --  
00D0 : 0020; --  
00D1 : 0020; --  
00D2 : 0020; --  
00D3 : 0020; --  
00D4 : 0020; --  
00D5 : 0020; --  
00D6 : 0020; --  
00D7 : 0020; --  
00D8 : 0020; --  
00D9 : 0020; --  
00DA : 0020; --  
00DB : 0020; --  
00DC : 0020; --  
00DD : 0060; -- `
00DE : 0020; --  
00DF : 0020; --  
00E0 : 0020; --  
00E1 : 0020; --  
00E2 : 0020; --  
00E3 : 0020; --  
00E4 : 0071; -- q
00E5 : 0031; -- 1
00E6 : 0020; --  
00E7 : 0020; --  
00E8 : 0020; --  
00E9 : 007A; -- z
00EA : 0073; -- s
00EB : 0061; -- a
00EC : 0077; -- w
00ED : 0032; -- 2
00EE : 0020; --  
00EF : 0020; --  
00F0 : 0063; -- c
00F1 : 0078; -- x
00F2 : 0064; -- d
00F3 : 0065; -- e
00F4 : 0034; -- 4
00F5 : 0033; -- 3
00F6 : 0020; --  
00F7 : 0020; --  
00F8 : 0020; --  
00F9 : 0076; -- v
00FA : 0066; -- f
00FB : 0074; -- t
00FC : 0072; -- r
00FD : 0035; -- 5
00FE : 0020; --  
00FF : 0020; --  
0100 : 006E; -- n
0101 : 0062; -- b
0102 : 0068; -- h
0103 : 0067; -- g
0104 : 0079; -- y
0105 : 0036; -- 6
0106 : 0020; --  
0107 : 0020; --  
0108 : 0020; --  
0109 : 006D; -- m
010A : 006A; -- j
010B : 0075; -- u
010C : 0037; -- 7
010D : 0038; -- 8
010E : 0020; --  
010F : 0020; --  
0110 : 002C; -- ,
0111 : 006B; -- k
0112 : 0069; -- i
0113 : 006F; -- o
0114 : 0030; -- 0
0115 : 0039; -- 9
0116 : 0020; --  
0117 : 0020; --  
0118 : 002E; -- .
0119 : 002F; -- /
011A : 006C; -- l
011B : 003B; -- ;
011C : 0070; -- p
011D : 002D; -- -
011E : 0020; --  
011F : 0020; --  
0120 : 0020; --  
0121 : 0020; --  
0122 : 0020; --  
0123 : 005B; -- [
0124 : 003D; -- =
0125 : 0020; --  
0126 : 0020; --  
0127 : 0020; --  
0128 : 0020; --  
0129 : 000A; -- \n
012A : 005D; -- ]
012B : 0020; --  
012C : 005C; -- \\
012D : 0020; --  
012E : 0020; --  
012F : 0020; --  
0130 : 0020; --  
0131 : 0020; --  
0132 : 0020; --  
0133 : 0020; --  
0134 : 0020; --  
0135 : 0020; --  
0136 : 0020; --  
0137 : 0020; --  
0138 : 0020; --  
0139 : 0020; --  
013A : 0020; --  
013B : 0020; --  
013C : 0020; --  
013D : 0020; --  
013E : 0020; --  
013F : 0020; --  
0140 : 0020; --  
0141 : 0020; --  
0142 : 0020; --  
0143 : 0020; --  
0144 : 0020; --  
0145 : 0020; --  
0146 : 0020; --  
0147 : 0020; --  
0148 : 0020; --  
0149 : 0020; --  
014A : 0020; --  
014B : 0020; --  
014C : 0020; --  
014D : 0020; --  
014E : 0020; --  
014F : 0020; --  
0150 : 0020; --  
0151 : 0020; --  
0152 : 0020; --  
0153 : 0020; --  
0154 : 0020; --  
0155 : 0020; --  
0156 : 0020; --  
0157 : 0020; --  
0158 : 0020; --  
0159 : 0020; --  
015A : 0020; --  
015B : 0020; --  
015C : 0020; --  
015D : 0020; --  
015E : 0020; --  
015F : 0020; --  
0160 : 0020; --  
0161 : 0020; --  
0162 : 0020; --  
0163 : 0020; --  
0164 : 0020; --  
0165 : 0020; --  
0166 : 0020; --  
0167 : 0020; --  
0168 : 0020; --  
0169 : 0020; --  
016A : 0020; --  
016B : 0020; --  
016C : 0020; --  
016D : 0020; --  
016E : 0020; --  
016F : 0020; --  
0170 : 0020; --  
0171 : 0020; --  
0172 : 0020; --  
0173 : 0020; --  
0174 : 0020; --  
0175 : 0020; --  
0176 : 0020; --  
0177 : 0020; --  
0178 : 0020; --  
0179 : 0020; --  
017A : 0020; --  
017B : 0020; --  
017C : 0020; --  
017D : 0020; --  
017E : 0020; --  
017F : 0020; --  
0180 : 0020; --  
0181 : 0020; --  
0182 : 0020; --  
0183 : 0020; --  
0184 : 0020; --  
0185 : 0020; --  
0186 : 0020; --  
0187 : 0020; --  
0188 : 0020; --  
0189 : 0020; --  
018A : 0020; --  
018B : 0020; --  
018C : 0020; --  
018D : 0020; --  
018E : 0020; --  
018F : 0020; --  
0190 : 0020; --  
0191 : 0020; --  
0192 : 0020; --  
0193 : 0020; --  
0194 : 0020; --  
0195 : 0020; --  
0196 : 0020; --  
0197 : 0020; --  
0198 : 0020; --  
0199 : 0020; --  
019A : 0020; --  
019B : 0020; --  
019C : 0020; --  
019D : 0020; --  
019E : 0020; --  
019F : 0020; --  
01A0 : 0020; --  
01A1 : 0020; --  
01A2 : 0020; --  
01A3 : 0020; --  
01A4 : 0020; --  
01A5 : 0020; --  
01A6 : 0020; --  
01A7 : 0020; --  
01A8 : 0020; --  
01A9 : 0020; --  
01AA : 0020; --  
01AB : 0020; --  
01AC : 0020; --  
01AD : 0020; --  
01AE : 0020; --  
01AF : 0020; --  
01B0 : 0020; --  
01B1 : 0020; --  
01B2 : 0020; --  
01B3 : 0020; --  
01B4 : 0020; --  
01B5 : 0020; --  
01B6 : 0020; --  
01B7 : 0020; --  
01B8 : 0020; --  
01B9 : 0020; --  
01BA : 0020; --  
01BB : 0020; --  
01BC : 0020; --  
01BD : 0020; --  
01BE : 0020; --  
01BF : 0020; --  
01C0 : 0020; --  
01C1 : 0020; --  
01C2 : 0020; --  
01C3 : 0020; --  
01C4 : 0020; --  
01C5 : 0020; --  
01C6 : 0020; --  
01C7 : 0020; --  
01C8 : 0020; --  
01C9 : 0020; --  
01CA : 0020; --  
01CB : 0020; --  
01CC : 0020; --  
01CD : 0020; --  
01CE : 0020; --  
01CF : 5D60; -- . push [push!   t0]
01D0 : 25CF; -- . imov [imov!   v0 .ps2_lut]
01D1 : 3500; -- ' imoh
01D2 : 26FF; -- . imov [load!   t0 .ps2_scancode_ptr]
01D3 : 36FF; -- | imoh
01D4 : 0660; -- ' load
01D5 : 8564; --   add     v0 t0
01D6 : 0550; --   load    v0 v0
01D7 : 66D0; -- . pop [pop!    t0]
01D8 : A020; --   jmpr
01D9 : 0048; -- H
01DA : 0065; -- e
01DB : 006C; -- l
01DC : 006C; -- l
01DD : 006F; -- o
01DE : 0020; --  
01DF : 0066; -- f
01E0 : 0072; -- r
01E1 : 006F; -- o
01E2 : 006D; -- m
01E3 : 0020; --  
01E4 : 0054; -- T
01E5 : 006F; -- o
01E6 : 0061; -- a
01E7 : 0073; -- s
01E8 : 0074; -- t
01E9 : 004F; -- O
01EA : 0053; -- S
01EB : 000A; -- \n
01EC : 004D; -- M
01ED : 0065; -- e
01EE : 006D; -- m
01EF : 006F; -- o
01F0 : 0072; -- r
01F1 : 0079; -- y
01F2 : 0020; --  
01F3 : 004C; -- L
01F4 : 0061; -- a
01F5 : 0079; -- y
01F6 : 006F; -- o
01F7 : 0075; -- u
01F8 : 0074; -- t
01F9 : 003A; -- :
01FA : 0020; --  
01FB : 0033; -- 3
01FC : 0032; -- 2
01FD : 006B; -- k
01FE : 0057; -- W
01FF : 0020; --  
0200 : 0052; -- R
0201 : 004F; -- O
0202 : 004D; -- M
0203 : 0020; --  
0204 : 0031; -- 1
0205 : 0036; -- 6
0206 : 006B; -- k
0207 : 0057; -- W
0208 : 0020; --  
0209 : 0052; -- R
020A : 0041; -- A
020B : 004D; -- M
020C : 0020; --  
020D : 0031; -- 1
020E : 0036; -- 6
020F : 006B; -- k
0210 : 0057; -- W
0211 : 0020; --  
0212 : 0049; -- I
0213 : 004F; -- O
0214 : 000A; -- \n
0215 : 0000; -- \x00
0216 : 0024; -- $
0217 : 0020; --  
0218 : 0000; -- \x00
0219 : 5D00; -- · push r0 [isr!]
021A : 20CF; -- . imov r0 .get_keyboard_ascii  [call!   .get_keyboard_ascii]
021B : 3001; -- | imoh r0 .get_keyboard_ascii
021C : A010; -- ' jmpl
021D : 8156; --   mov     p0 v0
021E : 205D; -- . imov r0 .print_char  [call!   .print_char]
021F : 3000; -- | imoh r0 .print_char
0220 : A010; -- ' jmpl
0221 : 60D0; -- . pop r0 [rti!]
0222 : C000; -- ' rti
0223 : 2006; -- . imov r0 .print_init  [call!   .print_init]
0224 : 3000; -- | imoh r0 .print_init
0225 : A010; -- ' jmpl
0226 : 21D9; -- . imov [imov!   p0 .welcome_message]
0227 : 3101; -- ' imoh
0228 : 2010; -- . imov r0 .print_string  [call!   .print_string]
0229 : 3000; -- | imoh r0 .print_string
022A : A010; -- ' jmpl
022B : 2116; -- . imov [imov!   p0 .prompt_message]
022C : 3102; -- ' imoh
022D : 2010; -- . imov r0 .print_string  [call!   .print_string]
022E : 3000; -- | imoh r0 .print_string
022F : A010; -- ' jmpl
0230 : 2030; -- . imov [jmp!    .main_loop]
0231 : 3002; -- | imoh
0232 : A000; -- ' j_op
0233 : A020; --   jmpr    # deadcode
END;