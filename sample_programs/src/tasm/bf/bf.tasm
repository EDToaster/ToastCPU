.reset
    call! .fn_main
    halt

#include<../../../lib/tasm/print>
#include<../../../lib/tasm/arr>
#include<./bf_main>

.isr
    isr!
    rti!

.memory_table   [10240]

.jump_forward   [1024]
.jump_backward  [1024]

# 0       5      10     15      20
# [ +++ [ +++ ] +++ ] +++ [ +++ ]  
#
# jump_forward:     jump_backward:
# [ 4, 0, 16 ]      [ 8, 12, 20 ]

.fn_preprocess
    push! t0 t1 t2 t3 t4 t5

    # t0 = program counter
    # t1 = current command
    # t2 = bracket pair counter
    # t3 = corresponding start loop loc

    # t4 = whatever we need it for

    imov! t0 .bf_main
    imov  t2 0


.preprocessing_loop
    load  t1 t0

    icmp! t1 '['
    jz!   .preprocessing_handle_start_loop
    
    icmp! t1 ']'
    jz!   .preprocessing_handle_end_loop

    tst   t1
    jz!   .preprocessing_exit
    
    jmp! .preprocessing_next

.preprocessing_handle_start_loop
    # push current address on to stack
    push t0
    jmp! .preprocessing_next

.preprocessing_handle_end_loop
    # pop start loop address
    pop  t3

    # jump_forward[t2] = t3
    # jump_backward[t2] = t0
    # t2++

    imov! t4 .jump_forward
    add   t4 t2
    str   t4 t3

    imov! t4 .jump_backward
    add   t4 t2
    str   t4 t0

    iadd  t2 1

    jmp! .preprocessing_next

.preprocessing_next
    iadd t0 1
    jmp! .preprocessing_loop

.preprocessing_exit
    pop!  t5 t4 t3 t2 t1 t0
    jmpr
#end .fn_preprocess

.decode_table   [256]

.fn_main
    push! t0 t1 t2 t3 t4 t5
    call!   .print_init

    # setup jump table
    imov! p0 .decode_table
    imov! p1 .next_loop
    imov! p2 256

    call! .arr_memset

    imov! t0 .decode_table

    # \0 0x00
    imov! t1 .exit_main
    str   t0 t1

    # + 0x2B
    imov! t1 .handle_inc
    iadd  t0 8
    iadd  t0 8
    iadd  t0 8
    iadd  t0 8
    iadd  t0 8
    iadd  t0 3
    str   t0 t1

    # , 0x2C -- noop for now
    imov! t1 .next_loop
    iadd  t0 1
    str   t0 t1

    # - 0x2D
    imov! t1 .handle_dec
    iadd  t0 1
    str   t0 t1

    # . 0x2E
    imov! t1 .handle_out
    iadd  t0 1
    str   t0 t1

    # < 0x3C
    imov! t1 .handle_ptr_left
    iadd  t0 14
    str   t0 t1

    # > 0x3E
    imov! t1 .handle_ptr_right
    iadd  t0 2
    str   t0 t1

    # [ 0x5B +29
    imov! t1 .handle_start_loop
    iadd  t0 15
    iadd  t0 14
    str   t0 t1

    # ] 0x5D
    imov! t1 .handle_end_loop
    iadd  t0 2
    str   t0 t1
    
    # we do some funky preprocessing of jump tables
    call! .fn_preprocess

    # start executing main program
    imov! t0 .bf_main
    imov! t2 .memory_table
    imov! t3 .decode_table

.loop
    # t0 = program counter
    # t1 = current command
    # t2 = memory ptr

    # t4 = jump next loc
    # t5 = handler specific

    # decode command
    load  t1 t0
    add   t1 t3
    load  t1 t1
    jmp   t1

.handle_start_loop
    # check if we need to skip
    load t5 t2
    tst  t5
    jnz! .next_loop

.handle_start_loop_skip
    # pc = jump_backward[arr_find(jump_forward, t0, 1024))
    imov! p0  .jump_forward
    mov   p1  t0
    imov! p2  1024
    call! .arr_find

    imov! t0 .jump_backward
    add   t0 v0
    load  t0 t0

    jmp! .next_loop

.handle_end_loop
    # check if we need to skip
    load t5 t2
    tst  t5
    jz!  .next_loop

.handle_end_loop_skip
    # pc = jump_forward[arr_find(jump_backward, t0, 1024))
    imov! p0  .jump_backward
    mov   p1  t0
    imov! p2  1024
    call! .arr_find

    imov! t0 .jump_forward
    add   t0 v0
    load  t0 t0
    jmp! .next_loop

.handle_ptr_right
    iadd t2 1
    jmp! .next_loop

.handle_ptr_left
    isub t2 1
    jmp! .next_loop

.handle_inc
    load t5 t2
    iadd t5 1
    str  t2 t5
    jmp! .next_loop

.handle_dec
    load t5 t2
    isub t5 1
    str  t2 t5
    jmp! .next_loop

.handle_out 
    load p0 t2
    call! .print_char
    jmp! .next_loop
    
.next_loop
    iadd t0 1
    jmp! .loop

.exit_main
    pop!  t5 t4 t3 t2 t1 t0
    jmpr
#end .fn_main