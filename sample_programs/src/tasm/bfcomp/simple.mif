DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C0C; -- . imov [imov! isr .isr]
0001 : 3C00; -- ' imoh
0002 : 201A; -- . imov r0 .print_init  [call! .print_init]
0003 : 3000; -- | imoh r0 .print_init
0004 : A010; -- ' jmpl
0005 : 20C1; -- . imov r0 .key_buffer_init  [call! .key_buffer_init]
0006 : 3000; -- | imoh r0 .key_buffer_init
0007 : A010; -- ' jmpl
0008 : 2028; -- . imov r0 .main  [call! .main]
0009 : 3002; -- | imoh r0 .main
000A : A010; -- ' jmpl
000B : 7000; --   halt
000C : 5D00; -- Â· push r0 [isr!]
000D : 5D10; -- . push [push! p0 v0]
000E : 5D50; -- ' push
000F : 20F4; -- . imov r0 .get_keyboard_ascii  [call! .get_keyboard_ascii]
0010 : 3001; -- | imoh r0 .get_keyboard_ascii
0011 : A010; -- ' jmpl
0012 : 8156; --   mov p0 v0
0013 : 20CB; -- . imov r0 .key_buffer_push  [call! .key_buffer_push]
0014 : 3000; -- | imoh r0 .key_buffer_push
0015 : A010; -- ' jmpl
0016 : 65D0; -- . pop [pop! v0 p0]
0017 : 61D0; -- ' pop
0018 : 60D0; -- . pop r0 [rti!]
0019 : C000; -- ' rti
001A : 2600; --   imov    t0 0
001B : 2000; -- . imov [str!    .ptr_counter t0]
001C : 3080; -- | imoh
001D : 1060; -- ' str
001E : 2664; -- . imov [imov!   t0 100]
001F : 3600; -- ' imoh
0020 : 2001; -- . imov [str!    .ptr_line_counter t0]
0021 : 3080; -- | imoh
0022 : 1060; -- ' str
0023 : A020; --   jmpr
0024 : 5D60; -- . push [push!   t0 t1 p0]
0025 : 5D70; -- | push
0026 : 5D10; -- ' push
0027 : 8616; --   mov     t0 p0   # t0 = str
0028 : 0760; --   load    t1 t0
0029 : 9704; --   iadd    t1 0    # if (t0 == '\0')
002A : 2035; -- . imov [jz!     .print_string_exit]
002B : 3000; -- | imoh
002C : A001; -- ' j_op
002D : 8176; --   mov     p0 t1
002E : 2082; -- . imov r0 .print_char  [call!   .print_char]
002F : 3000; -- | imoh r0 .print_char
0030 : A010; -- ' jmpl
0031 : 9614; --   iadd    t0 1    # t0++
0032 : 2028; -- . imov [jmp!    .print_string_loop]
0033 : 3000; -- | imoh
0034 : A000; -- ' j_op
0035 : 61D0; -- . pop [pop!    p0 t1 t0]
0036 : 67D0; -- | pop
0037 : 66D0; -- ' pop
0038 : A020; --   jmpr
0039 : 5D60; -- . push [push!  t0 t1]
003A : 5D70; -- ' push
003B : 2602; -- . imov [load!  t0 .print_color]
003C : 3680; -- | imoh
003D : 0660; -- ' load
003E : 27FF; -- . imov [imov!  t1 0b0000000011111111]
003F : 3700; -- ' imoh
0040 : 8671; --   and    t0 t1
0041 : 8716; --   mov    t1 p0
0042 : 978A; --   ishl   t1 8
0043 : 8672; --   or     t0 t1
0044 : 2002; -- . imov [str!   .print_color t0]
0045 : 3080; -- | imoh
0046 : 1060; -- ' str
0047 : 67D0; -- . pop [pop!   t1 t0]
0048 : 66D0; -- ' pop
0049 : A020; --   jmpr
004A : 5D60; -- . push [push!  t0 p0]
004B : 5D10; -- ' push
004C : 8616; --   mov    t0 p0
004D : 91C8; --   ishr   p0 12
004E : 91F1; --   iand   p0 0xF
004F : 2076; -- . imov r0 .print_nibble  [call!  .print_nibble]
0050 : 3000; -- | imoh r0 .print_nibble
0051 : A010; -- ' jmpl
0052 : 8166; --   mov    p0 t0
0053 : 9188; --   ishr   p0 8
0054 : 91F1; --   iand   p0 0xF
0055 : 2076; -- . imov r0 .print_nibble  [call!  .print_nibble]
0056 : 3000; -- | imoh r0 .print_nibble
0057 : A010; -- ' jmpl
0058 : 8166; --   mov    p0 t0
0059 : 9148; --   ishr   p0 4
005A : 91F1; --   iand   p0 0xF
005B : 2076; -- . imov r0 .print_nibble  [call!  .print_nibble]
005C : 3000; -- | imoh r0 .print_nibble
005D : A010; -- ' jmpl
005E : 8166; --   mov    p0 t0
005F : 91F1; --   iand   p0 0xF
0060 : 2076; -- . imov r0 .print_nibble  [call!  .print_nibble]
0061 : 3000; -- | imoh r0 .print_nibble
0062 : A010; -- ' jmpl
0063 : 61D0; -- . pop [pop!   p0 t0]
0064 : 66D0; -- ' pop
0065 : A020; --   jmpr
0066 : 0030; -- 0
0067 : 0031; -- 1
0068 : 0032; -- 2
0069 : 0033; -- 3
006A : 0034; -- 4
006B : 0035; -- 5
006C : 0036; -- 6
006D : 0037; -- 7
006E : 0038; -- 8
006F : 0039; -- 9
0070 : 0041; -- A
0071 : 0042; -- B
0072 : 0043; -- C
0073 : 0044; -- D
0074 : 0045; -- E
0075 : 0046; -- F
0076 : 5D60; -- . push [push!   t0 p0]
0077 : 5D10; -- ' push
0078 : 2666; -- . imov [imov!   t0 .print_hex_char]
0079 : 3600; -- ' imoh
007A : 8164; --   add     p0 t0
007B : 0110; --   load    p0 p0
007C : 2082; -- . imov r0 .print_char  [call!   .print_char]
007D : 3000; -- | imoh r0 .print_char
007E : A010; -- ' jmpl
007F : 61D0; -- . pop [pop!    p0 t0]
0080 : 66D0; -- ' pop
0081 : A020; --   jmpr
0082 : 5D60; -- . push [push!   t0 t1 t2]
0083 : 5D70; -- | push
0084 : 5D80; -- ' push
0085 : 8616; --   mov     t0 p0                   # t0 = c
0086 : 96A7; --   icmp    t0 0x0A                 # if (t0 == '\n')
0087 : 2099; -- . imov [jnz!    .print_char_keep_going]
0088 : 3000; -- | imoh
0089 : A002; -- ' j_op
008A : 2700; -- . imov [load!   t1 .ptr_counter]
008B : 3780; -- | imoh
008C : 0770; -- ' load
008D : 2801; -- . imov [load!   t2 .ptr_line_counter]
008E : 3880; -- | imoh
008F : 0880; -- ' load
0090 : 8784; --   add     t1 t2
0091 : 2000; -- . imov [str!    .ptr_counter t1]
0092 : 3080; -- | imoh
0093 : 1070; -- ' str
0094 : 2864; -- . imov [imov!   t2 100]
0095 : 3800; -- ' imoh
0096 : 20AD; -- . imov [jmp!    .print_char_store_and_exit]
0097 : 3000; -- | imoh
0098 : A000; -- ' j_op
0099 : 2800; -- . imov [load!   t2 .ptr_counter]
009A : 3880; -- | imoh
009B : 0880; -- ' load
009C : 2738; --   imov    t1 0b00111000
009D : 978A; --   ishl    t1 8
009E : 8672; --   or      t0 t1
009F : 1860; --   str     t2 t0
00A0 : 9814; --   iadd    t2 1
00A1 : 2000; -- . imov [str!    .ptr_counter t2]
00A2 : 3080; -- | imoh
00A3 : 1080; -- ' str
00A4 : 2801; -- . imov [load!   t2 .ptr_line_counter]
00A5 : 3880; -- | imoh
00A6 : 0880; -- ' load
00A7 : 9815; --   isub    t2 1
00A8 : 20AD; -- . imov [jnz!    .print_char_store_and_exit]
00A9 : 3000; -- | imoh
00AA : A002; -- ' j_op
00AB : 2864; -- . imov [imov!   t2 100]
00AC : 3800; -- ' imoh
00AD : 2700; -- . imov [load!   t1 .ptr_counter]
00AE : 3780; -- | imoh
00AF : 0770; -- ' load
00B0 : 2070; -- . imov [icmp!   t1 6000]
00B1 : 3017; -- | imoh
00B2 : 8707; -- ' cmp
00B3 : 20BA; -- . imov [jn!     .print_char_skip_reset]
00B4 : 3000; -- | imoh
00B5 : A003; -- ' j_op
00B6 : 2700; --   imov    t1 0
00B7 : 2000; -- . imov [str!    .ptr_counter t1]
00B8 : 3080; -- | imoh
00B9 : 1070; -- ' str
00BA : 2001; -- . imov [str!    .ptr_line_counter t2]
00BB : 3080; -- | imoh
00BC : 1080; -- ' str
00BD : 68D0; -- . pop [pop!    t2 t1 t0]
00BE : 67D0; -- | pop
00BF : 66D0; -- ' pop
00C0 : A020; --   jmpr
00C1 : 5D60; -- . push [push! t0]
00C2 : 2600; --   imov t0 0
00C3 : 2014; -- . imov [str!  .key_buffer_write_offset t0]
00C4 : 3080; -- | imoh
00C5 : 1060; -- ' str
00C6 : 2013; -- . imov [str!  .key_buffer_read_offset t0]
00C7 : 3080; -- | imoh
00C8 : 1060; -- ' str
00C9 : 66D0; -- . pop [pop! t0]
00CA : A020; --   jmpr
00CB : 5D60; -- . push [push! t0 t1]
00CC : 5D70; -- ' push
00CD : 2703; -- . imov [imov! t1 .key_buffer]
00CE : 3780; -- ' imoh
00CF : 2614; -- . imov [load! t0 .key_buffer_write_offset]
00D0 : 3680; -- | imoh
00D1 : 0660; -- ' load
00D2 : 8764; --   add   t1 t0
00D3 : 1710; --   str   t1 p0
00D4 : 9614; --   iadd  t0 1
00D5 : 96F1; --   iand  t0 0b1111
00D6 : 2014; -- . imov [str!  .key_buffer_write_offset t0]
00D7 : 3080; -- | imoh
00D8 : 1060; -- ' str
00D9 : 67D0; -- . pop [pop!  t1 t0]
00DA : 66D0; -- ' pop
00DB : A020; --   jmpr
00DC : 5D60; -- . push [push! t0 t1]
00DD : 5D70; -- ' push
00DE : 2613; -- . imov [load! t0 .key_buffer_read_offset]
00DF : 3680; -- | imoh
00E0 : 0660; -- ' load
00E1 : 2714; -- . imov [load! t1 .key_buffer_write_offset]
00E2 : 3780; -- | imoh
00E3 : 0770; -- ' load
00E4 : 8677; --   cmp t0 t1
00E5 : 20DE; -- . imov [jz! .key_buffer_read_loop]
00E6 : 3000; -- | imoh
00E7 : A001; -- ' j_op
00E8 : 2703; -- . imov [imov! t1 .key_buffer]
00E9 : 3780; -- ' imoh
00EA : 8764; --   add   t1 t0
00EB : 0570; --   load  v0 t1
00EC : 9614; --   iadd t0 1
00ED : 96F1; --   iand t0 0b1111
00EE : 2013; -- . imov [str! .key_buffer_read_offset t0]
00EF : 3080; -- | imoh
00F0 : 1060; -- ' str
00F1 : 67D0; -- . pop [pop!  t1 t0]
00F2 : 66D0; -- ' pop
00F3 : A020; --   jmpr
00F4 : 0020; --  
00F5 : 0020; --  
00F6 : 0020; --  
00F7 : 0020; --  
00F8 : 0020; --  
00F9 : 0020; --  
00FA : 0020; --  
00FB : 0020; --  
00FC : 0020; --  
00FD : 0020; --  
00FE : 0020; --  
00FF : 0020; --  
0100 : 0020; --  
0101 : 0020; --  
0102 : 0060; -- `
0103 : 0020; --  
0104 : 0020; --  
0105 : 0020; --  
0106 : 0020; --  
0107 : 0020; --  
0108 : 0020; --  
0109 : 0071; -- q
010A : 0031; -- 1
010B : 0020; --  
010C : 0020; --  
010D : 0020; --  
010E : 007A; -- z
010F : 0073; -- s
0110 : 0061; -- a
0111 : 0077; -- w
0112 : 0032; -- 2
0113 : 0020; --  
0114 : 0020; --  
0115 : 0063; -- c
0116 : 0078; -- x
0117 : 0064; -- d
0118 : 0065; -- e
0119 : 0034; -- 4
011A : 0033; -- 3
011B : 0020; --  
011C : 0020; --  
011D : 0020; --  
011E : 0076; -- v
011F : 0066; -- f
0120 : 0074; -- t
0121 : 0072; -- r
0122 : 0035; -- 5
0123 : 0020; --  
0124 : 0020; --  
0125 : 006E; -- n
0126 : 0062; -- b
0127 : 0068; -- h
0128 : 0067; -- g
0129 : 0079; -- y
012A : 0036; -- 6
012B : 0020; --  
012C : 0020; --  
012D : 0020; --  
012E : 006D; -- m
012F : 006A; -- j
0130 : 0075; -- u
0131 : 0037; -- 7
0132 : 0038; -- 8
0133 : 0020; --  
0134 : 0020; --  
0135 : 002C; -- ,
0136 : 006B; -- k
0137 : 0069; -- i
0138 : 006F; -- o
0139 : 0030; -- 0
013A : 0039; -- 9
013B : 0020; --  
013C : 0020; --  
013D : 002E; -- .
013E : 002F; -- /
013F : 006C; -- l
0140 : 003B; -- ;
0141 : 0070; -- p
0142 : 002D; -- -
0143 : 0020; --  
0144 : 0020; --  
0145 : 0020; --  
0146 : 0020; --  
0147 : 0020; --  
0148 : 005B; -- [
0149 : 003D; -- =
014A : 0020; --  
014B : 0020; --  
014C : 0020; --  
014D : 0020; --  
014E : 000A; -- \n
014F : 005D; -- ]
0150 : 0020; --  
0151 : 005C; -- \\
0152 : 0020; --  
0153 : 0020; --  
0154 : 0020; --  
0155 : 0020; --  
0156 : 0020; --  
0157 : 0020; --  
0158 : 0020; --  
0159 : 0020; --  
015A : 0020; --  
015B : 0020; --  
015C : 0020; --  
015D : 0020; --  
015E : 0020; --  
015F : 0020; --  
0160 : 0020; --  
0161 : 0020; --  
0162 : 0020; --  
0163 : 0020; --  
0164 : 0020; --  
0165 : 0020; --  
0166 : 0020; --  
0167 : 0020; --  
0168 : 0020; --  
0169 : 0020; --  
016A : 0020; --  
016B : 0020; --  
016C : 0020; --  
016D : 0020; --  
016E : 0020; --  
016F : 0020; --  
0170 : 0020; --  
0171 : 0020; --  
0172 : 0020; --  
0173 : 0020; --  
0174 : 0020; --  
0175 : 0020; --  
0176 : 0020; --  
0177 : 0020; --  
0178 : 0020; --  
0179 : 0020; --  
017A : 0020; --  
017B : 0020; --  
017C : 0020; --  
017D : 0020; --  
017E : 0020; --  
017F : 0020; --  
0180 : 0020; --  
0181 : 0020; --  
0182 : 0020; --  
0183 : 0020; --  
0184 : 0020; --  
0185 : 0020; --  
0186 : 0020; --  
0187 : 0020; --  
0188 : 0020; --  
0189 : 0020; --  
018A : 0020; --  
018B : 0020; --  
018C : 0020; --  
018D : 0020; --  
018E : 0020; --  
018F : 0020; --  
0190 : 0020; --  
0191 : 0020; --  
0192 : 0020; --  
0193 : 0020; --  
0194 : 0020; --  
0195 : 0020; --  
0196 : 0020; --  
0197 : 0020; --  
0198 : 0020; --  
0199 : 0020; --  
019A : 0020; --  
019B : 0020; --  
019C : 0020; --  
019D : 0020; --  
019E : 0020; --  
019F : 0020; --  
01A0 : 0020; --  
01A1 : 0020; --  
01A2 : 0020; --  
01A3 : 0020; --  
01A4 : 0020; --  
01A5 : 0020; --  
01A6 : 0020; --  
01A7 : 0020; --  
01A8 : 0020; --  
01A9 : 0020; --  
01AA : 0020; --  
01AB : 0020; --  
01AC : 0020; --  
01AD : 0020; --  
01AE : 0020; --  
01AF : 0020; --  
01B0 : 0020; --  
01B1 : 0020; --  
01B2 : 0020; --  
01B3 : 0020; --  
01B4 : 0020; --  
01B5 : 0020; --  
01B6 : 0020; --  
01B7 : 0020; --  
01B8 : 0020; --  
01B9 : 0020; --  
01BA : 0020; --  
01BB : 0020; --  
01BC : 0020; --  
01BD : 0020; --  
01BE : 0020; --  
01BF : 0020; --  
01C0 : 0020; --  
01C1 : 0020; --  
01C2 : 0020; --  
01C3 : 0020; --  
01C4 : 0020; --  
01C5 : 0020; --  
01C6 : 0020; --  
01C7 : 0020; --  
01C8 : 0020; --  
01C9 : 0020; --  
01CA : 0020; --  
01CB : 0020; --  
01CC : 0020; --  
01CD : 0020; --  
01CE : 0020; --  
01CF : 0020; --  
01D0 : 0020; --  
01D1 : 0020; --  
01D2 : 0020; --  
01D3 : 0020; --  
01D4 : 0020; --  
01D5 : 0020; --  
01D6 : 0020; --  
01D7 : 0020; --  
01D8 : 0020; --  
01D9 : 0020; --  
01DA : 0020; --  
01DB : 0020; --  
01DC : 0020; --  
01DD : 0020; --  
01DE : 0020; --  
01DF : 0020; --  
01E0 : 0020; --  
01E1 : 0020; --  
01E2 : 0020; --  
01E3 : 0020; --  
01E4 : 0020; --  
01E5 : 0020; --  
01E6 : 0020; --  
01E7 : 0020; --  
01E8 : 0020; --  
01E9 : 0020; --  
01EA : 0020; --  
01EB : 0020; --  
01EC : 0020; --  
01ED : 0020; --  
01EE : 0020; --  
01EF : 0020; --  
01F0 : 0020; --  
01F1 : 0020; --  
01F2 : 0020; --  
01F3 : 0020; --  
01F4 : 5D60; -- . push [push!   t0]
01F5 : 25F4; -- . imov [imov!   v0 .ps2_lut]
01F6 : 3500; -- ' imoh
01F7 : 26FF; -- . imov [load!   t0 .ps2_scancode_ptr]
01F8 : 36FF; -- | imoh
01F9 : 0660; -- ' load
01FA : 8564; --   add     v0 t0
01FB : 0550; --   load    v0 v0
01FC : 66D0; -- . pop [pop!    t0]
01FD : A020; --   jmpr
01FE : 5D60; -- . push [push! t0 t1 t2]
01FF : 5D70; -- | push
0200 : 5D80; -- ' push
0201 : 2500; --   imov  v0 0
0202 : 8537; --   cmp   v0 p2
0203 : 2011; -- . imov [jz!   .arr_find_set_not_found]
0204 : 3002; -- | imoh
0205 : A001; -- ' j_op
0206 : 8716; --   mov   t1 p0
0207 : 8754; --   add   t1 v0
0208 : 0770; --   load  t1 t1
0209 : 8727; --   cmp   t1 p1
020A : 2013; -- . imov [jz!   .arr_find_exit]
020B : 3002; -- | imoh
020C : A001; -- ' j_op
020D : 9514; --   iadd  v0 1
020E : 2002; -- . imov [jmp!  .arr_find_next]
020F : 3002; -- | imoh
0210 : A000; -- ' j_op
0211 : 25FF; -- . imov [imov! v0 0xFFFF]
0212 : 35FF; -- ' imoh
0213 : 68D0; -- . pop [pop!  t2 t1 t0]
0214 : 67D0; -- | pop
0215 : 66D0; -- ' pop
0216 : A020; --   jmpr
0217 : 5D60; -- . push [push! t0 t1]
0218 : 5D70; -- ' push
0219 : 2600; --   imov  t0 0
021A : 8637; --   cmp   t0 p2
021B : 2025; -- . imov [jz!   .arr_memset_exit]
021C : 3002; -- | imoh
021D : A001; -- ' j_op
021E : 8766; --   mov   t1 t0
021F : 8714; --   add   t1 p0
0220 : 1720; --   str   t1 p1
0221 : 9614; --   iadd  t0 1
0222 : 201A; -- . imov [jmp!  .arr_memset_loop]
0223 : 3002; -- | imoh
0224 : A000; -- ' j_op
0225 : 67D0; -- . pop [pop!  t1 t0]
0226 : 66D0; -- ' pop
0227 : A020; --   jmpr
0228 : 2100; --   imov  p0 0
0229 : 2200; --   imov  p1 0
022A : 2370; -- . imov [imov! p2 6000]
022B : 3317; -- ' imoh
022C : 2017; -- . imov r0 .arr_memset  [call! .arr_memset]
022D : 3002; -- | imoh r0 .arr_memset
022E : A010; -- ' jmpl
022F : 2115; -- . imov [imov! p0 .memory_table]
0230 : 3180; -- ' imoh
0231 : 2200; --   imov  p1 0
0232 : 2300; -- . imov [imov! p2 10240]
0233 : 3328; -- ' imoh
0234 : 2017; -- . imov r0 .arr_memset  [call! .arr_memset]
0235 : 3002; -- | imoh r0 .arr_memset
0236 : A010; -- ' jmpl
0237 : 2615; -- . imov [imov! t0 .memory_table]
0238 : 3680; -- ' imoh
0239 : 2700; --   imov t1 0
023A : 2800; --   imov t2 0 # anything
023B : 2900; --   imov t3 0 # always zero
023C : 2A00; --   imov t4 0 # anything
023D : 0760; --   load t1 t0
023E : 8866; --   mov  t2 t0
023F : 0A81; --   load t4 t2 1
0240 : 8A74; --   add  t4 t1
0241 : 18A1; --   str  t2 t4 1
0242 : 0760; --   load t1 t0
0243 : 8866; --   mov  t2 t0
0244 : 0A82; --   load t4 t2 2
0245 : 8A74; --   add  t4 t1
0246 : 18A2; --   str  t2 t4 2
0247 : 1690; --   str  t0 t3
0248 : A020; --   jmpr
END;