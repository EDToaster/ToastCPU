
# allocate 1024 words on the heap
.ret_stack [0x0400]
.reset
    # setup isr and jump to main
    imov!   isr .isr
    # initialize ret stack ptrs
    imov!   t5 .ret_stack
    imov!   t0 0x03FF
    add     t5 t0
    imov!   t1 .reset_ret
    push    t5 t1
    # initialize our global variables
    call!   .init_globals
    jmp!    .main
.reset_ret
    halt
.init_globals
    push! t0
    imov!  t0 100
    str!   .variable_alloc_text_progress t0
    imov!  t0 0
    str!   .variable_alloc_text_ptr t0
    imov!  t0 0
    str!   .variable_alloc_key_buffer t0
    pop! t0
    jmpr
.variable_alloc_text_progress [1]
.variable_alloc_text_ptr [1]
.variable_alloc_key_buffer [34]
fn .isr
    isr!
    rti!
#end .isr
.string_alloc_6
    0x53
    0x68
    0x6F
    0x75
    0x6C
    0x64
    0x20
    0x6E
    0x6F
    0x74
    0x20
    0x73
    0x65
    0x65
    0x20
    0x74
    0x68
    0x69
    0x73
    0x21
    0x0
.string_alloc_5
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x60
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x71
    0x31
    0x20
    0x20
    0x20
    0x7A
    0x73
    0x61
    0x77
    0x32
    0x20
    0x20
    0x63
    0x78
    0x64
    0x65
    0x34
    0x33
    0x20
    0x20
    0x20
    0x76
    0x66
    0x74
    0x72
    0x35
    0x20
    0x20
    0x6E
    0x62
    0x68
    0x67
    0x79
    0x36
    0x20
    0x20
    0x20
    0x6D
    0x6A
    0x75
    0x37
    0x38
    0x20
    0x20
    0x2C
    0x6B
    0x69
    0x6F
    0x30
    0x39
    0x20
    0x20
    0x2E
    0x2F
    0x6C
    0x3B
    0x70
    0x2D
    0x20
    0x20
    0x20
    0x20
    0x20
    0x5B
    0x3D
    0x20
    0x20
    0x20
    0x20
    0xA
    0x5D
    0x20
    0x5C
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x20
    0x0
fn .memset
    # pop from the data stack
    # push to return stack
    pop!    t1
    push    t5 t1
    # pop from the data stack
    # push to return stack
    pop!    t1
    push    t5 t1
    # pop from the data stack
    # push to return stack
    pop!    t1
    push    t5 t1
    imov! t0 0
    push t0
.memset_body_0_let_block_0_while_eval
    pop! t0
    push! t0 t0
    mov     t0 t5
    imov!   t1 2
    add     t0 t1
    push    t0
    pop! t0
    load t0 t0
    push! t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .memset_body_0_let_block_0_while_eval_0_operator_opskip
    imov t2 0
.memset_body_0_let_block_0_while_eval_0_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .memset_body_0_let_block_0_while_exit
.memset_body_0_let_block_0_while_block
    mov     t0 t5
    imov!   t1 1
    add     t0 t1
    push    t0
    pop! t0
    load t0 t0
    push! t0
    pop! t0 t1
    push! t1 t0 t1
    mov     t0 t5
    imov!   t1 0
    add     t0 t1
    push    t0
    pop! t0
    load t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp! .memset_body_0_let_block_0_while_eval
.memset_body_0_let_block_0_while_exit
    pop! t0
    # pop 3 elements from return stack
    imov!   t0 3
    add     t5 t0
.memset_exit
    pop     t0 t5
    jmp     t0
#end .memset
fn .memdump
    pop! t0 t1
    push! t0 t1
    pop! t0 t1
    push! t0 t1
    # pop from the data stack
    # push to return stack
    pop!    t1
    push    t5 t1
    # pop from the data stack
    # push to return stack
    pop!    t1
    push    t5 t1
    imov! t0 0
    push t0
.memdump_body_1_let_block_0_while_eval
    pop! t0
    push! t0 t0
    mov     t0 t5
    imov!   t1 1
    add     t0 t1
    push    t0
    pop! t0
    load t0 t0
    push! t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .memdump_body_1_let_block_0_while_eval_0_operator_opskip
    imov t2 0
.memdump_body_1_let_block_0_while_eval_0_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .memdump_body_1_let_block_0_while_exit
.memdump_body_1_let_block_0_while_block
    mov     t0 t5
    imov!   t1 0
    add     t0 t1
    push    t0
    pop! t0
    load t0 t0
    push! t0
    pop! t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov!   t0 .memdump_body_1_let_block_0_while_block_retaddr0
    push    t5 t0
    jmp!    .print_word
.memdump_body_1_let_block_0_while_block_retaddr0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp! .memdump_body_1_let_block_0_while_eval
.memdump_body_1_let_block_0_while_exit
    pop! t0
    # pop 2 elements from return stack
    imov!   t0 2
    add     t5 t0
.memdump_exit
    pop     t0 t5
    jmp     t0
#end .memdump
fn .print_reset
    imov! t0 100
    push t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 0
    push t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t1 t0
    str  t1 t0
.print_reset_exit
    pop     t0 t5
    jmp     t0
#end .print_reset
fn .print_char
    pop! t0
    push! t0 t0
    imov! t0 10
    push t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .print_char_body_0_operator_opskip
    imov t2 0
.print_char_body_0_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .print_char_body_1_else
.print_char_body_1_if
    pop! t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t0
    load t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 100
    push t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t1 t0
    str  t1 t0
    jmp! .print_char_body_1_if_exit
.print_char_body_1_else
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t0
    load t0 t0
    push! t0
    pop! t0 t1
    push! t0 t1
    imov! t0 14336
    push t0
    pop!  t1 t0
    or    t0 t1
    push! t0
    pop! t0 t1
    push! t1 t0 t1
    pop! t1 t0
    str  t1 t0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 1
    push t0
    pop!  t1 t0
    sub   t0 t1
    push! t0
    pop! t0
    push! t0 t0
    imov! t0 0
    push t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .print_char_body_1_else_3_operator_opskip
    imov t2 0
.print_char_body_1_else_3_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .print_char_body_1_else_4_else
.print_char_body_1_else_4_if
    pop! t0
    imov! t0 100
    push t0
    jmp! .print_char_body_1_else_4_if_exit
.print_char_body_1_else_4_else
.print_char_body_1_else_4_if_exit
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t1 t0
    str  t1 t0
.print_char_body_1_if_exit
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 6000
    push t0
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jn!  .print_char_body_3_operator_opskip
    imov t2 1
.print_char_body_3_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .print_char_body_4_else
.print_char_body_4_if
    halt
    imov! t0 0
    push t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 100
    push t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop! t1 t0
    str  t1 t0
    jmp! .print_char_body_4_if_exit
.print_char_body_4_else
.print_char_body_4_if_exit
.print_char_exit
    pop     t0 t5
    jmp     t0
#end .print_char
fn .print_hex
    pop! t0
    push! t0 t0
    imov! t0 10
    push t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .print_hex_body_0_operator_opskip
    imov t2 0
.print_hex_body_0_operator_opskip
    push! t2
    pop! t0
    tst  t0
    jz!  .print_hex_body_1_else
.print_hex_body_1_if
    imov! t0 48
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov!   t0 .print_hex_body_1_if_retaddr0
    push    t5 t0
    jmp!    .print_char
.print_hex_body_1_if_retaddr0
    jmp! .print_hex_body_1_if_exit
.print_hex_body_1_else
    imov! t0 10
    push t0
    pop!  t1 t0
    sub   t0 t1
    push! t0
    imov! t0 65
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov!   t0 .print_hex_body_1_else_retaddr0
    push    t5 t0
    jmp!    .print_char
.print_hex_body_1_else_retaddr0
.print_hex_body_1_if_exit
.print_hex_exit
    pop     t0 t5
    jmp     t0
#end .print_hex
fn .print_nibble
    pop! t0
    push! t0 t0
    imov! t0 4
    push t0
    pop!  t1 t0
    sshr  t0 t1
    push! t0
    imov! t0 15
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov!   t0 .print_nibble_body_retaddr0
    push    t5 t0
    jmp!    .print_hex
.print_nibble_body_retaddr0
    pop! t0
    push! t0 t0
    imov! t0 15
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov!   t0 .print_nibble_body_retaddr1
    push    t5 t0
    jmp!    .print_hex
.print_nibble_body_retaddr1
    pop! t0
.print_nibble_exit
    pop     t0 t5
    jmp     t0
#end .print_nibble
fn .print_word
    pop! t0
    push! t0 t0
    imov! t0 8
    push t0
    pop!  t1 t0
    sshr  t0 t1
    push! t0
    imov! t0 255
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov!   t0 .print_word_body_retaddr0
    push    t5 t0
    jmp!    .print_nibble
.print_word_body_retaddr0
    pop! t0
    push! t0 t0
    imov! t0 255
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov!   t0 .print_word_body_retaddr1
    push    t5 t0
    jmp!    .print_nibble
.print_word_body_retaddr1
    pop! t0
.print_word_exit
    pop     t0 t5
    jmp     t0
#end .print_word
fn .print_string
    pop! t0
    push! t0 t0
.print_string_body_0_while_eval
    pop! t0
    load t0 t0
    push! t0
    pop! t0
    push! t0 t0
    pop! t0
    tst  t0
    jz!  .print_string_body_0_while_exit
.print_string_body_0_while_block
    imov!   t0 .print_string_body_0_while_block_retaddr0
    push    t5 t0
    jmp!    .print_char
.print_string_body_0_while_block_retaddr0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t0
    push! t0 t0
    jmp! .print_string_body_0_while_eval
.print_string_body_0_while_exit
    pop! t0
    pop! t0
.print_string_exit
    pop     t0 t5
    jmp     t0
#end .print_string
fn .keyboard_init
    imov! t0 .variable_alloc_key_buffer
    push! t0
    imov! t0 0
    push t0
    imov! t0 34
    push! t0
    imov!   t0 .keyboard_init_body_retaddr0
    push    t5 t0
    jmp!    .memset
.keyboard_init_body_retaddr0
.keyboard_init_exit
    pop     t0 t5
    jmp     t0
#end .keyboard_init
fn .keyboard_handle_input
    imov!   t0 .keyboard_handle_input_body_retaddr0
    push    t5 t0
    jmp!    .get_keyboard_ascii
.keyboard_handle_input_body_retaddr0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 2
    add  t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 1
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t1 t0
    str  t1 t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 1
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 31
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 1
    add  t0 t1
    push! t0
    pop! t1 t0
    str  t1 t0
.keyboard_handle_input_exit
    pop     t0 t5
    jmp     t0
#end .keyboard_handle_input
fn .keyboard_get_input
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 0
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 1
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .keyboard_get_input_body_2_operator_opskip
    imov t2 0
.keyboard_get_input_body_2_operator_opskip
    push! t2
    pop! t0
    imov t1 1
    tst  t0
    jz! .keyboard_get_input_body_3_operator_nottrue
    imov t1 0
.keyboard_get_input_body_3_operator_nottrue
    push! t1
    pop! t0
    tst  t0
    jz!  .keyboard_get_input_body_4_else
.keyboard_get_input_body_4_if
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 2
    add  t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 0
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 0
    add  t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
    imov! t0 1
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 31
    push t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop! t0
    imov! t1 0
    add  t0 t1
    push! t0
    pop! t1 t0
    str  t1 t0
    jmp! .keyboard_get_input_body_4_if_exit
.keyboard_get_input_body_4_else
    imov! t0 0
    push t0
.keyboard_get_input_body_4_if_exit
.keyboard_get_input_exit
    pop     t0 t5
    jmp     t0
#end .keyboard_get_input
fn .get_keyboard_ascii
    imov! t0 .string_alloc_5
    push! t0
    imov! t0 65535
    push t0
    pop! t0
    load t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop! t0
    load t0 t0
    push! t0
.get_keyboard_ascii_exit
    pop     t0 t5
    jmp     t0
#end .get_keyboard_ascii
fn .main
    imov! t0 57005
    push t0
    imov!   t0 .main_body_retaddr0
    push    t5 t0
    jmp!    .print_word
.main_body_retaddr0
    imov! t0 45280
    push t0
    imov! t0 3599
    push t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov!   t0 .main_body_retaddr1
    push    t5 t0
    jmp!    .print_word
.main_body_retaddr1
.main_body_1_while_eval
    imov! t0 0
    push t0
    pop! t0
    tst  t0
    jz!  .main_body_1_while_exit
.main_body_1_while_block
    imov! t0 .string_alloc_6
    push! t0
    imov!   t0 .main_body_1_while_block_retaddr0
    push    t5 t0
    jmp!    .print_string
.main_body_1_while_block_retaddr0
    jmp! .main_body_1_while_eval
.main_body_1_while_exit
.main_exit
    pop     t0 t5
    jmp     t0
#end .main
