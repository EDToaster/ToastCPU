DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2CF6; -- . imov [imov!   isr .isr]
0001 : 3C01; -- ' imoh
0002 : 2012; -- . imov r0 .print_init  [call!   .print_init]
0003 : 3000; -- | imoh r0 .print_init
0004 : A010; -- ' jmpl
0005 : 2601; -- . imov [imov!   t0 .ret_stack]
0006 : 3680; -- ' imoh
0007 : 2711; -- . imov [imov!   t1 .reset_ret]
0008 : 3700; -- ' imoh
0009 : 1670; --   str     t0 t1
000A : 9614; --   iadd    t0 1
000B : 2000; -- . imov [str!    .ret_stack_ptr t0]
000C : 3080; -- | imoh
000D : 1060; -- ' str
000E : 2065; -- . imov [jmp!    .main]
000F : 3008; -- | imoh
0010 : A000; -- ' j_op
0011 : 7000; --   halt
0012 : 2600; --   imov    t0 0
0013 : 2001; -- . imov [str!    .ptr_counter t0]
0014 : 3081; -- | imoh
0015 : 1060; -- ' str
0016 : 2664; -- . imov [imov!   t0 100]
0017 : 3600; -- ' imoh
0018 : 2002; -- . imov [str!    .ptr_line_counter t0]
0019 : 3081; -- | imoh
001A : 1060; -- ' str
001B : A020; --   jmpr
001C : 5D60; -- . push [push!   t0 t1 p0]
001D : 5D70; -- | push
001E : 5D10; -- ' push
001F : 8616; --   mov     t0 p0   # t0 = str
0020 : 0760; --   load    t1 t0
0021 : 9704; --   iadd    t1 0    # if (t0 == '\0')
0022 : 202D; -- . imov [jz!     .print_string_exit]
0023 : 3000; -- | imoh
0024 : A001; -- ' j_op
0025 : 8176; --   mov     p0 t1
0026 : 207A; -- . imov r0 .print_char  [call!   .print_char]
0027 : 3000; -- | imoh r0 .print_char
0028 : A010; -- ' jmpl
0029 : 9614; --   iadd    t0 1    # t0++
002A : 2020; -- . imov [jmp!    .print_string_loop]
002B : 3000; -- | imoh
002C : A000; -- ' j_op
002D : 61D0; -- . pop [pop!    p0 t1 t0]
002E : 67D0; -- | pop
002F : 66D0; -- ' pop
0030 : A020; --   jmpr
0031 : 5D60; -- . push [push!  t0 t1]
0032 : 5D70; -- ' push
0033 : 2603; -- . imov [load!  t0 .print_color]
0034 : 3681; -- | imoh
0035 : 0660; -- ' load
0036 : 27FF; -- . imov [imov!  t1 0b0000000011111111]
0037 : 3700; -- ' imoh
0038 : 8671; --   and    t0 t1
0039 : 8716; --   mov    t1 p0
003A : 978A; --   ishl   t1 8
003B : 8672; --   or     t0 t1
003C : 2003; -- . imov [str!   .print_color t0]
003D : 3081; -- | imoh
003E : 1060; -- ' str
003F : 67D0; -- . pop [pop!   t1 t0]
0040 : 66D0; -- ' pop
0041 : A020; --   jmpr
0042 : 5D60; -- . push [push!  t0 p0]
0043 : 5D10; -- ' push
0044 : 8616; --   mov    t0 p0
0045 : 91C8; --   ishr   p0 12
0046 : 91F1; --   iand   p0 0xF
0047 : 206E; -- . imov r0 .print_nibble  [call!  .print_nibble]
0048 : 3000; -- | imoh r0 .print_nibble
0049 : A010; -- ' jmpl
004A : 8166; --   mov    p0 t0
004B : 9188; --   ishr   p0 8
004C : 91F1; --   iand   p0 0xF
004D : 206E; -- . imov r0 .print_nibble  [call!  .print_nibble]
004E : 3000; -- | imoh r0 .print_nibble
004F : A010; -- ' jmpl
0050 : 8166; --   mov    p0 t0
0051 : 9148; --   ishr   p0 4
0052 : 91F1; --   iand   p0 0xF
0053 : 206E; -- . imov r0 .print_nibble  [call!  .print_nibble]
0054 : 3000; -- | imoh r0 .print_nibble
0055 : A010; -- ' jmpl
0056 : 8166; --   mov    p0 t0
0057 : 91F1; --   iand   p0 0xF
0058 : 206E; -- . imov r0 .print_nibble  [call!  .print_nibble]
0059 : 3000; -- | imoh r0 .print_nibble
005A : A010; -- ' jmpl
005B : 61D0; -- . pop [pop!   p0 t0]
005C : 66D0; -- ' pop
005D : A020; --   jmpr
005E : 0030; -- 0
005F : 0031; -- 1
0060 : 0032; -- 2
0061 : 0033; -- 3
0062 : 0034; -- 4
0063 : 0035; -- 5
0064 : 0036; -- 6
0065 : 0037; -- 7
0066 : 0038; -- 8
0067 : 0039; -- 9
0068 : 0041; -- A
0069 : 0042; -- B
006A : 0043; -- C
006B : 0044; -- D
006C : 0045; -- E
006D : 0046; -- F
006E : 5D60; -- . push [push!   t0 p0]
006F : 5D10; -- ' push
0070 : 265E; -- . imov [imov!   t0 .print_hex_char]
0071 : 3600; -- ' imoh
0072 : 8164; --   add     p0 t0
0073 : 0110; --   load    p0 p0
0074 : 207A; -- . imov r0 .print_char  [call!   .print_char]
0075 : 3000; -- | imoh r0 .print_char
0076 : A010; -- ' jmpl
0077 : 61D0; -- . pop [pop!    p0 t0]
0078 : 66D0; -- ' pop
0079 : A020; --   jmpr
007A : 5D60; -- . push [push!   t0 t1 t2]
007B : 5D70; -- | push
007C : 5D80; -- ' push
007D : 8616; --   mov     t0 p0                   # t0 = c
007E : 96A7; --   icmp    t0 0x0A                 # if (t0 == '\n')
007F : 2091; -- . imov [jnz!    .print_char_keep_going]
0080 : 3000; -- | imoh
0081 : A002; -- ' j_op
0082 : 2701; -- . imov [load!   t1 .ptr_counter]
0083 : 3781; -- | imoh
0084 : 0770; -- ' load
0085 : 2802; -- . imov [load!   t2 .ptr_line_counter]
0086 : 3881; -- | imoh
0087 : 0880; -- ' load
0088 : 8784; --   add     t1 t2
0089 : 2001; -- . imov [str!    .ptr_counter t1]
008A : 3081; -- | imoh
008B : 1070; -- ' str
008C : 2864; -- . imov [imov!   t2 100]
008D : 3800; -- ' imoh
008E : 20A5; -- . imov [jmp!    .print_char_store_and_exit]
008F : 3000; -- | imoh
0090 : A000; -- ' j_op
0091 : 2801; -- . imov [load!   t2 .ptr_counter]
0092 : 3881; -- | imoh
0093 : 0880; -- ' load
0094 : 2738; --   imov    t1 0b00111000
0095 : 978A; --   ishl    t1 8
0096 : 8672; --   or      t0 t1
0097 : 1860; --   str     t2 t0
0098 : 9814; --   iadd    t2 1
0099 : 2001; -- . imov [str!    .ptr_counter t2]
009A : 3081; -- | imoh
009B : 1080; -- ' str
009C : 2802; -- . imov [load!   t2 .ptr_line_counter]
009D : 3881; -- | imoh
009E : 0880; -- ' load
009F : 9815; --   isub    t2 1
00A0 : 20A5; -- . imov [jnz!    .print_char_store_and_exit]
00A1 : 3000; -- | imoh
00A2 : A002; -- ' j_op
00A3 : 2864; -- . imov [imov!   t2 100]
00A4 : 3800; -- ' imoh
00A5 : 2701; -- . imov [load!   t1 .ptr_counter]
00A6 : 3781; -- | imoh
00A7 : 0770; -- ' load
00A8 : 2070; -- . imov [icmp!   t1 6000]
00A9 : 3017; -- | imoh
00AA : 8707; -- ' cmp
00AB : 20B2; -- . imov [jn!     .print_char_skip_reset]
00AC : 3000; -- | imoh
00AD : A003; -- ' j_op
00AE : 2700; --   imov    t1 0
00AF : 2001; -- . imov [str!    .ptr_counter t1]
00B0 : 3081; -- | imoh
00B1 : 1070; -- ' str
00B2 : 2002; -- . imov [str!    .ptr_line_counter t2]
00B3 : 3081; -- | imoh
00B4 : 1080; -- ' str
00B5 : 68D0; -- . pop [pop!    t2 t1 t0]
00B6 : 67D0; -- | pop
00B7 : 66D0; -- ' pop
00B8 : A020; --   jmpr
00B9 : 5D60; -- . push [push! t0]
00BA : 2600; --   imov t0 0
00BB : 2015; -- . imov [str!  .key_buffer_write_offset t0]
00BC : 3081; -- | imoh
00BD : 1060; -- ' str
00BE : 2014; -- . imov [str!  .key_buffer_read_offset t0]
00BF : 3081; -- | imoh
00C0 : 1060; -- ' str
00C1 : 66D0; -- . pop [pop! t0]
00C2 : A020; --   jmpr
00C3 : 5D60; -- . push [push! t0 t1]
00C4 : 5D70; -- ' push
00C5 : 2704; -- . imov [imov! t1 .key_buffer]
00C6 : 3781; -- ' imoh
00C7 : 2615; -- . imov [load! t0 .key_buffer_write_offset]
00C8 : 3681; -- | imoh
00C9 : 0660; -- ' load
00CA : 8764; --   add   t1 t0
00CB : 1710; --   str   t1 p0
00CC : 9614; --   iadd  t0 1
00CD : 96F1; --   iand  t0 0b1111
00CE : 2015; -- . imov [str!  .key_buffer_write_offset t0]
00CF : 3081; -- | imoh
00D0 : 1060; -- ' str
00D1 : 67D0; -- . pop [pop!  t1 t0]
00D2 : 66D0; -- ' pop
00D3 : A020; --   jmpr
00D4 : 5D60; -- . push [push! t0 t1]
00D5 : 5D70; -- ' push
00D6 : 2614; -- . imov [load! t0 .key_buffer_read_offset]
00D7 : 3681; -- | imoh
00D8 : 0660; -- ' load
00D9 : 2715; -- . imov [load! t1 .key_buffer_write_offset]
00DA : 3781; -- | imoh
00DB : 0770; -- ' load
00DC : 8677; --   cmp t0 t1
00DD : 20D6; -- . imov [jz! .key_buffer_read_loop]
00DE : 3000; -- | imoh
00DF : A001; -- ' j_op
00E0 : 2704; -- . imov [imov! t1 .key_buffer]
00E1 : 3781; -- ' imoh
00E2 : 8764; --   add   t1 t0
00E3 : 0570; --   load  v0 t1
00E4 : 9614; --   iadd t0 1
00E5 : 96F1; --   iand t0 0b1111
00E6 : 2014; -- . imov [str! .key_buffer_read_offset t0]
00E7 : 3081; -- | imoh
00E8 : 1060; -- ' str
00E9 : 67D0; -- . pop [pop!  t1 t0]
00EA : 66D0; -- ' pop
00EB : A020; --   jmpr
00EC : 0020; --  
00ED : 0020; --  
00EE : 0020; --  
00EF : 0020; --  
00F0 : 0020; --  
00F1 : 0020; --  
00F2 : 0020; --  
00F3 : 0020; --  
00F4 : 0020; --  
00F5 : 0020; --  
00F6 : 0020; --  
00F7 : 0020; --  
00F8 : 0020; --  
00F9 : 0020; --  
00FA : 0060; -- `
00FB : 0020; --  
00FC : 0020; --  
00FD : 0020; --  
00FE : 0020; --  
00FF : 0020; --  
0100 : 0020; --  
0101 : 0071; -- q
0102 : 0031; -- 1
0103 : 0020; --  
0104 : 0020; --  
0105 : 0020; --  
0106 : 007A; -- z
0107 : 0073; -- s
0108 : 0061; -- a
0109 : 0077; -- w
010A : 0032; -- 2
010B : 0020; --  
010C : 0020; --  
010D : 0063; -- c
010E : 0078; -- x
010F : 0064; -- d
0110 : 0065; -- e
0111 : 0034; -- 4
0112 : 0033; -- 3
0113 : 0020; --  
0114 : 0020; --  
0115 : 0020; --  
0116 : 0076; -- v
0117 : 0066; -- f
0118 : 0074; -- t
0119 : 0072; -- r
011A : 0035; -- 5
011B : 0020; --  
011C : 0020; --  
011D : 006E; -- n
011E : 0062; -- b
011F : 0068; -- h
0120 : 0067; -- g
0121 : 0079; -- y
0122 : 0036; -- 6
0123 : 0020; --  
0124 : 0020; --  
0125 : 0020; --  
0126 : 006D; -- m
0127 : 006A; -- j
0128 : 0075; -- u
0129 : 0037; -- 7
012A : 0038; -- 8
012B : 0020; --  
012C : 0020; --  
012D : 002C; -- ,
012E : 006B; -- k
012F : 0069; -- i
0130 : 006F; -- o
0131 : 0030; -- 0
0132 : 0039; -- 9
0133 : 0020; --  
0134 : 0020; --  
0135 : 002E; -- .
0136 : 002F; -- /
0137 : 006C; -- l
0138 : 003B; -- ;
0139 : 0070; -- p
013A : 002D; -- -
013B : 0020; --  
013C : 0020; --  
013D : 0020; --  
013E : 0020; --  
013F : 0020; --  
0140 : 005B; -- [
0141 : 003D; -- =
0142 : 0020; --  
0143 : 0020; --  
0144 : 0020; --  
0145 : 0020; --  
0146 : 000A; -- \n
0147 : 005D; -- ]
0148 : 0020; --  
0149 : 005C; -- \\
014A : 0020; --  
014B : 0020; --  
014C : 0020; --  
014D : 0020; --  
014E : 0020; --  
014F : 0020; --  
0150 : 0020; --  
0151 : 0020; --  
0152 : 0020; --  
0153 : 0020; --  
0154 : 0020; --  
0155 : 0020; --  
0156 : 0020; --  
0157 : 0020; --  
0158 : 0020; --  
0159 : 0020; --  
015A : 0020; --  
015B : 0020; --  
015C : 0020; --  
015D : 0020; --  
015E : 0020; --  
015F : 0020; --  
0160 : 0020; --  
0161 : 0020; --  
0162 : 0020; --  
0163 : 0020; --  
0164 : 0020; --  
0165 : 0020; --  
0166 : 0020; --  
0167 : 0020; --  
0168 : 0020; --  
0169 : 0020; --  
016A : 0020; --  
016B : 0020; --  
016C : 0020; --  
016D : 0020; --  
016E : 0020; --  
016F : 0020; --  
0170 : 0020; --  
0171 : 0020; --  
0172 : 0020; --  
0173 : 0020; --  
0174 : 0020; --  
0175 : 0020; --  
0176 : 0020; --  
0177 : 0020; --  
0178 : 0020; --  
0179 : 0020; --  
017A : 0020; --  
017B : 0020; --  
017C : 0020; --  
017D : 0020; --  
017E : 0020; --  
017F : 0020; --  
0180 : 0020; --  
0181 : 0020; --  
0182 : 0020; --  
0183 : 0020; --  
0184 : 0020; --  
0185 : 0020; --  
0186 : 0020; --  
0187 : 0020; --  
0188 : 0020; --  
0189 : 0020; --  
018A : 0020; --  
018B : 0020; --  
018C : 0020; --  
018D : 0020; --  
018E : 0020; --  
018F : 0020; --  
0190 : 0020; --  
0191 : 0020; --  
0192 : 0020; --  
0193 : 0020; --  
0194 : 0020; --  
0195 : 0020; --  
0196 : 0020; --  
0197 : 0020; --  
0198 : 0020; --  
0199 : 0020; --  
019A : 0020; --  
019B : 0020; --  
019C : 0020; --  
019D : 0020; --  
019E : 0020; --  
019F : 0020; --  
01A0 : 0020; --  
01A1 : 0020; --  
01A2 : 0020; --  
01A3 : 0020; --  
01A4 : 0020; --  
01A5 : 0020; --  
01A6 : 0020; --  
01A7 : 0020; --  
01A8 : 0020; --  
01A9 : 0020; --  
01AA : 0020; --  
01AB : 0020; --  
01AC : 0020; --  
01AD : 0020; --  
01AE : 0020; --  
01AF : 0020; --  
01B0 : 0020; --  
01B1 : 0020; --  
01B2 : 0020; --  
01B3 : 0020; --  
01B4 : 0020; --  
01B5 : 0020; --  
01B6 : 0020; --  
01B7 : 0020; --  
01B8 : 0020; --  
01B9 : 0020; --  
01BA : 0020; --  
01BB : 0020; --  
01BC : 0020; --  
01BD : 0020; --  
01BE : 0020; --  
01BF : 0020; --  
01C0 : 0020; --  
01C1 : 0020; --  
01C2 : 0020; --  
01C3 : 0020; --  
01C4 : 0020; --  
01C5 : 0020; --  
01C6 : 0020; --  
01C7 : 0020; --  
01C8 : 0020; --  
01C9 : 0020; --  
01CA : 0020; --  
01CB : 0020; --  
01CC : 0020; --  
01CD : 0020; --  
01CE : 0020; --  
01CF : 0020; --  
01D0 : 0020; --  
01D1 : 0020; --  
01D2 : 0020; --  
01D3 : 0020; --  
01D4 : 0020; --  
01D5 : 0020; --  
01D6 : 0020; --  
01D7 : 0020; --  
01D8 : 0020; --  
01D9 : 0020; --  
01DA : 0020; --  
01DB : 0020; --  
01DC : 0020; --  
01DD : 0020; --  
01DE : 0020; --  
01DF : 0020; --  
01E0 : 0020; --  
01E1 : 0020; --  
01E2 : 0020; --  
01E3 : 0020; --  
01E4 : 0020; --  
01E5 : 0020; --  
01E6 : 0020; --  
01E7 : 0020; --  
01E8 : 0020; --  
01E9 : 0020; --  
01EA : 0020; --  
01EB : 0020; --  
01EC : 5D60; -- . push [push!   t0]
01ED : 25EC; -- . imov [imov!   v0 .ps2_lut]
01EE : 3500; -- ' imoh
01EF : 26FF; -- . imov [load!   t0 .ps2_scancode_ptr]
01F0 : 36FF; -- | imoh
01F1 : 0660; -- ' load
01F2 : 8564; --   add     v0 t0
01F3 : 0550; --   load    v0 v0
01F4 : 66D0; -- . pop [pop!    t0]
01F5 : A020; --   jmpr
01F6 : 5D00; -- · push r0 [isr!]
01F7 : 60D0; -- . pop r0 [rti!]
01F8 : C000; -- ' rti
01F9 : 0054; -- 0x54
01FA : 0065; -- 0x65
01FB : 0073; -- 0x73
01FC : 0074; -- 0x74
01FD : 0069; -- 0x69
01FE : 006E; -- 0x6E
01FF : 0067; -- 0x67
0200 : 0020; -- 0x20
0201 : 004C; -- 0x4C
0202 : 006F; -- 0x6F
0203 : 0067; -- 0x67
0204 : 0069; -- 0x69
0205 : 0063; -- 0x63
0206 : 0061; -- 0x61
0207 : 006C; -- 0x6C
0208 : 000A; -- 0xA
0209 : 0000; -- 0x0
020A : 0031; -- 0x31
020B : 0020; -- 0x20
020C : 0026; -- 0x26
020D : 0026; -- 0x26
020E : 0020; -- 0x20
020F : 0031; -- 0x31
0210 : 0000; -- 0x0
0211 : 0031; -- 0x31
0212 : 0020; -- 0x20
0213 : 0021; -- 0x21
0214 : 0000; -- 0x0
0215 : 0036; -- 0x36
0216 : 0020; -- 0x20
0217 : 003E; -- 0x3E
0218 : 0020; -- 0x20
0219 : 0037; -- 0x37
021A : 0000; -- 0x0
021B : 0037; -- 0x37
021C : 0020; -- 0x20
021D : 003E; -- 0x3E
021E : 0020; -- 0x20
021F : 0037; -- 0x37
0220 : 0000; -- 0x0
0221 : 0061; -- 0x61
0222 : 0062; -- 0x62
0223 : 0063; -- 0x63
0224 : 0064; -- 0x64
0225 : 0000; -- 0x0
0226 : 0000; -- 0x0
0227 : 0073; -- 0x73
0228 : 0075; -- 0x75
0229 : 006D; -- 0x6D
022A : 0028; -- 0x28
022B : 0037; -- 0x37
022C : 0029; -- 0x29
022D : 0020; -- 0x20
022E : 003D; -- 0x3D
022F : 003D; -- 0x3D
0230 : 0020; -- 0x20
0231 : 0032; -- 0x32
0232 : 0031; -- 0x31
0233 : 0000; -- 0x0
0234 : 0038; -- 0x38
0235 : 0020; -- 0x20
0236 : 003E; -- 0x3E
0237 : 003D; -- 0x3D
0238 : 0020; -- 0x20
0239 : 0037; -- 0x37
023A : 0000; -- 0x0
023B : 0054; -- 0x54
023C : 0065; -- 0x65
023D : 0073; -- 0x73
023E : 0074; -- 0x74
023F : 0069; -- 0x69
0240 : 006E; -- 0x6E
0241 : 0067; -- 0x67
0242 : 0020; -- 0x20
0243 : 0073; -- 0x73
0244 : 0074; -- 0x74
0245 : 0072; -- 0x72
0246 : 006C; -- 0x6C
0247 : 0065; -- 0x65
0248 : 006E; -- 0x6E
0249 : 000A; -- 0xA
024A : 0000; -- 0x0
024B : 0037; -- 0x37
024C : 0020; -- 0x20
024D : 003E; -- 0x3E
024E : 003D; -- 0x3D
024F : 0020; -- 0x20
0250 : 0037; -- 0x37
0251 : 0000; -- 0x0
0252 : 0037; -- 0x37
0253 : 0020; -- 0x20
0254 : 003C; -- 0x3C
0255 : 003D; -- 0x3D
0256 : 0020; -- 0x20
0257 : 0037; -- 0x37
0258 : 0000; -- 0x0
0259 : 0054; -- 0x54
025A : 0065; -- 0x65
025B : 0073; -- 0x73
025C : 0074; -- 0x74
025D : 0069; -- 0x69
025E : 006E; -- 0x6E
025F : 0067; -- 0x67
0260 : 0020; -- 0x20
0261 : 0041; -- 0x41
0262 : 0072; -- 0x72
0263 : 0069; -- 0x69
0264 : 0074; -- 0x74
0265 : 0068; -- 0x68
0266 : 000A; -- 0xA
0267 : 0000; -- 0x0
0268 : 0073; -- 0x73
0269 : 0074; -- 0x74
026A : 0072; -- 0x72
026B : 006C; -- 0x6C
026C : 0065; -- 0x65
026D : 006E; -- 0x6E
026E : 0028; -- 0x28
026F : 0022; -- 0x22
0270 : 0022; -- 0x22
0271 : 0029; -- 0x29
0272 : 0000; -- 0x0
0273 : 0054; -- 0x54
0274 : 0065; -- 0x65
0275 : 0073; -- 0x73
0276 : 0074; -- 0x74
0277 : 0069; -- 0x69
0278 : 006E; -- 0x6E
0279 : 0067; -- 0x67
027A : 0020; -- 0x20
027B : 0053; -- 0x53
027C : 0075; -- 0x75
027D : 006D; -- 0x6D
027E : 000A; -- 0xA
027F : 0000; -- 0x0
0280 : 0030; -- 0x30
0281 : 0020; -- 0x20
0282 : 0021; -- 0x21
0283 : 0000; -- 0x0
0284 : 0036; -- 0x36
0285 : 0020; -- 0x20
0286 : 003E; -- 0x3E
0287 : 003D; -- 0x3D
0288 : 0020; -- 0x20
0289 : 0037; -- 0x37
028A : 0000; -- 0x0
028B : 0048; -- 0x48
028C : 0065; -- 0x65
028D : 006C; -- 0x6C
028E : 006C; -- 0x6C
028F : 006F; -- 0x6F
0290 : 0020; -- 0x20
0291 : 0066; -- 0x66
0292 : 0072; -- 0x72
0293 : 006F; -- 0x6F
0294 : 006D; -- 0x6D
0295 : 0020; -- 0x20
0296 : 0054; -- 0x54
0297 : 006F; -- 0x6F
0298 : 0061; -- 0x61
0299 : 0073; -- 0x73
029A : 0074; -- 0x74
029B : 004C; -- 0x4C
029C : 0061; -- 0x61
029D : 006E; -- 0x6E
029E : 0067; -- 0x67
029F : 0021; -- 0x21
02A0 : 000A; -- 0xA
02A1 : 000A; -- 0xA
02A2 : 0000; -- 0x0
02A3 : 0038; -- 0x38
02A4 : 0020; -- 0x20
02A5 : 003E; -- 0x3E
02A6 : 0020; -- 0x20
02A7 : 0037; -- 0x37
02A8 : 0000; -- 0x0
02A9 : 0054; -- 0x54
02AA : 0065; -- 0x65
02AB : 0073; -- 0x73
02AC : 0074; -- 0x74
02AD : 0069; -- 0x69
02AE : 006E; -- 0x6E
02AF : 0067; -- 0x67
02B0 : 0020; -- 0x20
02B1 : 0066; -- 0x66
02B2 : 0069; -- 0x69
02B3 : 0062; -- 0x62
02B4 : 0020; -- 0x20
02B5 : 0073; -- 0x73
02B6 : 0065; -- 0x65
02B7 : 0071; -- 0x71
02B8 : 0075; -- 0x75
02B9 : 0065; -- 0x65
02BA : 006E; -- 0x6E
02BB : 0063; -- 0x63
02BC : 0065; -- 0x65
02BD : 0020; -- 0x20
02BE : 002E; -- 0x2E
02BF : 002E; -- 0x2E
02C0 : 002E; -- 0x2E
02C1 : 000A; -- 0xA
02C2 : 0000; -- 0x0
02C3 : 0037; -- 0x37
02C4 : 0020; -- 0x20
02C5 : 003D; -- 0x3D
02C6 : 0020; -- 0x20
02C7 : 0037; -- 0x37
02C8 : 0000; -- 0x0
02C9 : 0036; -- 0x36
02CA : 0020; -- 0x20
02CB : 003C; -- 0x3C
02CC : 0020; -- 0x20
02CD : 0037; -- 0x37
02CE : 0000; -- 0x0
02CF : 0073; -- 0x73
02D0 : 0075; -- 0x75
02D1 : 006D; -- 0x6D
02D2 : 0028; -- 0x28
02D3 : 0032; -- 0x32
02D4 : 0032; -- 0x32
02D5 : 0029; -- 0x29
02D6 : 0020; -- 0x20
02D7 : 003D; -- 0x3D
02D8 : 003D; -- 0x3D
02D9 : 0020; -- 0x20
02DA : 0032; -- 0x32
02DB : 0035; -- 0x35
02DC : 0033; -- 0x33
02DD : 0000; -- 0x0
02DE : 0030; -- 0x30
02DF : 0020; -- 0x20
02E0 : 0026; -- 0x26
02E1 : 0026; -- 0x26
02E2 : 0020; -- 0x20
02E3 : 0031; -- 0x31
02E4 : 0000; -- 0x0
02E5 : 0037; -- 0x37
02E6 : 0020; -- 0x20
02E7 : 003C; -- 0x3C
02E8 : 0020; -- 0x20
02E9 : 0037; -- 0x37
02EA : 0000; -- 0x0
02EB : 0050; -- 0x50
02EC : 0061; -- 0x61
02ED : 0073; -- 0x73
02EE : 0073; -- 0x73
02EF : 0065; -- 0x65
02F0 : 0064; -- 0x64
02F1 : 0020; -- 0x20
02F2 : 0041; -- 0x41
02F3 : 006C; -- 0x6C
02F4 : 006C; -- 0x6C
02F5 : 0020; -- 0x20
02F6 : 0054; -- 0x54
02F7 : 0065; -- 0x65
02F8 : 0073; -- 0x73
02F9 : 0074; -- 0x74
02FA : 0020; -- 0x20
02FB : 0043; -- 0x43
02FC : 0061; -- 0x61
02FD : 0073; -- 0x73
02FE : 0065; -- 0x65
02FF : 0073; -- 0x73
0300 : 0021; -- 0x21
0301 : 0000; -- 0x0
0302 : 0038; -- 0x38
0303 : 0020; -- 0x20
0304 : 003C; -- 0x3C
0305 : 003D; -- 0x3D
0306 : 0020; -- 0x20
0307 : 0037; -- 0x37
0308 : 0000; -- 0x0
0309 : 0041; -- 0x41
030A : 0073; -- 0x73
030B : 0073; -- 0x73
030C : 0065; -- 0x65
030D : 0072; -- 0x72
030E : 0074; -- 0x74
030F : 0020; -- 0x20
0310 : 0046; -- 0x46
0311 : 0061; -- 0x61
0312 : 0069; -- 0x69
0313 : 006C; -- 0x6C
0314 : 0065; -- 0x65
0315 : 0064; -- 0x64
0316 : 000A; -- 0xA
0317 : 0000; -- 0x0
0318 : 0036; -- 0x36
0319 : 0020; -- 0x20
031A : 003C; -- 0x3C
031B : 003D; -- 0x3D
031C : 0020; -- 0x20
031D : 0037; -- 0x37
031E : 0000; -- 0x0
031F : 0030; -- 0x30
0320 : 0020; -- 0x20
0321 : 007C; -- 0x7C
0322 : 007C; -- 0x7C
0323 : 0020; -- 0x20
0324 : 0030; -- 0x30
0325 : 0000; -- 0x0
0326 : 0038; -- 0x38
0327 : 0020; -- 0x20
0328 : 003C; -- 0x3C
0329 : 0020; -- 0x20
032A : 0037; -- 0x37
032B : 0000; -- 0x0
032C : 0073; -- 0x73
032D : 0074; -- 0x74
032E : 0072; -- 0x72
032F : 006C; -- 0x6C
0330 : 0065; -- 0x65
0331 : 006E; -- 0x6E
0332 : 0028; -- 0x28
0333 : 0022; -- 0x22
0334 : 0061; -- 0x61
0335 : 0062; -- 0x62
0336 : 0063; -- 0x63
0337 : 0064; -- 0x64
0338 : 0022; -- 0x22
0339 : 0029; -- 0x29
033A : 0000; -- 0x0
033B : 0036; -- 0x36
033C : 0020; -- 0x20
033D : 003D; -- 0x3D
033E : 0020; -- 0x20
033F : 0037; -- 0x37
0340 : 0000; -- 0x0
0341 : 0031; -- 0x31
0342 : 0020; -- 0x20
0343 : 007C; -- 0x7C
0344 : 007C; -- 0x7C
0345 : 0020; -- 0x20
0346 : 0030; -- 0x30
0347 : 0000; -- 0x0
0348 : 66D0; -- . pop [pop! t0]
0349 : 9607; --   tst  t0
034A : 2050; -- . imov [jz!  .assert_body_0_else]
034B : 3003; -- | imoh
034C : A001; -- ' j_op
034D : 2078; -- . imov [jmp! .assert_body_0_if_exit]
034E : 3003; -- | imoh
034F : A000; -- ' j_op
0350 : 66D0; -- . pop [pop! t0]
0351 : 5D60; -- . push [push! t0 t0]
0352 : 5D60; -- ' push
0353 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0354 : 3680; -- | imoh
0355 : 0660; -- ' load
0356 : 2760; -- . imov [imov!   t1 .assert_body_0_else_retaddr0]
0357 : 3703; -- ' imoh
0358 : 1670; --   str     t0 t1
0359 : 9614; --   iadd    t0 1
035A : 2000; -- . imov [str!    .ret_stack_ptr t0]
035B : 3080; -- | imoh
035C : 1060; -- ' str
035D : 207D; -- . imov [jmp!    .ps]
035E : 3009; -- | imoh
035F : A000; -- ' j_op
0360 : 2620; -- . imov [imov! t0 32]
0361 : 3600; -- ' imoh
0362 : 5D60; --   push t0
0363 : 61D0; -- . pop [pop! p0]
0364 : 207A; -- . imov r0 .print_char  [call! .print_char]
0365 : 3000; -- | imoh r0 .print_char
0366 : A010; -- ' jmpl
0367 : 2609; -- . imov [imov! t0 .string_alloc_0]
0368 : 3603; -- ' imoh
0369 : 5D60; -- . push [push! t0]
036A : 2600; -- . imov [load!   t0 .ret_stack_ptr]
036B : 3680; -- | imoh
036C : 0660; -- ' load
036D : 2777; -- . imov [imov!   t1 .assert_body_0_else_retaddr1]
036E : 3703; -- ' imoh
036F : 1670; --   str     t0 t1
0370 : 9614; --   iadd    t0 1
0371 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0372 : 3080; -- | imoh
0373 : 1060; -- ' str
0374 : 207D; -- . imov [jmp!    .ps]
0375 : 3009; -- | imoh
0376 : A000; -- ' j_op
0377 : 7000; --   halt
0378 : 66D0; -- . pop [pop! t0]
0379 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
037A : 3680; -- | imoh
037B : 0660; -- ' load
037C : 9615; --   isub    t0 1
037D : 0760; --   load    t1 t0
037E : 2000; -- . imov [str!    .ret_stack_ptr t0]
037F : 3080; -- | imoh
0380 : 1060; -- ' str
0381 : A700; --   jmp     t1
0382 : 2600; -- . imov [imov! t0 0]
0383 : 3600; -- ' imoh
0384 : 5D60; --   push t0
0385 : 66D0; -- . pop [pop! t0 t1]
0386 : 67D0; -- ' pop
0387 : 5D60; -- . push [push! t0 t1]
0388 : 5D70; -- ' push
0389 : 66D0; -- . pop [pop! t0]
038A : 5D60; -- . push [push! t0 t0]
038B : 5D60; -- ' push
038C : 66D0; -- . pop [pop! t0]
038D : 9607; --   tst  t0
038E : 20AC; -- . imov [jz!  .sum_body_0_while_exit]
038F : 3003; -- | imoh
0390 : A001; -- ' j_op
0391 : 66D0; -- . pop [pop! t0 t1]
0392 : 67D0; -- ' pop
0393 : 5D60; -- . push [push! t0 t1]
0394 : 5D70; -- ' push
0395 : 66D0; -- . pop [pop! t0 t1]
0396 : 67D0; -- ' pop
0397 : 5D70; -- . push [push! t1 t0 t1]
0398 : 5D60; -- | push
0399 : 5D70; -- ' push
039A : 67D0; -- . pop [pop!  t1 t0]
039B : 66D0; -- ' pop
039C : 8674; --   add   t0 t1
039D : 5D60; -- . push [push! t0]
039E : 66D0; -- . pop [pop! t0 t1]
039F : 67D0; -- ' pop
03A0 : 5D60; -- . push [push! t0 t1]
03A1 : 5D70; -- ' push
03A2 : 2601; -- . imov [imov! t0 1]
03A3 : 3600; -- ' imoh
03A4 : 5D60; --   push t0
03A5 : 67D0; -- . pop [pop!  t1 t0]
03A6 : 66D0; -- ' pop
03A7 : 8675; --   sub   t0 t1
03A8 : 5D60; -- . push [push! t0]
03A9 : 2089; -- . imov [jmp! .sum_body_0_while_eval]
03AA : 3003; -- | imoh
03AB : A000; -- ' j_op
03AC : 66D0; -- . pop [pop! t0]
03AD : 2600; -- . imov [load!   t0 .ret_stack_ptr]
03AE : 3680; -- | imoh
03AF : 0660; -- ' load
03B0 : 9615; --   isub    t0 1
03B1 : 0760; --   load    t1 t0
03B2 : 2000; -- . imov [str!    .ret_stack_ptr t0]
03B3 : 3080; -- | imoh
03B4 : 1060; -- ' str
03B5 : A700; --   jmp     t1
03B6 : 2673; -- . imov [imov! t0 .string_alloc_1]
03B7 : 3602; -- ' imoh
03B8 : 5D60; -- . push [push! t0]
03B9 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
03BA : 3680; -- | imoh
03BB : 0660; -- ' load
03BC : 27C6; -- . imov [imov!   t1 .test_sum_body_retaddr0]
03BD : 3703; -- ' imoh
03BE : 1670; --   str     t0 t1
03BF : 9614; --   iadd    t0 1
03C0 : 2000; -- . imov [str!    .ret_stack_ptr t0]
03C1 : 3080; -- | imoh
03C2 : 1060; -- ' str
03C3 : 207D; -- . imov [jmp!    .ps]
03C4 : 3009; -- | imoh
03C5 : A000; -- ' j_op
03C6 : 2627; -- . imov [imov! t0 .string_alloc_2]
03C7 : 3602; -- ' imoh
03C8 : 5D60; -- . push [push! t0]
03C9 : 2607; -- . imov [imov! t0 7]
03CA : 3600; -- ' imoh
03CB : 5D60; --   push t0
03CC : 2600; -- . imov [load!   t0 .ret_stack_ptr]
03CD : 3680; -- | imoh
03CE : 0660; -- ' load
03CF : 27D9; -- . imov [imov!   t1 .test_sum_body_0_retaddr0]
03D0 : 3703; -- ' imoh
03D1 : 1670; --   str     t0 t1
03D2 : 9614; --   iadd    t0 1
03D3 : 2000; -- . imov [str!    .ret_stack_ptr t0]
03D4 : 3080; -- | imoh
03D5 : 1060; -- ' str
03D6 : 2082; -- . imov [jmp!    .sum]
03D7 : 3003; -- | imoh
03D8 : A000; -- ' j_op
03D9 : 261C; -- . imov [imov! t0 28]
03DA : 3600; -- ' imoh
03DB : 5D60; --   push t0
03DC : 67D0; -- . pop [pop!  t1 t0]
03DD : 66D0; -- ' pop
03DE : 8675; --   sub   t0 t1
03DF : 5D60; -- . push [push! t0]
03E0 : 2600; -- . imov [imov! t0 0]
03E1 : 3600; -- ' imoh
03E2 : 5D60; --   push t0
03E3 : 67D0; -- . pop [pop! t1 t0]
03E4 : 66D0; -- ' pop
03E5 : 2801; --   imov t2 1  # default value
03E6 : 8675; --   sub  t0 t1
03E7 : 20EB; -- . imov [jz!  .test_sum_body_0_0_opskip]
03E8 : 3003; -- | imoh
03E9 : A001; -- ' j_op
03EA : 2800; --   imov t2 0
03EB : 5D80; -- . push [push! t2]
03EC : 2600; -- . imov [load!   t0 .ret_stack_ptr]
03ED : 3680; -- | imoh
03EE : 0660; -- ' load
03EF : 27F9; -- . imov [imov!   t1 .test_sum_body_retaddr1]
03F0 : 3703; -- ' imoh
03F1 : 1670; --   str     t0 t1
03F2 : 9614; --   iadd    t0 1
03F3 : 2000; -- . imov [str!    .ret_stack_ptr t0]
03F4 : 3080; -- | imoh
03F5 : 1060; -- ' str
03F6 : 2048; -- . imov [jmp!    .assert]
03F7 : 3003; -- | imoh
03F8 : A000; -- ' j_op
03F9 : 26CF; -- . imov [imov! t0 .string_alloc_3]
03FA : 3602; -- ' imoh
03FB : 5D60; -- . push [push! t0]
03FC : 2616; -- . imov [imov! t0 22]
03FD : 3600; -- ' imoh
03FE : 5D60; --   push t0
03FF : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0400 : 3680; -- | imoh
0401 : 0660; -- ' load
0402 : 270C; -- . imov [imov!   t1 .test_sum_body_1_retaddr0]
0403 : 3704; -- ' imoh
0404 : 1670; --   str     t0 t1
0405 : 9614; --   iadd    t0 1
0406 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0407 : 3080; -- | imoh
0408 : 1060; -- ' str
0409 : 2082; -- . imov [jmp!    .sum]
040A : 3003; -- | imoh
040B : A000; -- ' j_op
040C : 26FD; -- . imov [imov! t0 253]
040D : 3600; -- ' imoh
040E : 5D60; --   push t0
040F : 67D0; -- . pop [pop!  t1 t0]
0410 : 66D0; -- ' pop
0411 : 8675; --   sub   t0 t1
0412 : 5D60; -- . push [push! t0]
0413 : 2600; -- . imov [imov! t0 0]
0414 : 3600; -- ' imoh
0415 : 5D60; --   push t0
0416 : 67D0; -- . pop [pop! t1 t0]
0417 : 66D0; -- ' pop
0418 : 2801; --   imov t2 1  # default value
0419 : 8675; --   sub  t0 t1
041A : 201E; -- . imov [jz!  .test_sum_body_1_0_opskip]
041B : 3004; -- | imoh
041C : A001; -- ' j_op
041D : 2800; --   imov t2 0
041E : 5D80; -- . push [push! t2]
041F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0420 : 3680; -- | imoh
0421 : 0660; -- ' load
0422 : 272C; -- . imov [imov!   t1 .test_sum_body_retaddr2]
0423 : 3704; -- ' imoh
0424 : 1670; --   str     t0 t1
0425 : 9614; --   iadd    t0 1
0426 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0427 : 3080; -- | imoh
0428 : 1060; -- ' str
0429 : 2048; -- . imov [jmp!    .assert]
042A : 3003; -- | imoh
042B : A000; -- ' j_op
042C : 2600; -- . imov [load!   t0 .ret_stack_ptr]
042D : 3680; -- | imoh
042E : 0660; -- ' load
042F : 9615; --   isub    t0 1
0430 : 0760; --   load    t1 t0
0431 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0432 : 3080; -- | imoh
0433 : 1060; -- ' str
0434 : A700; --   jmp     t1
0435 : 2659; -- . imov [imov! t0 .string_alloc_4]
0436 : 3602; -- ' imoh
0437 : 5D60; -- . push [push! t0]
0438 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0439 : 3680; -- | imoh
043A : 0660; -- ' load
043B : 2745; -- . imov [imov!   t1 .test_arith_body_retaddr0]
043C : 3704; -- ' imoh
043D : 1670; --   str     t0 t1
043E : 9614; --   iadd    t0 1
043F : 2000; -- . imov [str!    .ret_stack_ptr t0]
0440 : 3080; -- | imoh
0441 : 1060; -- ' str
0442 : 207D; -- . imov [jmp!    .ps]
0443 : 3009; -- | imoh
0444 : A000; -- ' j_op
0445 : 26C3; -- . imov [imov! t0 .string_alloc_5]
0446 : 3602; -- ' imoh
0447 : 5D60; -- . push [push! t0]
0448 : 2607; -- . imov [imov! t0 7]
0449 : 3600; -- ' imoh
044A : 5D60; --   push t0
044B : 2607; -- . imov [imov! t0 7]
044C : 3600; -- ' imoh
044D : 5D60; --   push t0
044E : 67D0; -- . pop [pop! t1 t0]
044F : 66D0; -- ' pop
0450 : 2801; --   imov t2 1  # default value
0451 : 8675; --   sub  t0 t1
0452 : 2056; -- . imov [jz!  .test_arith_body_0_0_opskip]
0453 : 3004; -- | imoh
0454 : A001; -- ' j_op
0455 : 2800; --   imov t2 0
0456 : 5D80; -- . push [push! t2]
0457 : 2601; -- . imov [imov! t0 1]
0458 : 3600; -- ' imoh
0459 : 5D60; --   push t0
045A : 67D0; -- . pop [pop! t1 t0]
045B : 66D0; -- ' pop
045C : 2801; --   imov t2 1  # default value
045D : 8675; --   sub  t0 t1
045E : 2062; -- . imov [jz!  .test_arith_body_0_1_opskip]
045F : 3004; -- | imoh
0460 : A001; -- ' j_op
0461 : 2800; --   imov t2 0
0462 : 5D80; -- . push [push! t2]
0463 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0464 : 3680; -- | imoh
0465 : 0660; -- ' load
0466 : 2770; -- . imov [imov!   t1 .test_arith_body_retaddr1]
0467 : 3704; -- ' imoh
0468 : 1670; --   str     t0 t1
0469 : 9614; --   iadd    t0 1
046A : 2000; -- . imov [str!    .ret_stack_ptr t0]
046B : 3080; -- | imoh
046C : 1060; -- ' str
046D : 2048; -- . imov [jmp!    .assert]
046E : 3003; -- | imoh
046F : A000; -- ' j_op
0470 : 263B; -- . imov [imov! t0 .string_alloc_6]
0471 : 3603; -- ' imoh
0472 : 5D60; -- . push [push! t0]
0473 : 2606; -- . imov [imov! t0 6]
0474 : 3600; -- ' imoh
0475 : 5D60; --   push t0
0476 : 2607; -- . imov [imov! t0 7]
0477 : 3600; -- ' imoh
0478 : 5D60; --   push t0
0479 : 67D0; -- . pop [pop! t1 t0]
047A : 66D0; -- ' pop
047B : 2801; --   imov t2 1  # default value
047C : 8675; --   sub  t0 t1
047D : 2081; -- . imov [jz!  .test_arith_body_1_0_opskip]
047E : 3004; -- | imoh
047F : A001; -- ' j_op
0480 : 2800; --   imov t2 0
0481 : 5D80; -- . push [push! t2]
0482 : 2600; -- . imov [imov! t0 0]
0483 : 3600; -- ' imoh
0484 : 5D60; --   push t0
0485 : 67D0; -- . pop [pop! t1 t0]
0486 : 66D0; -- ' pop
0487 : 2801; --   imov t2 1  # default value
0488 : 8675; --   sub  t0 t1
0489 : 208D; -- . imov [jz!  .test_arith_body_1_1_opskip]
048A : 3004; -- | imoh
048B : A001; -- ' j_op
048C : 2800; --   imov t2 0
048D : 5D80; -- . push [push! t2]
048E : 2600; -- . imov [load!   t0 .ret_stack_ptr]
048F : 3680; -- | imoh
0490 : 0660; -- ' load
0491 : 279B; -- . imov [imov!   t1 .test_arith_body_retaddr2]
0492 : 3704; -- ' imoh
0493 : 1670; --   str     t0 t1
0494 : 9614; --   iadd    t0 1
0495 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0496 : 3080; -- | imoh
0497 : 1060; -- ' str
0498 : 2048; -- . imov [jmp!    .assert]
0499 : 3003; -- | imoh
049A : A000; -- ' j_op
049B : 2615; -- . imov [imov! t0 .string_alloc_7]
049C : 3602; -- ' imoh
049D : 5D60; -- . push [push! t0]
049E : 2606; -- . imov [imov! t0 6]
049F : 3600; -- ' imoh
04A0 : 5D60; --   push t0
04A1 : 2607; -- . imov [imov! t0 7]
04A2 : 3600; -- ' imoh
04A3 : 5D60; --   push t0
04A4 : 67D0; -- . pop [pop! t1 t0]
04A5 : 66D0; -- ' pop
04A6 : 2801; --   imov t2 1  # default value
04A7 : 8675; --   sub  t0 t1
04A8 : 20AC; -- . imov [jp!  .test_arith_body_2_0_opskip]
04A9 : 3004; -- | imoh
04AA : A004; -- ' j_op
04AB : 2800; --   imov t2 0
04AC : 5D80; -- . push [push! t2]
04AD : 2600; -- . imov [imov! t0 0]
04AE : 3600; -- ' imoh
04AF : 5D60; --   push t0
04B0 : 67D0; -- . pop [pop! t1 t0]
04B1 : 66D0; -- ' pop
04B2 : 2801; --   imov t2 1  # default value
04B3 : 8675; --   sub  t0 t1
04B4 : 20B8; -- . imov [jz!  .test_arith_body_2_1_opskip]
04B5 : 3004; -- | imoh
04B6 : A001; -- ' j_op
04B7 : 2800; --   imov t2 0
04B8 : 5D80; -- . push [push! t2]
04B9 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
04BA : 3680; -- | imoh
04BB : 0660; -- ' load
04BC : 27C6; -- . imov [imov!   t1 .test_arith_body_retaddr3]
04BD : 3704; -- ' imoh
04BE : 1670; --   str     t0 t1
04BF : 9614; --   iadd    t0 1
04C0 : 2000; -- . imov [str!    .ret_stack_ptr t0]
04C1 : 3080; -- | imoh
04C2 : 1060; -- ' str
04C3 : 2048; -- . imov [jmp!    .assert]
04C4 : 3003; -- | imoh
04C5 : A000; -- ' j_op
04C6 : 261B; -- . imov [imov! t0 .string_alloc_8]
04C7 : 3602; -- ' imoh
04C8 : 5D60; -- . push [push! t0]
04C9 : 2607; -- . imov [imov! t0 7]
04CA : 3600; -- ' imoh
04CB : 5D60; --   push t0
04CC : 2607; -- . imov [imov! t0 7]
04CD : 3600; -- ' imoh
04CE : 5D60; --   push t0
04CF : 67D0; -- . pop [pop! t1 t0]
04D0 : 66D0; -- ' pop
04D1 : 2801; --   imov t2 1  # default value
04D2 : 8675; --   sub  t0 t1
04D3 : 20D7; -- . imov [jp!  .test_arith_body_3_0_opskip]
04D4 : 3004; -- | imoh
04D5 : A004; -- ' j_op
04D6 : 2800; --   imov t2 0
04D7 : 5D80; -- . push [push! t2]
04D8 : 2600; -- . imov [imov! t0 0]
04D9 : 3600; -- ' imoh
04DA : 5D60; --   push t0
04DB : 67D0; -- . pop [pop! t1 t0]
04DC : 66D0; -- ' pop
04DD : 2801; --   imov t2 1  # default value
04DE : 8675; --   sub  t0 t1
04DF : 20E3; -- . imov [jz!  .test_arith_body_3_1_opskip]
04E0 : 3004; -- | imoh
04E1 : A001; -- ' j_op
04E2 : 2800; --   imov t2 0
04E3 : 5D80; -- . push [push! t2]
04E4 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
04E5 : 3680; -- | imoh
04E6 : 0660; -- ' load
04E7 : 27F1; -- . imov [imov!   t1 .test_arith_body_retaddr4]
04E8 : 3704; -- ' imoh
04E9 : 1670; --   str     t0 t1
04EA : 9614; --   iadd    t0 1
04EB : 2000; -- . imov [str!    .ret_stack_ptr t0]
04EC : 3080; -- | imoh
04ED : 1060; -- ' str
04EE : 2048; -- . imov [jmp!    .assert]
04EF : 3003; -- | imoh
04F0 : A000; -- ' j_op
04F1 : 26A3; -- . imov [imov! t0 .string_alloc_9]
04F2 : 3602; -- ' imoh
04F3 : 5D60; -- . push [push! t0]
04F4 : 2608; -- . imov [imov! t0 8]
04F5 : 3600; -- ' imoh
04F6 : 5D60; --   push t0
04F7 : 2607; -- . imov [imov! t0 7]
04F8 : 3600; -- ' imoh
04F9 : 5D60; --   push t0
04FA : 67D0; -- . pop [pop! t1 t0]
04FB : 66D0; -- ' pop
04FC : 2801; --   imov t2 1  # default value
04FD : 8675; --   sub  t0 t1
04FE : 2002; -- . imov [jp!  .test_arith_body_4_0_opskip]
04FF : 3005; -- | imoh
0500 : A004; -- ' j_op
0501 : 2800; --   imov t2 0
0502 : 5D80; -- . push [push! t2]
0503 : 2601; -- . imov [imov! t0 1]
0504 : 3600; -- ' imoh
0505 : 5D60; --   push t0
0506 : 67D0; -- . pop [pop! t1 t0]
0507 : 66D0; -- ' pop
0508 : 2801; --   imov t2 1  # default value
0509 : 8675; --   sub  t0 t1
050A : 200E; -- . imov [jz!  .test_arith_body_4_1_opskip]
050B : 3005; -- | imoh
050C : A001; -- ' j_op
050D : 2800; --   imov t2 0
050E : 5D80; -- . push [push! t2]
050F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0510 : 3680; -- | imoh
0511 : 0660; -- ' load
0512 : 271C; -- . imov [imov!   t1 .test_arith_body_retaddr5]
0513 : 3705; -- ' imoh
0514 : 1670; --   str     t0 t1
0515 : 9614; --   iadd    t0 1
0516 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0517 : 3080; -- | imoh
0518 : 1060; -- ' str
0519 : 2048; -- . imov [jmp!    .assert]
051A : 3003; -- | imoh
051B : A000; -- ' j_op
051C : 2684; -- . imov [imov! t0 .string_alloc_10]
051D : 3602; -- ' imoh
051E : 5D60; -- . push [push! t0]
051F : 2606; -- . imov [imov! t0 6]
0520 : 3600; -- ' imoh
0521 : 5D60; --   push t0
0522 : 2607; -- . imov [imov! t0 7]
0523 : 3600; -- ' imoh
0524 : 5D60; --   push t0
0525 : 67D0; -- . pop [pop! t1 t0]
0526 : 66D0; -- ' pop
0527 : 2800; --   imov t2 0  # default value
0528 : 8675; --   sub  t0 t1
0529 : 202D; -- . imov [jn!  .test_arith_body_5_0_opskip]
052A : 3005; -- | imoh
052B : A003; -- ' j_op
052C : 2801; --   imov t2 1
052D : 5D80; -- . push [push! t2]
052E : 2600; -- . imov [imov! t0 0]
052F : 3600; -- ' imoh
0530 : 5D60; --   push t0
0531 : 67D0; -- . pop [pop! t1 t0]
0532 : 66D0; -- ' pop
0533 : 2801; --   imov t2 1  # default value
0534 : 8675; --   sub  t0 t1
0535 : 2039; -- . imov [jz!  .test_arith_body_5_1_opskip]
0536 : 3005; -- | imoh
0537 : A001; -- ' j_op
0538 : 2800; --   imov t2 0
0539 : 5D80; -- . push [push! t2]
053A : 2600; -- . imov [load!   t0 .ret_stack_ptr]
053B : 3680; -- | imoh
053C : 0660; -- ' load
053D : 2747; -- . imov [imov!   t1 .test_arith_body_retaddr6]
053E : 3705; -- ' imoh
053F : 1670; --   str     t0 t1
0540 : 9614; --   iadd    t0 1
0541 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0542 : 3080; -- | imoh
0543 : 1060; -- ' str
0544 : 2048; -- . imov [jmp!    .assert]
0545 : 3003; -- | imoh
0546 : A000; -- ' j_op
0547 : 264B; -- . imov [imov! t0 .string_alloc_11]
0548 : 3602; -- ' imoh
0549 : 5D60; -- . push [push! t0]
054A : 2607; -- . imov [imov! t0 7]
054B : 3600; -- ' imoh
054C : 5D60; --   push t0
054D : 2607; -- . imov [imov! t0 7]
054E : 3600; -- ' imoh
054F : 5D60; --   push t0
0550 : 67D0; -- . pop [pop! t1 t0]
0551 : 66D0; -- ' pop
0552 : 2800; --   imov t2 0  # default value
0553 : 8675; --   sub  t0 t1
0554 : 2058; -- . imov [jn!  .test_arith_body_6_0_opskip]
0555 : 3005; -- | imoh
0556 : A003; -- ' j_op
0557 : 2801; --   imov t2 1
0558 : 5D80; -- . push [push! t2]
0559 : 2601; -- . imov [imov! t0 1]
055A : 3600; -- ' imoh
055B : 5D60; --   push t0
055C : 67D0; -- . pop [pop! t1 t0]
055D : 66D0; -- ' pop
055E : 2801; --   imov t2 1  # default value
055F : 8675; --   sub  t0 t1
0560 : 2064; -- . imov [jz!  .test_arith_body_6_1_opskip]
0561 : 3005; -- | imoh
0562 : A001; -- ' j_op
0563 : 2800; --   imov t2 0
0564 : 5D80; -- . push [push! t2]
0565 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0566 : 3680; -- | imoh
0567 : 0660; -- ' load
0568 : 2772; -- . imov [imov!   t1 .test_arith_body_retaddr7]
0569 : 3705; -- ' imoh
056A : 1670; --   str     t0 t1
056B : 9614; --   iadd    t0 1
056C : 2000; -- . imov [str!    .ret_stack_ptr t0]
056D : 3080; -- | imoh
056E : 1060; -- ' str
056F : 2048; -- . imov [jmp!    .assert]
0570 : 3003; -- | imoh
0571 : A000; -- ' j_op
0572 : 2634; -- . imov [imov! t0 .string_alloc_12]
0573 : 3602; -- ' imoh
0574 : 5D60; -- . push [push! t0]
0575 : 2608; -- . imov [imov! t0 8]
0576 : 3600; -- ' imoh
0577 : 5D60; --   push t0
0578 : 2607; -- . imov [imov! t0 7]
0579 : 3600; -- ' imoh
057A : 5D60; --   push t0
057B : 67D0; -- . pop [pop! t1 t0]
057C : 66D0; -- ' pop
057D : 2800; --   imov t2 0  # default value
057E : 8675; --   sub  t0 t1
057F : 2083; -- . imov [jn!  .test_arith_body_7_0_opskip]
0580 : 3005; -- | imoh
0581 : A003; -- ' j_op
0582 : 2801; --   imov t2 1
0583 : 5D80; -- . push [push! t2]
0584 : 2601; -- . imov [imov! t0 1]
0585 : 3600; -- ' imoh
0586 : 5D60; --   push t0
0587 : 67D0; -- . pop [pop! t1 t0]
0588 : 66D0; -- ' pop
0589 : 2801; --   imov t2 1  # default value
058A : 8675; --   sub  t0 t1
058B : 208F; -- . imov [jz!  .test_arith_body_7_1_opskip]
058C : 3005; -- | imoh
058D : A001; -- ' j_op
058E : 2800; --   imov t2 0
058F : 5D80; -- . push [push! t2]
0590 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0591 : 3680; -- | imoh
0592 : 0660; -- ' load
0593 : 279D; -- . imov [imov!   t1 .test_arith_body_retaddr8]
0594 : 3705; -- ' imoh
0595 : 1670; --   str     t0 t1
0596 : 9614; --   iadd    t0 1
0597 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0598 : 3080; -- | imoh
0599 : 1060; -- ' str
059A : 2048; -- . imov [jmp!    .assert]
059B : 3003; -- | imoh
059C : A000; -- ' j_op
059D : 26C9; -- . imov [imov! t0 .string_alloc_13]
059E : 3602; -- ' imoh
059F : 5D60; -- . push [push! t0]
05A0 : 2606; -- . imov [imov! t0 6]
05A1 : 3600; -- ' imoh
05A2 : 5D60; --   push t0
05A3 : 2607; -- . imov [imov! t0 7]
05A4 : 3600; -- ' imoh
05A5 : 5D60; --   push t0
05A6 : 67D0; -- . pop [pop! t1 t0]
05A7 : 66D0; -- ' pop
05A8 : 2801; --   imov t2 1  # default value
05A9 : 8675; --   sub  t0 t1
05AA : 20AE; -- . imov [jn!  .test_arith_body_8_0_opskip]
05AB : 3005; -- | imoh
05AC : A003; -- ' j_op
05AD : 2800; --   imov t2 0
05AE : 5D80; -- . push [push! t2]
05AF : 2601; -- . imov [imov! t0 1]
05B0 : 3600; -- ' imoh
05B1 : 5D60; --   push t0
05B2 : 67D0; -- . pop [pop! t1 t0]
05B3 : 66D0; -- ' pop
05B4 : 2801; --   imov t2 1  # default value
05B5 : 8675; --   sub  t0 t1
05B6 : 20BA; -- . imov [jz!  .test_arith_body_8_1_opskip]
05B7 : 3005; -- | imoh
05B8 : A001; -- ' j_op
05B9 : 2800; --   imov t2 0
05BA : 5D80; -- . push [push! t2]
05BB : 2600; -- . imov [load!   t0 .ret_stack_ptr]
05BC : 3680; -- | imoh
05BD : 0660; -- ' load
05BE : 27C8; -- . imov [imov!   t1 .test_arith_body_retaddr9]
05BF : 3705; -- ' imoh
05C0 : 1670; --   str     t0 t1
05C1 : 9614; --   iadd    t0 1
05C2 : 2000; -- . imov [str!    .ret_stack_ptr t0]
05C3 : 3080; -- | imoh
05C4 : 1060; -- ' str
05C5 : 2048; -- . imov [jmp!    .assert]
05C6 : 3003; -- | imoh
05C7 : A000; -- ' j_op
05C8 : 26E5; -- . imov [imov! t0 .string_alloc_14]
05C9 : 3602; -- ' imoh
05CA : 5D60; -- . push [push! t0]
05CB : 2607; -- . imov [imov! t0 7]
05CC : 3600; -- ' imoh
05CD : 5D60; --   push t0
05CE : 2607; -- . imov [imov! t0 7]
05CF : 3600; -- ' imoh
05D0 : 5D60; --   push t0
05D1 : 67D0; -- . pop [pop! t1 t0]
05D2 : 66D0; -- ' pop
05D3 : 2801; --   imov t2 1  # default value
05D4 : 8675; --   sub  t0 t1
05D5 : 20D9; -- . imov [jn!  .test_arith_body_9_0_opskip]
05D6 : 3005; -- | imoh
05D7 : A003; -- ' j_op
05D8 : 2800; --   imov t2 0
05D9 : 5D80; -- . push [push! t2]
05DA : 2600; -- . imov [imov! t0 0]
05DB : 3600; -- ' imoh
05DC : 5D60; --   push t0
05DD : 67D0; -- . pop [pop! t1 t0]
05DE : 66D0; -- ' pop
05DF : 2801; --   imov t2 1  # default value
05E0 : 8675; --   sub  t0 t1
05E1 : 20E5; -- . imov [jz!  .test_arith_body_9_1_opskip]
05E2 : 3005; -- | imoh
05E3 : A001; -- ' j_op
05E4 : 2800; --   imov t2 0
05E5 : 5D80; -- . push [push! t2]
05E6 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
05E7 : 3680; -- | imoh
05E8 : 0660; -- ' load
05E9 : 27F3; -- . imov [imov!   t1 .test_arith_body_retaddr10]
05EA : 3705; -- ' imoh
05EB : 1670; --   str     t0 t1
05EC : 9614; --   iadd    t0 1
05ED : 2000; -- . imov [str!    .ret_stack_ptr t0]
05EE : 3080; -- | imoh
05EF : 1060; -- ' str
05F0 : 2048; -- . imov [jmp!    .assert]
05F1 : 3003; -- | imoh
05F2 : A000; -- ' j_op
05F3 : 2626; -- . imov [imov! t0 .string_alloc_15]
05F4 : 3603; -- ' imoh
05F5 : 5D60; -- . push [push! t0]
05F6 : 2608; -- . imov [imov! t0 8]
05F7 : 3600; -- ' imoh
05F8 : 5D60; --   push t0
05F9 : 2607; -- . imov [imov! t0 7]
05FA : 3600; -- ' imoh
05FB : 5D60; --   push t0
05FC : 67D0; -- . pop [pop! t1 t0]
05FD : 66D0; -- ' pop
05FE : 2801; --   imov t2 1  # default value
05FF : 8675; --   sub  t0 t1
0600 : 2004; -- . imov [jn!  .test_arith_body_10_0_opskip]
0601 : 3006; -- | imoh
0602 : A003; -- ' j_op
0603 : 2800; --   imov t2 0
0604 : 5D80; -- . push [push! t2]
0605 : 2600; -- . imov [imov! t0 0]
0606 : 3600; -- ' imoh
0607 : 5D60; --   push t0
0608 : 67D0; -- . pop [pop! t1 t0]
0609 : 66D0; -- ' pop
060A : 2801; --   imov t2 1  # default value
060B : 8675; --   sub  t0 t1
060C : 2010; -- . imov [jz!  .test_arith_body_10_1_opskip]
060D : 3006; -- | imoh
060E : A001; -- ' j_op
060F : 2800; --   imov t2 0
0610 : 5D80; -- . push [push! t2]
0611 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0612 : 3680; -- | imoh
0613 : 0660; -- ' load
0614 : 271E; -- . imov [imov!   t1 .test_arith_body_retaddr11]
0615 : 3706; -- ' imoh
0616 : 1670; --   str     t0 t1
0617 : 9614; --   iadd    t0 1
0618 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0619 : 3080; -- | imoh
061A : 1060; -- ' str
061B : 2048; -- . imov [jmp!    .assert]
061C : 3003; -- | imoh
061D : A000; -- ' j_op
061E : 2618; -- . imov [imov! t0 .string_alloc_16]
061F : 3603; -- ' imoh
0620 : 5D60; -- . push [push! t0]
0621 : 2606; -- . imov [imov! t0 6]
0622 : 3600; -- ' imoh
0623 : 5D60; --   push t0
0624 : 2607; -- . imov [imov! t0 7]
0625 : 3600; -- ' imoh
0626 : 5D60; --   push t0
0627 : 67D0; -- . pop [pop! t1 t0]
0628 : 66D0; -- ' pop
0629 : 2800; --   imov t2 0  # default value
062A : 8675; --   sub  t0 t1
062B : 202F; -- . imov [jp!  .test_arith_body_11_0_opskip]
062C : 3006; -- | imoh
062D : A004; -- ' j_op
062E : 2801; --   imov t2 1
062F : 5D80; -- . push [push! t2]
0630 : 2601; -- . imov [imov! t0 1]
0631 : 3600; -- ' imoh
0632 : 5D60; --   push t0
0633 : 67D0; -- . pop [pop! t1 t0]
0634 : 66D0; -- ' pop
0635 : 2801; --   imov t2 1  # default value
0636 : 8675; --   sub  t0 t1
0637 : 203B; -- . imov [jz!  .test_arith_body_11_1_opskip]
0638 : 3006; -- | imoh
0639 : A001; -- ' j_op
063A : 2800; --   imov t2 0
063B : 5D80; -- . push [push! t2]
063C : 2600; -- . imov [load!   t0 .ret_stack_ptr]
063D : 3680; -- | imoh
063E : 0660; -- ' load
063F : 2749; -- . imov [imov!   t1 .test_arith_body_retaddr12]
0640 : 3706; -- ' imoh
0641 : 1670; --   str     t0 t1
0642 : 9614; --   iadd    t0 1
0643 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0644 : 3080; -- | imoh
0645 : 1060; -- ' str
0646 : 2048; -- . imov [jmp!    .assert]
0647 : 3003; -- | imoh
0648 : A000; -- ' j_op
0649 : 2652; -- . imov [imov! t0 .string_alloc_17]
064A : 3602; -- ' imoh
064B : 5D60; -- . push [push! t0]
064C : 2607; -- . imov [imov! t0 7]
064D : 3600; -- ' imoh
064E : 5D60; --   push t0
064F : 2607; -- . imov [imov! t0 7]
0650 : 3600; -- ' imoh
0651 : 5D60; --   push t0
0652 : 67D0; -- . pop [pop! t1 t0]
0653 : 66D0; -- ' pop
0654 : 2800; --   imov t2 0  # default value
0655 : 8675; --   sub  t0 t1
0656 : 205A; -- . imov [jp!  .test_arith_body_12_0_opskip]
0657 : 3006; -- | imoh
0658 : A004; -- ' j_op
0659 : 2801; --   imov t2 1
065A : 5D80; -- . push [push! t2]
065B : 2601; -- . imov [imov! t0 1]
065C : 3600; -- ' imoh
065D : 5D60; --   push t0
065E : 67D0; -- . pop [pop! t1 t0]
065F : 66D0; -- ' pop
0660 : 2801; --   imov t2 1  # default value
0661 : 8675; --   sub  t0 t1
0662 : 2066; -- . imov [jz!  .test_arith_body_12_1_opskip]
0663 : 3006; -- | imoh
0664 : A001; -- ' j_op
0665 : 2800; --   imov t2 0
0666 : 5D80; -- . push [push! t2]
0667 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0668 : 3680; -- | imoh
0669 : 0660; -- ' load
066A : 2774; -- . imov [imov!   t1 .test_arith_body_retaddr13]
066B : 3706; -- ' imoh
066C : 1670; --   str     t0 t1
066D : 9614; --   iadd    t0 1
066E : 2000; -- . imov [str!    .ret_stack_ptr t0]
066F : 3080; -- | imoh
0670 : 1060; -- ' str
0671 : 2048; -- . imov [jmp!    .assert]
0672 : 3003; -- | imoh
0673 : A000; -- ' j_op
0674 : 2602; -- . imov [imov! t0 .string_alloc_18]
0675 : 3603; -- ' imoh
0676 : 5D60; -- . push [push! t0]
0677 : 2608; -- . imov [imov! t0 8]
0678 : 3600; -- ' imoh
0679 : 5D60; --   push t0
067A : 2607; -- . imov [imov! t0 7]
067B : 3600; -- ' imoh
067C : 5D60; --   push t0
067D : 67D0; -- . pop [pop! t1 t0]
067E : 66D0; -- ' pop
067F : 2800; --   imov t2 0  # default value
0680 : 8675; --   sub  t0 t1
0681 : 2085; -- . imov [jp!  .test_arith_body_13_0_opskip]
0682 : 3006; -- | imoh
0683 : A004; -- ' j_op
0684 : 2801; --   imov t2 1
0685 : 5D80; -- . push [push! t2]
0686 : 2600; -- . imov [imov! t0 0]
0687 : 3600; -- ' imoh
0688 : 5D60; --   push t0
0689 : 67D0; -- . pop [pop! t1 t0]
068A : 66D0; -- ' pop
068B : 2801; --   imov t2 1  # default value
068C : 8675; --   sub  t0 t1
068D : 2091; -- . imov [jz!  .test_arith_body_13_1_opskip]
068E : 3006; -- | imoh
068F : A001; -- ' j_op
0690 : 2800; --   imov t2 0
0691 : 5D80; -- . push [push! t2]
0692 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0693 : 3680; -- | imoh
0694 : 0660; -- ' load
0695 : 279F; -- . imov [imov!   t1 .test_arith_body_retaddr14]
0696 : 3706; -- ' imoh
0697 : 1670; --   str     t0 t1
0698 : 9614; --   iadd    t0 1
0699 : 2000; -- . imov [str!    .ret_stack_ptr t0]
069A : 3080; -- | imoh
069B : 1060; -- ' str
069C : 2048; -- . imov [jmp!    .assert]
069D : 3003; -- | imoh
069E : A000; -- ' j_op
069F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
06A0 : 3680; -- | imoh
06A1 : 0660; -- ' load
06A2 : 9615; --   isub    t0 1
06A3 : 0760; --   load    t1 t0
06A4 : 2000; -- . imov [str!    .ret_stack_ptr t0]
06A5 : 3080; -- | imoh
06A6 : 1060; -- ' str
06A7 : A700; --   jmp     t1
06A8 : 26F9; -- . imov [imov! t0 .string_alloc_19]
06A9 : 3601; -- ' imoh
06AA : 5D60; -- . push [push! t0]
06AB : 2600; -- . imov [load!   t0 .ret_stack_ptr]
06AC : 3680; -- | imoh
06AD : 0660; -- ' load
06AE : 27B8; -- . imov [imov!   t1 .test_logical_body_retaddr0]
06AF : 3706; -- ' imoh
06B0 : 1670; --   str     t0 t1
06B1 : 9614; --   iadd    t0 1
06B2 : 2000; -- . imov [str!    .ret_stack_ptr t0]
06B3 : 3080; -- | imoh
06B4 : 1060; -- ' str
06B5 : 207D; -- . imov [jmp!    .ps]
06B6 : 3009; -- | imoh
06B7 : A000; -- ' j_op
06B8 : 260A; -- . imov [imov! t0 .string_alloc_20]
06B9 : 3602; -- ' imoh
06BA : 5D60; -- . push [push! t0]
06BB : 2601; -- . imov [imov! t0 1]
06BC : 3600; -- ' imoh
06BD : 5D60; --   push t0
06BE : 2601; -- . imov [imov! t0 1]
06BF : 3600; -- ' imoh
06C0 : 5D60; --   push t0
06C1 : 67D0; -- . pop [pop! t1 t0]
06C2 : 66D0; -- ' pop
06C3 : 2800; --   imov t2 0
06C4 : 9607; --   tst  t0
06C5 : 20CD; -- . imov [jz! .test_logical_body_0_0_andfalse]
06C6 : 3006; -- | imoh
06C7 : A001; -- ' j_op
06C8 : 9707; --   tst  t1
06C9 : 20CD; -- . imov [jz! .test_logical_body_0_0_andfalse]
06CA : 3006; -- | imoh
06CB : A001; -- ' j_op
06CC : 2801; --   imov t2 1
06CD : 5D80; -- . push [push! t2]
06CE : 2601; -- . imov [imov! t0 1]
06CF : 3600; -- ' imoh
06D0 : 5D60; --   push t0
06D1 : 67D0; -- . pop [pop! t1 t0]
06D2 : 66D0; -- ' pop
06D3 : 2801; --   imov t2 1  # default value
06D4 : 8675; --   sub  t0 t1
06D5 : 20D9; -- . imov [jz!  .test_logical_body_0_1_opskip]
06D6 : 3006; -- | imoh
06D7 : A001; -- ' j_op
06D8 : 2800; --   imov t2 0
06D9 : 5D80; -- . push [push! t2]
06DA : 2600; -- . imov [load!   t0 .ret_stack_ptr]
06DB : 3680; -- | imoh
06DC : 0660; -- ' load
06DD : 27E7; -- . imov [imov!   t1 .test_logical_body_retaddr1]
06DE : 3706; -- ' imoh
06DF : 1670; --   str     t0 t1
06E0 : 9614; --   iadd    t0 1
06E1 : 2000; -- . imov [str!    .ret_stack_ptr t0]
06E2 : 3080; -- | imoh
06E3 : 1060; -- ' str
06E4 : 2048; -- . imov [jmp!    .assert]
06E5 : 3003; -- | imoh
06E6 : A000; -- ' j_op
06E7 : 26DE; -- . imov [imov! t0 .string_alloc_21]
06E8 : 3602; -- ' imoh
06E9 : 5D60; -- . push [push! t0]
06EA : 2600; -- . imov [imov! t0 0]
06EB : 3600; -- ' imoh
06EC : 5D60; --   push t0
06ED : 2601; -- . imov [imov! t0 1]
06EE : 3600; -- ' imoh
06EF : 5D60; --   push t0
06F0 : 67D0; -- . pop [pop! t1 t0]
06F1 : 66D0; -- ' pop
06F2 : 2800; --   imov t2 0
06F3 : 9607; --   tst  t0
06F4 : 20FC; -- . imov [jz! .test_logical_body_1_0_andfalse]
06F5 : 3006; -- | imoh
06F6 : A001; -- ' j_op
06F7 : 9707; --   tst  t1
06F8 : 20FC; -- . imov [jz! .test_logical_body_1_0_andfalse]
06F9 : 3006; -- | imoh
06FA : A001; -- ' j_op
06FB : 2801; --   imov t2 1
06FC : 5D80; -- . push [push! t2]
06FD : 2600; -- . imov [imov! t0 0]
06FE : 3600; -- ' imoh
06FF : 5D60; --   push t0
0700 : 67D0; -- . pop [pop! t1 t0]
0701 : 66D0; -- ' pop
0702 : 2801; --   imov t2 1  # default value
0703 : 8675; --   sub  t0 t1
0704 : 2008; -- . imov [jz!  .test_logical_body_1_1_opskip]
0705 : 3007; -- | imoh
0706 : A001; -- ' j_op
0707 : 2800; --   imov t2 0
0708 : 5D80; -- . push [push! t2]
0709 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
070A : 3680; -- | imoh
070B : 0660; -- ' load
070C : 2716; -- . imov [imov!   t1 .test_logical_body_retaddr2]
070D : 3707; -- ' imoh
070E : 1670; --   str     t0 t1
070F : 9614; --   iadd    t0 1
0710 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0711 : 3080; -- | imoh
0712 : 1060; -- ' str
0713 : 2048; -- . imov [jmp!    .assert]
0714 : 3003; -- | imoh
0715 : A000; -- ' j_op
0716 : 261F; -- . imov [imov! t0 .string_alloc_22]
0717 : 3603; -- ' imoh
0718 : 5D60; -- . push [push! t0]
0719 : 2600; -- . imov [imov! t0 0]
071A : 3600; -- ' imoh
071B : 5D60; --   push t0
071C : 2600; -- . imov [imov! t0 0]
071D : 3600; -- ' imoh
071E : 5D60; --   push t0
071F : 67D0; -- . pop [pop! t1 t0]
0720 : 66D0; -- ' pop
0721 : 2801; --   imov t2 1
0722 : 9607; --   tst  t0
0723 : 202B; -- . imov [jnz! .test_logical_body_2_0_ortrue]
0724 : 3007; -- | imoh
0725 : A002; -- ' j_op
0726 : 9707; --   tst  t1
0727 : 202B; -- . imov [jnz! .test_logical_body_2_0_ortrue]
0728 : 3007; -- | imoh
0729 : A002; -- ' j_op
072A : 2800; --   imov t2 0
072B : 5D80; -- . push [push! t2]
072C : 2600; -- . imov [imov! t0 0]
072D : 3600; -- ' imoh
072E : 5D60; --   push t0
072F : 67D0; -- . pop [pop! t1 t0]
0730 : 66D0; -- ' pop
0731 : 2801; --   imov t2 1  # default value
0732 : 8675; --   sub  t0 t1
0733 : 2037; -- . imov [jz!  .test_logical_body_2_1_opskip]
0734 : 3007; -- | imoh
0735 : A001; -- ' j_op
0736 : 2800; --   imov t2 0
0737 : 5D80; -- . push [push! t2]
0738 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0739 : 3680; -- | imoh
073A : 0660; -- ' load
073B : 2745; -- . imov [imov!   t1 .test_logical_body_retaddr3]
073C : 3707; -- ' imoh
073D : 1670; --   str     t0 t1
073E : 9614; --   iadd    t0 1
073F : 2000; -- . imov [str!    .ret_stack_ptr t0]
0740 : 3080; -- | imoh
0741 : 1060; -- ' str
0742 : 2048; -- . imov [jmp!    .assert]
0743 : 3003; -- | imoh
0744 : A000; -- ' j_op
0745 : 2641; -- . imov [imov! t0 .string_alloc_23]
0746 : 3603; -- ' imoh
0747 : 5D60; -- . push [push! t0]
0748 : 2601; -- . imov [imov! t0 1]
0749 : 3600; -- ' imoh
074A : 5D60; --   push t0
074B : 2600; -- . imov [imov! t0 0]
074C : 3600; -- ' imoh
074D : 5D60; --   push t0
074E : 67D0; -- . pop [pop! t1 t0]
074F : 66D0; -- ' pop
0750 : 2801; --   imov t2 1
0751 : 9607; --   tst  t0
0752 : 205A; -- . imov [jnz! .test_logical_body_3_0_ortrue]
0753 : 3007; -- | imoh
0754 : A002; -- ' j_op
0755 : 9707; --   tst  t1
0756 : 205A; -- . imov [jnz! .test_logical_body_3_0_ortrue]
0757 : 3007; -- | imoh
0758 : A002; -- ' j_op
0759 : 2800; --   imov t2 0
075A : 5D80; -- . push [push! t2]
075B : 2601; -- . imov [imov! t0 1]
075C : 3600; -- ' imoh
075D : 5D60; --   push t0
075E : 67D0; -- . pop [pop! t1 t0]
075F : 66D0; -- ' pop
0760 : 2801; --   imov t2 1  # default value
0761 : 8675; --   sub  t0 t1
0762 : 2066; -- . imov [jz!  .test_logical_body_3_1_opskip]
0763 : 3007; -- | imoh
0764 : A001; -- ' j_op
0765 : 2800; --   imov t2 0
0766 : 5D80; -- . push [push! t2]
0767 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0768 : 3680; -- | imoh
0769 : 0660; -- ' load
076A : 2774; -- . imov [imov!   t1 .test_logical_body_retaddr4]
076B : 3707; -- ' imoh
076C : 1670; --   str     t0 t1
076D : 9614; --   iadd    t0 1
076E : 2000; -- . imov [str!    .ret_stack_ptr t0]
076F : 3080; -- | imoh
0770 : 1060; -- ' str
0771 : 2048; -- . imov [jmp!    .assert]
0772 : 3003; -- | imoh
0773 : A000; -- ' j_op
0774 : 2611; -- . imov [imov! t0 .string_alloc_24]
0775 : 3602; -- ' imoh
0776 : 5D60; -- . push [push! t0]
0777 : 2601; -- . imov [imov! t0 1]
0778 : 3600; -- ' imoh
0779 : 5D60; --   push t0
077A : 66D0; -- . pop [pop! t0]
077B : 2701; --   imov t1 1
077C : 9607; --   tst  t0
077D : 2081; -- . imov [jz! .test_logical_body_4_0_nottrue]
077E : 3007; -- | imoh
077F : A001; -- ' j_op
0780 : 2700; --   imov t1 0
0781 : 5D70; -- . push [push! t1]
0782 : 2600; -- . imov [imov! t0 0]
0783 : 3600; -- ' imoh
0784 : 5D60; --   push t0
0785 : 67D0; -- . pop [pop! t1 t0]
0786 : 66D0; -- ' pop
0787 : 2801; --   imov t2 1  # default value
0788 : 8675; --   sub  t0 t1
0789 : 208D; -- . imov [jz!  .test_logical_body_4_1_opskip]
078A : 3007; -- | imoh
078B : A001; -- ' j_op
078C : 2800; --   imov t2 0
078D : 5D80; -- . push [push! t2]
078E : 2600; -- . imov [load!   t0 .ret_stack_ptr]
078F : 3680; -- | imoh
0790 : 0660; -- ' load
0791 : 279B; -- . imov [imov!   t1 .test_logical_body_retaddr5]
0792 : 3707; -- ' imoh
0793 : 1670; --   str     t0 t1
0794 : 9614; --   iadd    t0 1
0795 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0796 : 3080; -- | imoh
0797 : 1060; -- ' str
0798 : 2048; -- . imov [jmp!    .assert]
0799 : 3003; -- | imoh
079A : A000; -- ' j_op
079B : 2680; -- . imov [imov! t0 .string_alloc_25]
079C : 3602; -- ' imoh
079D : 5D60; -- . push [push! t0]
079E : 2600; -- . imov [imov! t0 0]
079F : 3600; -- ' imoh
07A0 : 5D60; --   push t0
07A1 : 66D0; -- . pop [pop! t0]
07A2 : 2701; --   imov t1 1
07A3 : 9607; --   tst  t0
07A4 : 20A8; -- . imov [jz! .test_logical_body_5_0_nottrue]
07A5 : 3007; -- | imoh
07A6 : A001; -- ' j_op
07A7 : 2700; --   imov t1 0
07A8 : 5D70; -- . push [push! t1]
07A9 : 2601; -- . imov [imov! t0 1]
07AA : 3600; -- ' imoh
07AB : 5D60; --   push t0
07AC : 67D0; -- . pop [pop! t1 t0]
07AD : 66D0; -- ' pop
07AE : 2801; --   imov t2 1  # default value
07AF : 8675; --   sub  t0 t1
07B0 : 20B4; -- . imov [jz!  .test_logical_body_5_1_opskip]
07B1 : 3007; -- | imoh
07B2 : A001; -- ' j_op
07B3 : 2800; --   imov t2 0
07B4 : 5D80; -- . push [push! t2]
07B5 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
07B6 : 3680; -- | imoh
07B7 : 0660; -- ' load
07B8 : 27C2; -- . imov [imov!   t1 .test_logical_body_retaddr6]
07B9 : 3707; -- ' imoh
07BA : 1670; --   str     t0 t1
07BB : 9614; --   iadd    t0 1
07BC : 2000; -- . imov [str!    .ret_stack_ptr t0]
07BD : 3080; -- | imoh
07BE : 1060; -- ' str
07BF : 2048; -- . imov [jmp!    .assert]
07C0 : 3003; -- | imoh
07C1 : A000; -- ' j_op
07C2 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
07C3 : 3680; -- | imoh
07C4 : 0660; -- ' load
07C5 : 9615; --   isub    t0 1
07C6 : 0760; --   load    t1 t0
07C7 : 2000; -- . imov [str!    .ret_stack_ptr t0]
07C8 : 3080; -- | imoh
07C9 : 1060; -- ' str
07CA : A700; --   jmp     t1
07CB : 66D0; -- . pop [pop! t0]
07CC : 5D60; -- . push [push! t0 t0]
07CD : 5D60; -- ' push
07CE : 66D0; -- . pop [pop! t0]
07CF : 5D60; -- . push [push! t0 t0]
07D0 : 5D60; -- ' push
07D1 : 66D0; -- . pop [pop! t0]
07D2 : 0660; --   load t0 t0
07D3 : 5D60; -- . push [push! t0]
07D4 : 66D0; -- . pop [pop! t0]
07D5 : 9607; --   tst  t0
07D6 : 20E3; -- . imov [jz!  .strlen_body_0_while_exit]
07D7 : 3007; -- | imoh
07D8 : A001; -- ' j_op
07D9 : 2601; -- . imov [imov! t0 1]
07DA : 3600; -- ' imoh
07DB : 5D60; --   push t0
07DC : 67D0; -- . pop [pop!  t1 t0]
07DD : 66D0; -- ' pop
07DE : 8674; --   add   t0 t1
07DF : 5D60; -- . push [push! t0]
07E0 : 20CE; -- . imov [jmp! .strlen_body_0_while_eval]
07E1 : 3007; -- | imoh
07E2 : A000; -- ' j_op
07E3 : 66D0; -- . pop [pop! t0 t1]
07E4 : 67D0; -- ' pop
07E5 : 5D60; -- . push [push! t0 t1]
07E6 : 5D70; -- ' push
07E7 : 67D0; -- . pop [pop!  t1 t0]
07E8 : 66D0; -- ' pop
07E9 : 8675; --   sub   t0 t1
07EA : 5D60; -- . push [push! t0]
07EB : 2600; -- . imov [load!   t0 .ret_stack_ptr]
07EC : 3680; -- | imoh
07ED : 0660; -- ' load
07EE : 9615; --   isub    t0 1
07EF : 0760; --   load    t1 t0
07F0 : 2000; -- . imov [str!    .ret_stack_ptr t0]
07F1 : 3080; -- | imoh
07F2 : 1060; -- ' str
07F3 : A700; --   jmp     t1
07F4 : 263B; -- . imov [imov! t0 .string_alloc_26]
07F5 : 3602; -- ' imoh
07F6 : 5D60; -- . push [push! t0]
07F7 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
07F8 : 3680; -- | imoh
07F9 : 0660; -- ' load
07FA : 2704; -- . imov [imov!   t1 .test_strlen_body_retaddr0]
07FB : 3708; -- ' imoh
07FC : 1670; --   str     t0 t1
07FD : 9614; --   iadd    t0 1
07FE : 2000; -- . imov [str!    .ret_stack_ptr t0]
07FF : 3080; -- | imoh
0800 : 1060; -- ' str
0801 : 207D; -- . imov [jmp!    .ps]
0802 : 3009; -- | imoh
0803 : A000; -- ' j_op
0804 : 262C; -- . imov [imov! t0 .string_alloc_27]
0805 : 3603; -- ' imoh
0806 : 5D60; -- . push [push! t0]
0807 : 2621; -- . imov [imov! t0 .string_alloc_28]
0808 : 3602; -- ' imoh
0809 : 5D60; -- . push [push! t0]
080A : 2600; -- . imov [load!   t0 .ret_stack_ptr]
080B : 3680; -- | imoh
080C : 0660; -- ' load
080D : 2717; -- . imov [imov!   t1 .test_strlen_body_0_retaddr0]
080E : 3708; -- ' imoh
080F : 1670; --   str     t0 t1
0810 : 9614; --   iadd    t0 1
0811 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0812 : 3080; -- | imoh
0813 : 1060; -- ' str
0814 : 20CB; -- . imov [jmp!    .strlen]
0815 : 3007; -- | imoh
0816 : A000; -- ' j_op
0817 : 2604; -- . imov [imov! t0 4]
0818 : 3600; -- ' imoh
0819 : 5D60; --   push t0
081A : 67D0; -- . pop [pop! t1 t0]
081B : 66D0; -- ' pop
081C : 2801; --   imov t2 1  # default value
081D : 8675; --   sub  t0 t1
081E : 2022; -- . imov [jz!  .test_strlen_body_0_0_opskip]
081F : 3008; -- | imoh
0820 : A001; -- ' j_op
0821 : 2800; --   imov t2 0
0822 : 5D80; -- . push [push! t2]
0823 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0824 : 3680; -- | imoh
0825 : 0660; -- ' load
0826 : 2730; -- . imov [imov!   t1 .test_strlen_body_retaddr1]
0827 : 3708; -- ' imoh
0828 : 1670; --   str     t0 t1
0829 : 9614; --   iadd    t0 1
082A : 2000; -- . imov [str!    .ret_stack_ptr t0]
082B : 3080; -- | imoh
082C : 1060; -- ' str
082D : 2048; -- . imov [jmp!    .assert]
082E : 3003; -- | imoh
082F : A000; -- ' j_op
0830 : 2668; -- . imov [imov! t0 .string_alloc_29]
0831 : 3602; -- ' imoh
0832 : 5D60; -- . push [push! t0]
0833 : 2626; -- . imov [imov! t0 .string_alloc_30]
0834 : 3602; -- ' imoh
0835 : 5D60; -- . push [push! t0]
0836 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0837 : 3680; -- | imoh
0838 : 0660; -- ' load
0839 : 2743; -- . imov [imov!   t1 .test_strlen_body_1_retaddr0]
083A : 3708; -- ' imoh
083B : 1670; --   str     t0 t1
083C : 9614; --   iadd    t0 1
083D : 2000; -- . imov [str!    .ret_stack_ptr t0]
083E : 3080; -- | imoh
083F : 1060; -- ' str
0840 : 20CB; -- . imov [jmp!    .strlen]
0841 : 3007; -- | imoh
0842 : A000; -- ' j_op
0843 : 2600; -- . imov [imov! t0 0]
0844 : 3600; -- ' imoh
0845 : 5D60; --   push t0
0846 : 67D0; -- . pop [pop! t1 t0]
0847 : 66D0; -- ' pop
0848 : 2801; --   imov t2 1  # default value
0849 : 8675; --   sub  t0 t1
084A : 204E; -- . imov [jz!  .test_strlen_body_1_0_opskip]
084B : 3008; -- | imoh
084C : A001; -- ' j_op
084D : 2800; --   imov t2 0
084E : 5D80; -- . push [push! t2]
084F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0850 : 3680; -- | imoh
0851 : 0660; -- ' load
0852 : 275C; -- . imov [imov!   t1 .test_strlen_body_retaddr2]
0853 : 3708; -- ' imoh
0854 : 1670; --   str     t0 t1
0855 : 9614; --   iadd    t0 1
0856 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0857 : 3080; -- | imoh
0858 : 1060; -- ' str
0859 : 2048; -- . imov [jmp!    .assert]
085A : 3003; -- | imoh
085B : A000; -- ' j_op
085C : 2600; -- . imov [load!   t0 .ret_stack_ptr]
085D : 3680; -- | imoh
085E : 0660; -- ' load
085F : 9615; --   isub    t0 1
0860 : 0760; --   load    t1 t0
0861 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0862 : 3080; -- | imoh
0863 : 1060; -- ' str
0864 : A700; --   jmp     t1
0865 : 268B; -- . imov [imov! t0 .string_alloc_31]
0866 : 3602; -- ' imoh
0867 : 5D60; -- . push [push! t0]
0868 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0869 : 3680; -- | imoh
086A : 0660; -- ' load
086B : 2775; -- . imov [imov!   t1 .main_body_retaddr0]
086C : 3708; -- ' imoh
086D : 1670; --   str     t0 t1
086E : 9614; --   iadd    t0 1
086F : 2000; -- . imov [str!    .ret_stack_ptr t0]
0870 : 3080; -- | imoh
0871 : 1060; -- ' str
0872 : 207D; -- . imov [jmp!    .ps]
0873 : 3009; -- | imoh
0874 : A000; -- ' j_op
0875 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0876 : 3680; -- | imoh
0877 : 0660; -- ' load
0878 : 2782; -- . imov [imov!   t1 .main_body_retaddr1]
0879 : 3708; -- ' imoh
087A : 1670; --   str     t0 t1
087B : 9614; --   iadd    t0 1
087C : 2000; -- . imov [str!    .ret_stack_ptr t0]
087D : 3080; -- | imoh
087E : 1060; -- ' str
087F : 20B6; -- . imov [jmp!    .test_sum]
0880 : 3003; -- | imoh
0881 : A000; -- ' j_op
0882 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0883 : 3680; -- | imoh
0884 : 0660; -- ' load
0885 : 278F; -- . imov [imov!   t1 .main_body_retaddr2]
0886 : 3708; -- ' imoh
0887 : 1670; --   str     t0 t1
0888 : 9614; --   iadd    t0 1
0889 : 2000; -- . imov [str!    .ret_stack_ptr t0]
088A : 3080; -- | imoh
088B : 1060; -- ' str
088C : 2035; -- . imov [jmp!    .test_arith]
088D : 3004; -- | imoh
088E : A000; -- ' j_op
088F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0890 : 3680; -- | imoh
0891 : 0660; -- ' load
0892 : 279C; -- . imov [imov!   t1 .main_body_retaddr3]
0893 : 3708; -- ' imoh
0894 : 1670; --   str     t0 t1
0895 : 9614; --   iadd    t0 1
0896 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0897 : 3080; -- | imoh
0898 : 1060; -- ' str
0899 : 20A8; -- . imov [jmp!    .test_logical]
089A : 3006; -- | imoh
089B : A000; -- ' j_op
089C : 2600; -- . imov [load!   t0 .ret_stack_ptr]
089D : 3680; -- | imoh
089E : 0660; -- ' load
089F : 27A9; -- . imov [imov!   t1 .main_body_retaddr4]
08A0 : 3708; -- ' imoh
08A1 : 1670; --   str     t0 t1
08A2 : 9614; --   iadd    t0 1
08A3 : 2000; -- . imov [str!    .ret_stack_ptr t0]
08A4 : 3080; -- | imoh
08A5 : 1060; -- ' str
08A6 : 20F4; -- . imov [jmp!    .test_strlen]
08A7 : 3007; -- | imoh
08A8 : A000; -- ' j_op
08A9 : 26EB; -- . imov [imov! t0 .string_alloc_32]
08AA : 3602; -- ' imoh
08AB : 5D60; -- . push [push! t0]
08AC : 2600; -- . imov [load!   t0 .ret_stack_ptr]
08AD : 3680; -- | imoh
08AE : 0660; -- ' load
08AF : 27B9; -- . imov [imov!   t1 .main_body_retaddr5]
08B0 : 3708; -- ' imoh
08B1 : 1670; --   str     t0 t1
08B2 : 9614; --   iadd    t0 1
08B3 : 2000; -- . imov [str!    .ret_stack_ptr t0]
08B4 : 3080; -- | imoh
08B5 : 1060; -- ' str
08B6 : 207D; -- . imov [jmp!    .ps]
08B7 : 3009; -- | imoh
08B8 : A000; -- ' j_op
08B9 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
08BA : 3680; -- | imoh
08BB : 0660; -- ' load
08BC : 9615; --   isub    t0 1
08BD : 0760; --   load    t1 t0
08BE : 2000; -- . imov [str!    .ret_stack_ptr t0]
08BF : 3080; -- | imoh
08C0 : 1060; -- ' str
08C1 : A700; --   jmp     t1
08C2 : 66D0; -- . pop [pop! t0]
08C3 : 5D60; -- . push [push! t0 t0]
08C4 : 5D60; -- ' push
08C5 : 260A; -- . imov [imov! t0 10]
08C6 : 3600; -- ' imoh
08C7 : 5D60; --   push t0
08C8 : 67D0; -- . pop [pop! t1 t0]
08C9 : 66D0; -- ' pop
08CA : 2801; --   imov t2 1  # default value
08CB : 8675; --   sub  t0 t1
08CC : 20D0; -- . imov [jn!  .ph_body_0_opskip]
08CD : 3008; -- | imoh
08CE : A003; -- ' j_op
08CF : 2800; --   imov t2 0
08D0 : 5D80; -- . push [push! t2]
08D1 : 66D0; -- . pop [pop! t0]
08D2 : 9607; --   tst  t0
08D3 : 20E4; -- . imov [jz!  .ph_body_1_else]
08D4 : 3008; -- | imoh
08D5 : A001; -- ' j_op
08D6 : 2630; -- . imov [imov! t0 48]
08D7 : 3600; -- ' imoh
08D8 : 5D60; --   push t0
08D9 : 67D0; -- . pop [pop!  t1 t0]
08DA : 66D0; -- ' pop
08DB : 8674; --   add   t0 t1
08DC : 5D60; -- . push [push! t0]
08DD : 61D0; -- . pop [pop! p0]
08DE : 207A; -- . imov r0 .print_char  [call! .print_char]
08DF : 3000; -- | imoh r0 .print_char
08E0 : A010; -- ' jmpl
08E1 : 20F6; -- . imov [jmp! .ph_body_1_if_exit]
08E2 : 3008; -- | imoh
08E3 : A000; -- ' j_op
08E4 : 260A; -- . imov [imov! t0 10]
08E5 : 3600; -- ' imoh
08E6 : 5D60; --   push t0
08E7 : 67D0; -- . pop [pop!  t1 t0]
08E8 : 66D0; -- ' pop
08E9 : 8675; --   sub   t0 t1
08EA : 5D60; -- . push [push! t0]
08EB : 2641; -- . imov [imov! t0 65]
08EC : 3600; -- ' imoh
08ED : 5D60; --   push t0
08EE : 67D0; -- . pop [pop!  t1 t0]
08EF : 66D0; -- ' pop
08F0 : 8674; --   add   t0 t1
08F1 : 5D60; -- . push [push! t0]
08F2 : 61D0; -- . pop [pop! p0]
08F3 : 207A; -- . imov r0 .print_char  [call! .print_char]
08F4 : 3000; -- | imoh r0 .print_char
08F5 : A010; -- ' jmpl
08F6 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
08F7 : 3680; -- | imoh
08F8 : 0660; -- ' load
08F9 : 9615; --   isub    t0 1
08FA : 0760; --   load    t1 t0
08FB : 2000; -- . imov [str!    .ret_stack_ptr t0]
08FC : 3080; -- | imoh
08FD : 1060; -- ' str
08FE : A700; --   jmp     t1
08FF : 66D0; -- . pop [pop! t0]
0900 : 5D60; -- . push [push! t0 t0]
0901 : 5D60; -- ' push
0902 : 2604; -- . imov [imov! t0 4]
0903 : 3600; -- ' imoh
0904 : 5D60; --   push t0
0905 : 67D0; -- . pop [pop!  t1 t0]
0906 : 66D0; -- ' pop
0907 : 8679; --   sshr  t0 t1
0908 : 5D60; -- . push [push! t0]
0909 : 260F; -- . imov [imov! t0 15]
090A : 3600; -- ' imoh
090B : 5D60; --   push t0
090C : 67D0; -- . pop [pop!  t1 t0]
090D : 66D0; -- ' pop
090E : 8671; --   and   t0 t1
090F : 5D60; -- . push [push! t0]
0910 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0911 : 3680; -- | imoh
0912 : 0660; -- ' load
0913 : 271D; -- . imov [imov!   t1 .pn_body_retaddr0]
0914 : 3709; -- ' imoh
0915 : 1670; --   str     t0 t1
0916 : 9614; --   iadd    t0 1
0917 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0918 : 3080; -- | imoh
0919 : 1060; -- ' str
091A : 20C2; -- . imov [jmp!    .ph]
091B : 3008; -- | imoh
091C : A000; -- ' j_op
091D : 66D0; -- . pop [pop! t0]
091E : 5D60; -- . push [push! t0 t0]
091F : 5D60; -- ' push
0920 : 260F; -- . imov [imov! t0 15]
0921 : 3600; -- ' imoh
0922 : 5D60; --   push t0
0923 : 67D0; -- . pop [pop!  t1 t0]
0924 : 66D0; -- ' pop
0925 : 8671; --   and   t0 t1
0926 : 5D60; -- . push [push! t0]
0927 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0928 : 3680; -- | imoh
0929 : 0660; -- ' load
092A : 2734; -- . imov [imov!   t1 .pn_body_retaddr1]
092B : 3709; -- ' imoh
092C : 1670; --   str     t0 t1
092D : 9614; --   iadd    t0 1
092E : 2000; -- . imov [str!    .ret_stack_ptr t0]
092F : 3080; -- | imoh
0930 : 1060; -- ' str
0931 : 20C2; -- . imov [jmp!    .ph]
0932 : 3008; -- | imoh
0933 : A000; -- ' j_op
0934 : 66D0; -- . pop [pop! t0]
0935 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0936 : 3680; -- | imoh
0937 : 0660; -- ' load
0938 : 9615; --   isub    t0 1
0939 : 0760; --   load    t1 t0
093A : 2000; -- . imov [str!    .ret_stack_ptr t0]
093B : 3080; -- | imoh
093C : 1060; -- ' str
093D : A700; --   jmp     t1
093E : 66D0; -- . pop [pop! t0]
093F : 5D60; -- . push [push! t0 t0]
0940 : 5D60; -- ' push
0941 : 2608; -- . imov [imov! t0 8]
0942 : 3600; -- ' imoh
0943 : 5D60; --   push t0
0944 : 67D0; -- . pop [pop!  t1 t0]
0945 : 66D0; -- ' pop
0946 : 8679; --   sshr  t0 t1
0947 : 5D60; -- . push [push! t0]
0948 : 26FF; -- . imov [imov! t0 255]
0949 : 3600; -- ' imoh
094A : 5D60; --   push t0
094B : 67D0; -- . pop [pop!  t1 t0]
094C : 66D0; -- ' pop
094D : 8671; --   and   t0 t1
094E : 5D60; -- . push [push! t0]
094F : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0950 : 3680; -- | imoh
0951 : 0660; -- ' load
0952 : 275C; -- . imov [imov!   t1 .p_body_retaddr0]
0953 : 3709; -- ' imoh
0954 : 1670; --   str     t0 t1
0955 : 9614; --   iadd    t0 1
0956 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0957 : 3080; -- | imoh
0958 : 1060; -- ' str
0959 : 20FF; -- . imov [jmp!    .pn]
095A : 3008; -- | imoh
095B : A000; -- ' j_op
095C : 66D0; -- . pop [pop! t0]
095D : 5D60; -- . push [push! t0 t0]
095E : 5D60; -- ' push
095F : 26FF; -- . imov [imov! t0 255]
0960 : 3600; -- ' imoh
0961 : 5D60; --   push t0
0962 : 67D0; -- . pop [pop!  t1 t0]
0963 : 66D0; -- ' pop
0964 : 8671; --   and   t0 t1
0965 : 5D60; -- . push [push! t0]
0966 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0967 : 3680; -- | imoh
0968 : 0660; -- ' load
0969 : 2773; -- . imov [imov!   t1 .p_body_retaddr1]
096A : 3709; -- ' imoh
096B : 1670; --   str     t0 t1
096C : 9614; --   iadd    t0 1
096D : 2000; -- . imov [str!    .ret_stack_ptr t0]
096E : 3080; -- | imoh
096F : 1060; -- ' str
0970 : 20FF; -- . imov [jmp!    .pn]
0971 : 3008; -- | imoh
0972 : A000; -- ' j_op
0973 : 66D0; -- . pop [pop! t0]
0974 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0975 : 3680; -- | imoh
0976 : 0660; -- ' load
0977 : 9615; --   isub    t0 1
0978 : 0760; --   load    t1 t0
0979 : 2000; -- . imov [str!    .ret_stack_ptr t0]
097A : 3080; -- | imoh
097B : 1060; -- ' str
097C : A700; --   jmp     t1
097D : 66D0; -- . pop [pop! t0]
097E : 5D60; -- . push [push! t0 t0]
097F : 5D60; -- ' push
0980 : 66D0; -- . pop [pop! t0]
0981 : 0660; --   load t0 t0
0982 : 5D60; -- . push [push! t0]
0983 : 66D0; -- . pop [pop! t0]
0984 : 5D60; -- . push [push! t0 t0]
0985 : 5D60; -- ' push
0986 : 66D0; -- . pop [pop! t0]
0987 : 9607; --   tst  t0
0988 : 209C; -- . imov [jz!  .ps_body_0_while_exit]
0989 : 3009; -- | imoh
098A : A001; -- ' j_op
098B : 61D0; -- . pop [pop! p0]
098C : 207A; -- . imov r0 .print_char  [call! .print_char]
098D : 3000; -- | imoh r0 .print_char
098E : A010; -- ' jmpl
098F : 2601; -- . imov [imov! t0 1]
0990 : 3600; -- ' imoh
0991 : 5D60; --   push t0
0992 : 67D0; -- . pop [pop!  t1 t0]
0993 : 66D0; -- ' pop
0994 : 8674; --   add   t0 t1
0995 : 5D60; -- . push [push! t0]
0996 : 66D0; -- . pop [pop! t0]
0997 : 5D60; -- . push [push! t0 t0]
0998 : 5D60; -- ' push
0999 : 2080; -- . imov [jmp! .ps_body_0_while_eval]
099A : 3009; -- | imoh
099B : A000; -- ' j_op
099C : 66D0; -- . pop [pop! t0]
099D : 66D0; -- . pop [pop! t0]
099E : 2600; -- . imov [load!   t0 .ret_stack_ptr]
099F : 3680; -- | imoh
09A0 : 0660; -- ' load
09A1 : 9615; --   isub    t0 1
09A2 : 0760; --   load    t1 t0
09A3 : 2000; -- . imov [str!    .ret_stack_ptr t0]
09A4 : 3080; -- | imoh
09A5 : 1060; -- ' str
09A6 : A700; --   jmp     t1
09A7 : 26A9; -- . imov [imov! t0 .string_alloc_33]
09A8 : 3602; -- ' imoh
09A9 : 5D60; -- . push [push! t0]
09AA : 2600; -- . imov [load!   t0 .ret_stack_ptr]
09AB : 3680; -- | imoh
09AC : 0660; -- ' load
09AD : 27B7; -- . imov [imov!   t1 .fib_body_retaddr0]
09AE : 3709; -- ' imoh
09AF : 1670; --   str     t0 t1
09B0 : 9614; --   iadd    t0 1
09B1 : 2000; -- . imov [str!    .ret_stack_ptr t0]
09B2 : 3080; -- | imoh
09B3 : 1060; -- ' str
09B4 : 207D; -- . imov [jmp!    .ps]
09B5 : 3009; -- | imoh
09B6 : A000; -- ' j_op
09B7 : 2600; -- . imov [imov! t0 0]
09B8 : 3600; -- ' imoh
09B9 : 5D60; --   push t0
09BA : 2601; -- . imov [imov! t0 1]
09BB : 3600; -- ' imoh
09BC : 5D60; --   push t0
09BD : 66D0; -- . pop [pop! t0 t1]
09BE : 67D0; -- ' pop
09BF : 5D70; -- . push [push! t1 t0 t1]
09C0 : 5D60; -- | push
09C1 : 5D70; -- ' push
09C2 : 2610; -- . imov [imov! t0 10000]
09C3 : 3627; -- ' imoh
09C4 : 5D60; --   push t0
09C5 : 67D0; -- . pop [pop! t1 t0]
09C6 : 66D0; -- ' pop
09C7 : 2801; --   imov t2 1  # default value
09C8 : 8675; --   sub  t0 t1
09C9 : 20CD; -- . imov [jn!  .fib_body_0_while_eval_0_opskip]
09CA : 3009; -- | imoh
09CB : A003; -- ' j_op
09CC : 2800; --   imov t2 0
09CD : 5D80; -- . push [push! t2]
09CE : 66D0; -- . pop [pop! t0]
09CF : 9607; --   tst  t0
09D0 : 20FC; -- . imov [jz!  .fib_body_0_while_exit]
09D1 : 3009; -- | imoh
09D2 : A001; -- ' j_op
09D3 : 66D0; -- . pop [pop! t0 t1]
09D4 : 67D0; -- ' pop
09D5 : 5D70; -- . push [push! t1 t0 t1]
09D6 : 5D60; -- | push
09D7 : 5D70; -- ' push
09D8 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
09D9 : 3680; -- | imoh
09DA : 0660; -- ' load
09DB : 27E5; -- . imov [imov!   t1 .fib_body_0_while_block_retaddr0]
09DC : 3709; -- ' imoh
09DD : 1670; --   str     t0 t1
09DE : 9614; --   iadd    t0 1
09DF : 2000; -- . imov [str!    .ret_stack_ptr t0]
09E0 : 3080; -- | imoh
09E1 : 1060; -- ' str
09E2 : 203E; -- . imov [jmp!    .p]
09E3 : 3009; -- | imoh
09E4 : A000; -- ' j_op
09E5 : 2620; -- . imov [imov! t0 32]
09E6 : 3600; -- ' imoh
09E7 : 5D60; --   push t0
09E8 : 61D0; -- . pop [pop! p0]
09E9 : 207A; -- . imov r0 .print_char  [call! .print_char]
09EA : 3000; -- | imoh r0 .print_char
09EB : A010; -- ' jmpl
09EC : 66D0; -- . pop [pop! t0 t1]
09ED : 67D0; -- ' pop
09EE : 5D60; -- . push [push! t0 t1]
09EF : 5D70; -- ' push
09F0 : 66D0; -- . pop [pop! t0 t1]
09F1 : 67D0; -- ' pop
09F2 : 5D70; -- . push [push! t1 t0 t1]
09F3 : 5D60; -- | push
09F4 : 5D70; -- ' push
09F5 : 67D0; -- . pop [pop!  t1 t0]
09F6 : 66D0; -- ' pop
09F7 : 8674; --   add   t0 t1
09F8 : 5D60; -- . push [push! t0]
09F9 : 20BD; -- . imov [jmp! .fib_body_0_while_eval]
09FA : 3009; -- | imoh
09FB : A000; -- ' j_op
09FC : 66D0; -- . pop [pop! t0]
09FD : 66D0; -- . pop [pop! t0]
09FE : 26AD; -- . imov [imov! t0 57005]
09FF : 36DE; -- ' imoh
0A00 : 5D60; --   push t0
0A01 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0A02 : 3680; -- | imoh
0A03 : 0660; -- ' load
0A04 : 270E; -- . imov [imov!   t1 .fib_body_retaddr1]
0A05 : 370A; -- ' imoh
0A06 : 1670; --   str     t0 t1
0A07 : 9614; --   iadd    t0 1
0A08 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0A09 : 3080; -- | imoh
0A0A : 1060; -- ' str
0A0B : 203E; -- . imov [jmp!    .p]
0A0C : 3009; -- | imoh
0A0D : A000; -- ' j_op
0A0E : 26EF; -- . imov [imov! t0 48879]
0A0F : 36BE; -- ' imoh
0A10 : 5D60; --   push t0
0A11 : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0A12 : 3680; -- | imoh
0A13 : 0660; -- ' load
0A14 : 271E; -- . imov [imov!   t1 .fib_body_retaddr2]
0A15 : 370A; -- ' imoh
0A16 : 1670; --   str     t0 t1
0A17 : 9614; --   iadd    t0 1
0A18 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0A19 : 3080; -- | imoh
0A1A : 1060; -- ' str
0A1B : 203E; -- . imov [jmp!    .p]
0A1C : 3009; -- | imoh
0A1D : A000; -- ' j_op
0A1E : 2600; -- . imov [load!   t0 .ret_stack_ptr]
0A1F : 3680; -- | imoh
0A20 : 0660; -- ' load
0A21 : 9615; --   isub    t0 1
0A22 : 0760; --   load    t1 t0
0A23 : 2000; -- . imov [str!    .ret_stack_ptr t0]
0A24 : 3080; -- | imoh
0A25 : 1060; -- ' str
0A26 : A700; --   jmp     t1
END;