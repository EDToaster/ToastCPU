
# allocate 1024 words on the heap
.ret_stack [0x0400]
fn .reset
    # setup isr and jump to main
    imov! isr .isr
    # initialize ret stack ptrs
    imov! t5 .ret_stack
    imov! t0 0x03FF
    add   t5 t0
    imov! t1 .reset_ret
    push  t5 t1
    # initialize our global variables
    call! .init_globals
    jmp!  .main
.reset_ret
    halt
#end .reset
fn .init_globals
    push! t0
    imov! t0 100
    str!  .variable_alloc_text_progress t0
    imov! t0 0
    str!  .variable_alloc_text_ptr t0
    imov! t0 0
    str!  .variable_alloc_key_buffer t0
    imov! t0 0
    str!  .variable_alloc_buf1 t0
    imov! t0 0
    str!  .variable_alloc_buf2 t0
    imov! t0 0
    str!  .variable_alloc_curr_buff t0
    imov! t0 0
    str!  .variable_alloc_back_buff t0
    pop!  t0
    jmpr
#end .init_globals
.variable_alloc_text_progress [1]
.variable_alloc_text_ptr [1]
.variable_alloc_key_buffer [34]
.variable_alloc_buf1 [101]
.variable_alloc_buf2 [101]
.variable_alloc_curr_buff [1]
.variable_alloc_back_buff [1]
fn .isr
    isr!
    rti!
#end .isr
.string_alloc_5
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0060 # '` '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0071 # 'q '
    0x0031 # '1 '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x007A # 'z '
    0x0073 # 's '
    0x0061 # 'a '
    0x0077 # 'w '
    0x0032 # '2 '
    0x0020 # '  '
    0x0020 # '  '
    0x0063 # 'c '
    0x0078 # 'x '
    0x0064 # 'd '
    0x0065 # 'e '
    0x0034 # '4 '
    0x0033 # '3 '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0076 # 'v '
    0x0066 # 'f '
    0x0074 # 't '
    0x0072 # 'r '
    0x0035 # '5 '
    0x0020 # '  '
    0x0020 # '  '
    0x006E # 'n '
    0x0062 # 'b '
    0x0068 # 'h '
    0x0067 # 'g '
    0x0079 # 'y '
    0x0036 # '6 '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x006D # 'm '
    0x006A # 'j '
    0x0075 # 'u '
    0x0037 # '7 '
    0x0038 # '8 '
    0x0020 # '  '
    0x0020 # '  '
    0x002C # ', '
    0x006B # 'k '
    0x0069 # 'i '
    0x006F # 'o '
    0x0030 # '0 '
    0x0039 # '9 '
    0x0020 # '  '
    0x0020 # '  '
    0x002E # '. '
    0x002F # '/ '
    0x006C # 'l '
    0x003B # '; '
    0x0070 # 'p '
    0x002D # '- '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x005B # '[ '
    0x003D # '= '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x000A # '\n'
    0x005D # '] '
    0x0020 # '  '
    0x005C # '\ '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0020 # '  '
    0x0000 # '\0'
fn .memset
    # pop from the data stack
    # push to return stack
    pop!  t1
    push  t5 t1
    # pop from the data stack
    # push to return stack
    pop!  t1
    push  t5 t1
    # pop from the data stack
    # push to return stack
    pop!  t1
    push  t5 t1
    imov! t0 0
    push  t0
.memset_body_let_inner_1_while_eval_2
    pop!  t0
    push! t0 t0
    mov   t0 t5
    imov! t1 2
    add   t0 t1
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jn!   .memset_body_let_inner_1_while_eval_2_operator_5_opskip
    imov  t2 0
.memset_body_let_inner_1_while_eval_2_operator_5_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .memset_body_let_inner_1_while_exit_4
.memset_body_let_inner_1_while_body_3
    mov   t0 t5
    imov! t1 1
    add   t0 t1
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    mov   t0 t5
    imov! t1 0
    add   t0 t1
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp!  .memset_body_let_inner_1_while_eval_2
.memset_body_let_inner_1_while_exit_4
    pop!  t0
    # pop 3 elements from return stack
    imov! t0 3
    add   t5 t0
.memset_exit
    pop   t0 t5
    jmp   t0
#end .memset
fn .memdump
    pop!  t0 t1
    push! t0 t1
    pop!  t0 t1
    push! t0 t1
    # pop from the data stack
    # push to return stack
    pop!  t1
    push  t5 t1
    # pop from the data stack
    # push to return stack
    pop!  t1
    push  t5 t1
    imov! t0 0
    push  t0
.memdump_body_let_inner_11_while_eval_12
    pop!  t0
    push! t0 t0
    mov   t0 t5
    imov! t1 1
    add   t0 t1
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jn!   .memdump_body_let_inner_11_while_eval_12_operator_15_opskip
    imov  t2 0
.memdump_body_let_inner_11_while_eval_12_operator_15_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .memdump_body_let_inner_11_while_exit_14
.memdump_body_let_inner_11_while_body_13
    mov   t0 t5
    imov! t1 0
    add   t0 t1
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .memdump_body_let_inner_11_while_body_13_retaddr_18
    push  t5 t0
    jmp!  .print_word
.memdump_body_let_inner_11_while_body_13_retaddr_18
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp!  .memdump_body_let_inner_11_while_eval_12
.memdump_body_let_inner_11_while_exit_14
    pop!  t0
    # pop 2 elements from return stack
    imov! t0 2
    add   t5 t0
.memdump_exit
    pop   t0 t5
    jmp   t0
#end .memdump
fn .print_reset
    imov! t0 100
    push  t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 0
    push  t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t1 t0
    str   t1 t0
.print_reset_exit
    pop   t0 t5
    jmp   t0
#end .print_reset
fn .print_char
    pop!  t0
    push! t0 t0
    imov! t0 10
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .print_char_body_operator_21_opskip
    imov  t2 0
.print_char_body_operator_21_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .print_char_body_else_23
.print_char_body_if_22
    pop!  t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 100
    push  t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t1 t0
    str   t1 t0
    jmp!  .print_char_body_if_exit_24
.print_char_body_else_23
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t0 t1
    imov! t0 14336
    push  t0
    pop!  t1 t0
    or    t0 t1
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    str   t1 t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    sub   t0 t1
    push! t0
    pop!  t0
    push! t0 t0
    imov! t0 0
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .print_char_body_else_23_operator_29_opskip
    imov  t2 0
.print_char_body_else_23_operator_29_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .print_char_body_else_23_else_31
.print_char_body_else_23_if_30
    pop!  t0
    imov! t0 100
    push  t0
    jmp!  .print_char_body_else_23_if_exit_32
.print_char_body_else_23_else_31
.print_char_body_else_23_if_exit_32
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t1 t0
    str   t1 t0
.print_char_body_if_exit_24
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 6000
    push  t0
    pop!  t1 t0
    imov  t2 0  # default value
    sub   t0 t1
    jn!   .print_char_body_operator_34_opskip
    imov  t2 1
.print_char_body_operator_34_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .print_char_body_else_36
.print_char_body_if_35
    imov! t0 0
    push  t0
    imov! t0 .variable_alloc_text_ptr
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 100
    push  t0
    imov! t0 .variable_alloc_text_progress
    push! t0
    pop!  t1 t0
    str   t1 t0
    jmp!  .print_char_body_if_exit_37
.print_char_body_else_36
.print_char_body_if_exit_37
.print_char_exit
    pop   t0 t5
    jmp   t0
#end .print_char
fn .print_hex
    pop!  t0
    push! t0 t0
    imov! t0 10
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jn!   .print_hex_body_operator_39_opskip
    imov  t2 0
.print_hex_body_operator_39_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .print_hex_body_else_41
.print_hex_body_if_40
    imov! t0 48
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .print_hex_body_if_40_retaddr_44
    push  t5 t0
    jmp!  .print_char
.print_hex_body_if_40_retaddr_44
    jmp!  .print_hex_body_if_exit_42
.print_hex_body_else_41
    imov! t0 10
    push  t0
    pop!  t1 t0
    sub   t0 t1
    push! t0
    imov! t0 65
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 .print_hex_body_else_41_retaddr_47
    push  t5 t0
    jmp!  .print_char
.print_hex_body_else_41_retaddr_47
.print_hex_body_if_exit_42
.print_hex_exit
    pop   t0 t5
    jmp   t0
#end .print_hex
fn .print_nibble
    pop!  t0
    push! t0 t0
    imov! t0 4
    push  t0
    pop!  t1 t0
    sshr  t0 t1
    push! t0
    imov! t0 15
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .print_nibble_body_retaddr_50
    push  t5 t0
    jmp!  .print_hex
.print_nibble_body_retaddr_50
    pop!  t0
    push! t0 t0
    imov! t0 15
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .print_nibble_body_retaddr_52
    push  t5 t0
    jmp!  .print_hex
.print_nibble_body_retaddr_52
    pop!  t0
.print_nibble_exit
    pop   t0 t5
    jmp   t0
#end .print_nibble
fn .print_word
    pop!  t0
    push! t0 t0
    imov! t0 8
    push  t0
    pop!  t1 t0
    sshr  t0 t1
    push! t0
    imov! t0 255
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .print_word_body_retaddr_55
    push  t5 t0
    jmp!  .print_nibble
.print_word_body_retaddr_55
    pop!  t0
    push! t0 t0
    imov! t0 255
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .print_word_body_retaddr_57
    push  t5 t0
    jmp!  .print_nibble
.print_word_body_retaddr_57
    pop!  t0
.print_word_exit
    pop   t0 t5
    jmp   t0
#end .print_word
fn .print_string
    pop!  t0
    push! t0 t0
.print_string_body_while_eval_58
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0
    push! t0 t0
    pop!  t0
    tst   t0
    jz!   .print_string_body_while_exit_60
.print_string_body_while_body_59
    imov! t0 .print_string_body_while_body_59_retaddr_61
    push  t5 t0
    jmp!  .print_char
.print_string_body_while_body_59_retaddr_61
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    push! t0 t0
    jmp!  .print_string_body_while_eval_58
.print_string_body_while_exit_60
    pop!  t0
    pop!  t0
.print_string_exit
    pop   t0 t5
    jmp   t0
#end .print_string
fn .keyboard_init
    imov! t0 .variable_alloc_key_buffer
    push! t0
    imov! t0 0
    push  t0
    imov! t0 34
    push! t0
    imov! t0 .keyboard_init_body_retaddr_65
    push  t5 t0
    jmp!  .memset
.keyboard_init_body_retaddr_65
.keyboard_init_exit
    pop   t0 t5
    jmp   t0
#end .keyboard_init
fn .keyboard_handle_input
    imov! t0 .keyboard_handle_input_body_retaddr_66
    push  t5 t0
    jmp!  .get_keyboard_ascii
.keyboard_handle_input_body_retaddr_66
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 2
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 1
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 1
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 31
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 1
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
.keyboard_handle_input_exit
    pop   t0 t5
    jmp   t0
#end .keyboard_handle_input
fn .keyboard_get_input
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 1
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .keyboard_get_input_body_operator_76_opskip
    imov  t2 0
.keyboard_get_input_body_operator_76_opskip
    push! t2
    pop!  t0
    imov  t1 1
    tst   t0
    jz!   .keyboard_get_input_body_operator_77_nottrue
    imov  t1 0
.keyboard_get_input_body_operator_77_nottrue
    push! t1
    pop!  t0
    tst   t0
    jz!   .keyboard_get_input_body_else_79
.keyboard_get_input_body_if_78
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 2
    add   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 31
    push  t0
    pop!  t1 t0
    and   t0 t1
    push! t0
    imov! t0 .variable_alloc_key_buffer
    push! t0
    pop!  t0
    imov! t1 0
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
    jmp!  .keyboard_get_input_body_if_exit_80
.keyboard_get_input_body_else_79
    imov! t0 0
    push  t0
.keyboard_get_input_body_if_exit_80
.keyboard_get_input_exit
    pop   t0 t5
    jmp   t0
#end .keyboard_get_input
fn .get_keyboard_ascii
    imov! t0 .string_alloc_5
    push! t0
    imov! t0 65535
    push  t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
.get_keyboard_ascii_exit
    pop   t0 t5
    jmp   t0
#end .get_keyboard_ascii
fn .pswap
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t0 t1
    pop!  t0 t1 t2
    push! t1 t0 t2
    pop!  t1 t0
    str   t1 t0
    pop!  t0 t1
    push! t0 t1
    pop!  t1 t0
    str   t1 t0
.pswap_exit
    pop   t0 t5
    jmp   t0
#end .pswap
fn .print_dot
    pop!  t0
    tst   t0
    jz!   .print_dot_body_else_91
.print_dot_body_if_90
    imov! t0 16160
    push  t0
    jmp!  .print_dot_body_if_exit_92
.print_dot_body_else_91
    imov! t0 32
    push  t0
.print_dot_body_if_exit_92
    imov! t0 .print_dot_body_retaddr_93
    push  t5 t0
    jmp!  .print_char
.print_dot_body_retaddr_93
.print_dot_exit
    pop   t0 t5
    jmp   t0
#end .print_dot
fn .print_buf
    imov! t0 10
    push  t0
    imov! t0 .print_buf_body_retaddr_94
    push  t5 t0
    jmp!  .print_char
.print_buf_body_retaddr_94
    imov! t0 1
    push  t0
.print_buf_body_while_eval_95
    pop!  t0
    push! t0 t0
    imov! t0 99
    push  t0
    pop!  t1 t0
    imov  t2 0  # default value
    sub   t0 t1
    jp!   .print_buf_body_while_eval_95_operator_98_opskip
    imov  t2 1
.print_buf_body_while_eval_95_operator_98_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .print_buf_body_while_exit_97
.print_buf_body_while_body_96
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .print_buf_body_while_body_96_retaddr_100
    push  t5 t0
    jmp!  .print_dot
.print_buf_body_while_body_96_retaddr_100
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp!  .print_buf_body_while_eval_95
.print_buf_body_while_exit_97
    pop!  t0
    pop!  t0
.print_buf_exit
    pop   t0 t5
    jmp   t0
#end .print_buf
fn .main
    imov! t0 1
    push  t0
    imov! t0 .variable_alloc_buf1
    push! t0
    imov! t0 99
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 .variable_alloc_buf1
    push! t0
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 .variable_alloc_buf2
    push! t0
    imov! t0 .variable_alloc_back_buff
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .main_body_retaddr_103
    push  t5 t0
    jmp!  .print_buf
.main_body_retaddr_103
.main_body_while_eval_104
    imov! t0 1
    push  t0
    pop!  t0
    tst   t0
    jz!   .main_body_while_exit_106
.main_body_while_body_105
    imov! t0 1
    push  t0
.main_body_while_body_105_while_eval_107
    pop!  t0
    push! t0 t0
    imov! t0 99
    push  t0
    pop!  t1 t0
    imov  t2 0  # default value
    sub   t0 t1
    jp!   .main_body_while_body_105_while_eval_107_operator_110_opskip
    imov  t2 1
.main_body_while_body_105_while_eval_107_operator_110_opskip
    push! t2
    pop!  t0
    tst   t0
    jz!   .main_body_while_body_105_while_exit_109
.main_body_while_body_105_while_body_108
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    sub   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    shl   t0 t1
    push! t0
    pop!  t0 t1
    push! t0 t1
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1 t2
    push! t1 t0 t2
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    shl   t0 t1
    push! t0
    pop!  t0 t1
    push! t0 t1
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1
    push! t1 t0 t1
    pop!  t1 t0
    add   t0 t1
    push! t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t0 t1 t2
    push! t1 t0 t2
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t0
    push! t0 t0
    imov! t0 7
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .main_body_while_body_105_while_body_108_operator_121_opskip
    imov  t2 0
.main_body_while_body_105_while_body_108_operator_121_opskip
    push! t2
    pop!  t0 t1
    push! t1 t0 t1
    imov! t0 4
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .main_body_while_body_105_while_body_108_operator_122_opskip
    imov  t2 0
.main_body_while_body_105_while_body_108_operator_122_opskip
    push! t2
    pop!  t1 t0
    imov  t2 1
    tst   t0
    jnz!  .main_body_while_body_105_while_body_108_operator_123_ortrue
    tst   t1
    jnz!  .main_body_while_body_105_while_body_108_operator_123_ortrue
    imov  t2 0
.main_body_while_body_105_while_body_108_operator_123_ortrue
    push! t2
    pop!  t0 t1
    push! t1 t0 t1
    imov! t0 0
    push  t0
    pop!  t1 t0
    imov  t2 1  # default value
    sub   t0 t1
    jz!   .main_body_while_body_105_while_body_108_operator_124_opskip
    imov  t2 0
.main_body_while_body_105_while_body_108_operator_124_opskip
    push! t2
    pop!  t1 t0
    imov  t2 1
    tst   t0
    jnz!  .main_body_while_body_105_while_body_108_operator_125_ortrue
    tst   t1
    jnz!  .main_body_while_body_105_while_body_108_operator_125_ortrue
    imov  t2 0
.main_body_while_body_105_while_body_108_operator_125_ortrue
    push! t2
    pop!  t0
    imov  t1 1
    tst   t0
    jz!   .main_body_while_body_105_while_body_108_operator_126_nottrue
    imov  t1 0
.main_body_while_body_105_while_body_108_operator_126_nottrue
    push! t1
    pop!  t0 t1
    push! t0 t1
    pop!  t0
    pop!  t0 t1
    push! t1 t0 t1
    imov! t0 .variable_alloc_back_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    pop!  t1 t0
    str   t1 t0
    imov! t0 1
    push  t0
    pop!  t1 t0
    add   t0 t1
    push! t0
    jmp!  .main_body_while_body_105_while_eval_107
.main_body_while_body_105_while_exit_109
    pop!  t0
    imov! t0 .variable_alloc_curr_buff
    push! t0
    imov! t0 .variable_alloc_back_buff
    push! t0
    imov! t0 .main_body_while_body_105_retaddr_129
    push  t5 t0
    jmp!  .pswap
.main_body_while_body_105_retaddr_129
    imov! t0 .variable_alloc_curr_buff
    push! t0
    pop!  t0
    load  t0 t0
    push! t0
    imov! t0 .main_body_while_body_105_retaddr_130
    push  t5 t0
    jmp!  .print_buf
.main_body_while_body_105_retaddr_130
    jmp!  .main_body_while_eval_104
.main_body_while_exit_106
.main_exit
    pop   t0 t5
    jmp   t0
#end .main
