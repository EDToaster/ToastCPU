DEPTH = 32768;                -- The size of memory in words
WIDTH = 16;                   -- The size of data in bits
ADDRESS_RADIX = HEX;          -- The radix for address values
DATA_RADIX = HEX;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
0000 : 2C24; -- . imov [imov!   isr .isr]
0001 : 3C00; -- ' imoh
0002 : 2604; -- . imov [imov!   t0 .ret_stack]
0003 : 3680; -- ' imoh
0004 : 2711; -- . imov [imov!   t1 .reset_ret]
0005 : 3700; -- ' imoh
0006 : 1670; --   str     t0 t1
0007 : 9614; --   iadd    t0 1
0008 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0009 : 3080; -- | imoh
000A : 1060; -- ' str
000B : 2012; -- . imov r0 .init_globals  [call!   .init_globals]
000C : 3000; -- | imoh r0 .init_globals
000D : A010; -- ' jmpl
000E : 2017; -- . imov [jmp!    .main]
000F : 300F; -- | imoh
0010 : A000; -- ' j_op
0011 : 7000; --   halt
0012 : 5D60; -- . push [push! t0]
0013 : 2664; -- . imov [imov!  t0 100]
0014 : 3600; -- ' imoh
0015 : 2000; -- . imov [str!   .variable_alloc_text_progress t0]
0016 : 3080; -- | imoh
0017 : 1060; -- ' str
0018 : 2600; -- . imov [imov!  t0 0]
0019 : 3600; -- ' imoh
001A : 2001; -- . imov [str!   .variable_alloc_text_ptr t0]
001B : 3080; -- | imoh
001C : 1060; -- ' str
001D : 26AD; -- . imov [imov!  t0 57005]
001E : 36DE; -- ' imoh
001F : 2002; -- . imov [str!   .variable_alloc_var1 t0]
0020 : 3080; -- | imoh
0021 : 1060; -- ' str
0022 : 66D0; -- . pop [pop! t0]
0023 : A020; --   jmpr
0024 : 5D00; -- Â· push r0 [isr!]
0025 : 60D0; -- . pop r0 [rti!]
0026 : C000; -- ' rti
0027 : 0061; -- 0x61
0028 : 0061; -- 0x61
0029 : 0061; -- 0x61
002A : 0062; -- 0x62
002B : 0000; -- 0x0
002C : 0030; -- 0x30
002D : 0020; -- 0x20
002E : 0021; -- 0x21
002F : 0000; -- 0x0
0030 : 0031; -- 0x31
0031 : 0030; -- 0x30
0032 : 0020; -- 0x20
0033 : 0078; -- 0x78
0034 : 0020; -- 0x20
0035 : 0030; -- 0x30
0036 : 0000; -- 0x0
0037 : 0020; -- 0x20
0038 : 0020; -- 0x20
0039 : 0020; -- 0x20
003A : 0020; -- 0x20
003B : 0020; -- 0x20
003C : 0020; -- 0x20
003D : 0020; -- 0x20
003E : 0020; -- 0x20
003F : 0020; -- 0x20
0040 : 0020; -- 0x20
0041 : 0020; -- 0x20
0042 : 0020; -- 0x20
0043 : 0020; -- 0x20
0044 : 0020; -- 0x20
0045 : 0060; -- 0x60
0046 : 0020; -- 0x20
0047 : 0020; -- 0x20
0048 : 0020; -- 0x20
0049 : 0020; -- 0x20
004A : 0020; -- 0x20
004B : 0020; -- 0x20
004C : 0071; -- 0x71
004D : 0031; -- 0x31
004E : 0020; -- 0x20
004F : 0020; -- 0x20
0050 : 0020; -- 0x20
0051 : 007A; -- 0x7A
0052 : 0073; -- 0x73
0053 : 0061; -- 0x61
0054 : 0077; -- 0x77
0055 : 0032; -- 0x32
0056 : 0020; -- 0x20
0057 : 0020; -- 0x20
0058 : 0063; -- 0x63
0059 : 0078; -- 0x78
005A : 0064; -- 0x64
005B : 0065; -- 0x65
005C : 0034; -- 0x34
005D : 0033; -- 0x33
005E : 0020; -- 0x20
005F : 0020; -- 0x20
0060 : 0020; -- 0x20
0061 : 0076; -- 0x76
0062 : 0066; -- 0x66
0063 : 0074; -- 0x74
0064 : 0072; -- 0x72
0065 : 0035; -- 0x35
0066 : 0020; -- 0x20
0067 : 0020; -- 0x20
0068 : 006E; -- 0x6E
0069 : 0062; -- 0x62
006A : 0068; -- 0x68
006B : 0067; -- 0x67
006C : 0079; -- 0x79
006D : 0036; -- 0x36
006E : 0020; -- 0x20
006F : 0020; -- 0x20
0070 : 0020; -- 0x20
0071 : 006D; -- 0x6D
0072 : 006A; -- 0x6A
0073 : 0075; -- 0x75
0074 : 0037; -- 0x37
0075 : 0038; -- 0x38
0076 : 0020; -- 0x20
0077 : 0020; -- 0x20
0078 : 002C; -- 0x2C
0079 : 006B; -- 0x6B
007A : 0069; -- 0x69
007B : 006F; -- 0x6F
007C : 0030; -- 0x30
007D : 0039; -- 0x39
007E : 0020; -- 0x20
007F : 0020; -- 0x20
0080 : 002E; -- 0x2E
0081 : 002F; -- 0x2F
0082 : 006C; -- 0x6C
0083 : 003B; -- 0x3B
0084 : 0070; -- 0x70
0085 : 002D; -- 0x2D
0086 : 0020; -- 0x20
0087 : 0020; -- 0x20
0088 : 0020; -- 0x20
0089 : 0020; -- 0x20
008A : 0020; -- 0x20
008B : 005B; -- 0x5B
008C : 003D; -- 0x3D
008D : 0020; -- 0x20
008E : 0020; -- 0x20
008F : 0020; -- 0x20
0090 : 0020; -- 0x20
0091 : 000A; -- 0xA
0092 : 005D; -- 0x5D
0093 : 0020; -- 0x20
0094 : 005C; -- 0x5C
0095 : 0020; -- 0x20
0096 : 0020; -- 0x20
0097 : 0020; -- 0x20
0098 : 0020; -- 0x20
0099 : 0020; -- 0x20
009A : 0020; -- 0x20
009B : 0020; -- 0x20
009C : 0020; -- 0x20
009D : 0020; -- 0x20
009E : 0020; -- 0x20
009F : 0020; -- 0x20
00A0 : 0020; -- 0x20
00A1 : 0020; -- 0x20
00A2 : 0020; -- 0x20
00A3 : 0020; -- 0x20
00A4 : 0020; -- 0x20
00A5 : 0020; -- 0x20
00A6 : 0020; -- 0x20
00A7 : 0020; -- 0x20
00A8 : 0020; -- 0x20
00A9 : 0020; -- 0x20
00AA : 0020; -- 0x20
00AB : 0020; -- 0x20
00AC : 0020; -- 0x20
00AD : 0020; -- 0x20
00AE : 0020; -- 0x20
00AF : 0020; -- 0x20
00B0 : 0020; -- 0x20
00B1 : 0020; -- 0x20
00B2 : 0020; -- 0x20
00B3 : 0020; -- 0x20
00B4 : 0020; -- 0x20
00B5 : 0020; -- 0x20
00B6 : 0020; -- 0x20
00B7 : 0020; -- 0x20
00B8 : 0020; -- 0x20
00B9 : 0020; -- 0x20
00BA : 0020; -- 0x20
00BB : 0020; -- 0x20
00BC : 0020; -- 0x20
00BD : 0020; -- 0x20
00BE : 0020; -- 0x20
00BF : 0020; -- 0x20
00C0 : 0020; -- 0x20
00C1 : 0020; -- 0x20
00C2 : 0020; -- 0x20
00C3 : 0020; -- 0x20
00C4 : 0020; -- 0x20
00C5 : 0020; -- 0x20
00C6 : 0020; -- 0x20
00C7 : 0020; -- 0x20
00C8 : 0020; -- 0x20
00C9 : 0020; -- 0x20
00CA : 0020; -- 0x20
00CB : 0020; -- 0x20
00CC : 0020; -- 0x20
00CD : 0020; -- 0x20
00CE : 0020; -- 0x20
00CF : 0020; -- 0x20
00D0 : 0020; -- 0x20
00D1 : 0020; -- 0x20
00D2 : 0020; -- 0x20
00D3 : 0020; -- 0x20
00D4 : 0020; -- 0x20
00D5 : 0020; -- 0x20
00D6 : 0020; -- 0x20
00D7 : 0020; -- 0x20
00D8 : 0020; -- 0x20
00D9 : 0020; -- 0x20
00DA : 0020; -- 0x20
00DB : 0020; -- 0x20
00DC : 0020; -- 0x20
00DD : 0020; -- 0x20
00DE : 0020; -- 0x20
00DF : 0020; -- 0x20
00E0 : 0020; -- 0x20
00E1 : 0020; -- 0x20
00E2 : 0020; -- 0x20
00E3 : 0020; -- 0x20
00E4 : 0020; -- 0x20
00E5 : 0020; -- 0x20
00E6 : 0020; -- 0x20
00E7 : 0020; -- 0x20
00E8 : 0020; -- 0x20
00E9 : 0020; -- 0x20
00EA : 0020; -- 0x20
00EB : 0020; -- 0x20
00EC : 0020; -- 0x20
00ED : 0020; -- 0x20
00EE : 0020; -- 0x20
00EF : 0020; -- 0x20
00F0 : 0020; -- 0x20
00F1 : 0020; -- 0x20
00F2 : 0020; -- 0x20
00F3 : 0020; -- 0x20
00F4 : 0020; -- 0x20
00F5 : 0020; -- 0x20
00F6 : 0020; -- 0x20
00F7 : 0020; -- 0x20
00F8 : 0020; -- 0x20
00F9 : 0020; -- 0x20
00FA : 0020; -- 0x20
00FB : 0020; -- 0x20
00FC : 0020; -- 0x20
00FD : 0020; -- 0x20
00FE : 0020; -- 0x20
00FF : 0020; -- 0x20
0100 : 0020; -- 0x20
0101 : 0020; -- 0x20
0102 : 0020; -- 0x20
0103 : 0020; -- 0x20
0104 : 0020; -- 0x20
0105 : 0020; -- 0x20
0106 : 0020; -- 0x20
0107 : 0020; -- 0x20
0108 : 0020; -- 0x20
0109 : 0020; -- 0x20
010A : 0020; -- 0x20
010B : 0020; -- 0x20
010C : 0020; -- 0x20
010D : 0020; -- 0x20
010E : 0020; -- 0x20
010F : 0020; -- 0x20
0110 : 0020; -- 0x20
0111 : 0020; -- 0x20
0112 : 0020; -- 0x20
0113 : 0020; -- 0x20
0114 : 0020; -- 0x20
0115 : 0020; -- 0x20
0116 : 0020; -- 0x20
0117 : 0020; -- 0x20
0118 : 0020; -- 0x20
0119 : 0020; -- 0x20
011A : 0020; -- 0x20
011B : 0020; -- 0x20
011C : 0020; -- 0x20
011D : 0020; -- 0x20
011E : 0020; -- 0x20
011F : 0020; -- 0x20
0120 : 0020; -- 0x20
0121 : 0020; -- 0x20
0122 : 0020; -- 0x20
0123 : 0020; -- 0x20
0124 : 0020; -- 0x20
0125 : 0020; -- 0x20
0126 : 0020; -- 0x20
0127 : 0020; -- 0x20
0128 : 0020; -- 0x20
0129 : 0020; -- 0x20
012A : 0020; -- 0x20
012B : 0020; -- 0x20
012C : 0020; -- 0x20
012D : 0020; -- 0x20
012E : 0020; -- 0x20
012F : 0020; -- 0x20
0130 : 0020; -- 0x20
0131 : 0020; -- 0x20
0132 : 0020; -- 0x20
0133 : 0020; -- 0x20
0134 : 0020; -- 0x20
0135 : 0020; -- 0x20
0136 : 0020; -- 0x20
0137 : 0000; -- 0x0
0138 : 0037; -- 0x37
0139 : 0020; -- 0x20
013A : 003C; -- 0x3C
013B : 003D; -- 0x3D
013C : 0020; -- 0x20
013D : 0037; -- 0x37
013E : 0000; -- 0x0
013F : 0030; -- 0x30
0140 : 0020; -- 0x20
0141 : 0078; -- 0x78
0142 : 0020; -- 0x20
0143 : 0031; -- 0x31
0144 : 0030; -- 0x30
0145 : 0000; -- 0x0
0146 : 0031; -- 0x31
0147 : 0020; -- 0x20
0148 : 0078; -- 0x78
0149 : 0020; -- 0x20
014A : 0032; -- 0x32
014B : 0000; -- 0x0
014C : 0037; -- 0x37
014D : 0020; -- 0x20
014E : 003D; -- 0x3D
014F : 0020; -- 0x20
0150 : 0037; -- 0x37
0151 : 0000; -- 0x0
0152 : 0061; -- 0x61
0153 : 0031; -- 0x31
0154 : 0000; -- 0x0
0155 : 0036; -- 0x36
0156 : 0020; -- 0x20
0157 : 003D; -- 0x3D
0158 : 0020; -- 0x20
0159 : 0037; -- 0x37
015A : 0000; -- 0x0
015B : 0054; -- 0x54
015C : 0065; -- 0x65
015D : 0073; -- 0x73
015E : 0074; -- 0x74
015F : 0069; -- 0x69
0160 : 006E; -- 0x6E
0161 : 0067; -- 0x67
0162 : 0020; -- 0x20
0163 : 0067; -- 0x67
0164 : 006C; -- 0x6C
0165 : 006F; -- 0x6F
0166 : 0062; -- 0x62
0167 : 0061; -- 0x61
0168 : 006C; -- 0x6C
0169 : 0020; -- 0x20
016A : 0076; -- 0x76
016B : 0061; -- 0x61
016C : 0072; -- 0x72
016D : 0073; -- 0x73
016E : 000A; -- 0xA
016F : 0000; -- 0x0
0170 : 0037; -- 0x37
0171 : 0020; -- 0x20
0172 : 003C; -- 0x3C
0173 : 0020; -- 0x20
0174 : 0037; -- 0x37
0175 : 0000; -- 0x0
0176 : 0036; -- 0x36
0177 : 0020; -- 0x20
0178 : 003C; -- 0x3C
0179 : 0020; -- 0x20
017A : 0037; -- 0x37
017B : 0000; -- 0x0
017C : 0062; -- 0x62
017D : 0031; -- 0x31
017E : 0000; -- 0x0
017F : 0000; -- 0x0
0180 : 0076; -- 0x76
0181 : 0061; -- 0x61
0182 : 0072; -- 0x72
0183 : 0031; -- 0x31
0184 : 0020; -- 0x20
0185 : 003D; -- 0x3D
0186 : 003D; -- 0x3D
0187 : 0020; -- 0x20
0188 : 0030; -- 0x30
0189 : 0078; -- 0x78
018A : 0044; -- 0x44
018B : 0045; -- 0x45
018C : 0041; -- 0x41
018D : 0044; -- 0x44
018E : 0000; -- 0x0
018F : 0031; -- 0x31
0190 : 0020; -- 0x20
0191 : 007C; -- 0x7C
0192 : 007C; -- 0x7C
0193 : 0020; -- 0x20
0194 : 0030; -- 0x30
0195 : 0000; -- 0x0
0196 : 0041; -- 0x41
0197 : 0073; -- 0x73
0198 : 0073; -- 0x73
0199 : 0065; -- 0x65
019A : 0072; -- 0x72
019B : 0074; -- 0x74
019C : 0020; -- 0x20
019D : 0046; -- 0x46
019E : 0061; -- 0x61
019F : 0069; -- 0x69
01A0 : 006C; -- 0x6C
01A1 : 0065; -- 0x65
01A2 : 0064; -- 0x64
01A3 : 000A; -- 0xA
01A4 : 0000; -- 0x0
01A5 : 0054; -- 0x54
01A6 : 0065; -- 0x65
01A7 : 0073; -- 0x73
01A8 : 0074; -- 0x74
01A9 : 0069; -- 0x69
01AA : 006E; -- 0x6E
01AB : 0067; -- 0x67
01AC : 0020; -- 0x20
01AD : 006C; -- 0x6C
01AE : 0065; -- 0x65
01AF : 0074; -- 0x74
01B0 : 000A; -- 0xA
01B1 : 0000; -- 0x0
01B2 : 0063; -- 0x63
01B3 : 0032; -- 0x32
01B4 : 0000; -- 0x0
01B5 : 0030; -- 0x30
01B6 : 0020; -- 0x20
01B7 : 007C; -- 0x7C
01B8 : 007C; -- 0x7C
01B9 : 0020; -- 0x20
01BA : 0030; -- 0x30
01BB : 0000; -- 0x0
01BC : 0061; -- 0x61
01BD : 0032; -- 0x32
01BE : 0000; -- 0x0
01BF : 0031; -- 0x31
01C0 : 0020; -- 0x20
01C1 : 0021; -- 0x21
01C2 : 0000; -- 0x0
01C3 : 0054; -- 0x54
01C4 : 0065; -- 0x65
01C5 : 0073; -- 0x73
01C6 : 0074; -- 0x74
01C7 : 0069; -- 0x69
01C8 : 006E; -- 0x6E
01C9 : 0067; -- 0x67
01CA : 0020; -- 0x20
01CB : 0073; -- 0x73
01CC : 0074; -- 0x74
01CD : 0072; -- 0x72
01CE : 006C; -- 0x6C
01CF : 0065; -- 0x65
01D0 : 006E; -- 0x6E
01D1 : 000A; -- 0xA
01D2 : 0000; -- 0x0
01D3 : 0054; -- 0x54
01D4 : 0065; -- 0x65
01D5 : 0073; -- 0x73
01D6 : 0074; -- 0x74
01D7 : 0069; -- 0x69
01D8 : 006E; -- 0x6E
01D9 : 0067; -- 0x67
01DA : 0020; -- 0x20
01DB : 0053; -- 0x53
01DC : 0075; -- 0x75
01DD : 006D; -- 0x6D
01DE : 000A; -- 0xA
01DF : 0000; -- 0x0
01E0 : 0061; -- 0x61
01E1 : 0061; -- 0x61
01E2 : 0061; -- 0x61
01E3 : 0000; -- 0x0
01E4 : 0036; -- 0x36
01E5 : 0020; -- 0x20
01E6 : 003C; -- 0x3C
01E7 : 003D; -- 0x3D
01E8 : 0020; -- 0x20
01E9 : 0037; -- 0x37
01EA : 0000; -- 0x0
01EB : 0054; -- 0x54
01EC : 0065; -- 0x65
01ED : 0073; -- 0x73
01EE : 0074; -- 0x74
01EF : 0069; -- 0x69
01F0 : 006E; -- 0x6E
01F1 : 0067; -- 0x67
01F2 : 0020; -- 0x20
01F3 : 004C; -- 0x4C
01F4 : 006F; -- 0x6F
01F5 : 0067; -- 0x67
01F6 : 0069; -- 0x69
01F7 : 0063; -- 0x63
01F8 : 0061; -- 0x61
01F9 : 006C; -- 0x6C
01FA : 000A; -- 0xA
01FB : 0000; -- 0x0
01FC : 0031; -- 0x31
01FD : 0031; -- 0x31
01FE : 0000; -- 0x0
01FF : 0062; -- 0x62
0200 : 0032; -- 0x32
0201 : 0000; -- 0x0
0202 : 0031; -- 0x31
0203 : 0020; -- 0x20
0204 : 0026; -- 0x26
0205 : 0026; -- 0x26
0206 : 0020; -- 0x20
0207 : 0031; -- 0x31
0208 : 0000; -- 0x0
0209 : 0032; -- 0x32
020A : 0020; -- 0x20
020B : 0078; -- 0x78
020C : 0020; -- 0x20
020D : 0035; -- 0x35
020E : 0000; -- 0x0
020F : 0038; -- 0x38
0210 : 0020; -- 0x20
0211 : 003E; -- 0x3E
0212 : 0020; -- 0x20
0213 : 0037; -- 0x37
0214 : 0000; -- 0x0
0215 : 0037; -- 0x37
0216 : 0020; -- 0x20
0217 : 003E; -- 0x3E
0218 : 0020; -- 0x20
0219 : 0037; -- 0x37
021A : 0000; -- 0x0
021B : 0050; -- 0x50
021C : 0061; -- 0x61
021D : 0073; -- 0x73
021E : 0073; -- 0x73
021F : 0065; -- 0x65
0220 : 0064; -- 0x64
0221 : 0020; -- 0x20
0222 : 0041; -- 0x41
0223 : 006C; -- 0x6C
0224 : 006C; -- 0x6C
0225 : 0020; -- 0x20
0226 : 0054; -- 0x54
0227 : 0065; -- 0x65
0228 : 0073; -- 0x73
0229 : 0074; -- 0x74
022A : 0020; -- 0x20
022B : 0043; -- 0x43
022C : 0061; -- 0x61
022D : 0073; -- 0x73
022E : 0065; -- 0x65
022F : 0073; -- 0x73
0230 : 0021; -- 0x21
0231 : 0000; -- 0x0
0232 : 0073; -- 0x73
0233 : 0074; -- 0x74
0234 : 0072; -- 0x72
0235 : 0065; -- 0x65
0236 : 0071; -- 0x71
0237 : 0028; -- 0x28
0238 : 0022; -- 0x22
0239 : 0061; -- 0x61
023A : 0022; -- 0x22
023B : 002C; -- 0x2C
023C : 0020; -- 0x20
023D : 0022; -- 0x22
023E : 0061; -- 0x61
023F : 0022; -- 0x22
0240 : 002C; -- 0x2C
0241 : 0020; -- 0x20
0242 : 0031; -- 0x31
0243 : 0029; -- 0x29
0244 : 0000; -- 0x0
0245 : 0054; -- 0x54
0246 : 0065; -- 0x65
0247 : 0073; -- 0x73
0248 : 0074; -- 0x74
0249 : 0069; -- 0x69
024A : 006E; -- 0x6E
024B : 0067; -- 0x67
024C : 0020; -- 0x20
024D : 0041; -- 0x41
024E : 0072; -- 0x72
024F : 0069; -- 0x69
0250 : 0074; -- 0x74
0251 : 0068; -- 0x68
0252 : 000A; -- 0xA
0253 : 0000; -- 0x0
0254 : 0073; -- 0x73
0255 : 0074; -- 0x74
0256 : 0072; -- 0x72
0257 : 0065; -- 0x65
0258 : 0071; -- 0x71
0259 : 0028; -- 0x28
025A : 0022; -- 0x22
025B : 0061; -- 0x61
025C : 0022; -- 0x22
025D : 002C; -- 0x2C
025E : 0020; -- 0x20
025F : 0022; -- 0x22
0260 : 0022; -- 0x22
0261 : 002C; -- 0x2C
0262 : 0020; -- 0x20
0263 : 0030; -- 0x30
0264 : 0029; -- 0x29
0265 : 0000; -- 0x0
0266 : 0054; -- 0x54
0267 : 0065; -- 0x65
0268 : 0073; -- 0x73
0269 : 0074; -- 0x74
026A : 0069; -- 0x69
026B : 006E; -- 0x6E
026C : 0067; -- 0x67
026D : 0020; -- 0x20
026E : 006D; -- 0x6D
026F : 0075; -- 0x75
0270 : 006C; -- 0x6C
0271 : 000A; -- 0xA
0272 : 0000; -- 0x0
0273 : 0037; -- 0x37
0274 : 0020; -- 0x20
0275 : 003E; -- 0x3E
0276 : 003D; -- 0x3D
0277 : 0020; -- 0x20
0278 : 0037; -- 0x37
0279 : 0000; -- 0x0
027A : 0061; -- 0x61
027B : 0000; -- 0x0
027C : 0061; -- 0x61
027D : 0062; -- 0x62
027E : 0063; -- 0x63
027F : 0064; -- 0x64
0280 : 0000; -- 0x0
0281 : 0036; -- 0x36
0282 : 0020; -- 0x20
0283 : 003E; -- 0x3E
0284 : 0020; -- 0x20
0285 : 0037; -- 0x37
0286 : 0000; -- 0x0
0287 : 0073; -- 0x73
0288 : 0074; -- 0x74
0289 : 0072; -- 0x72
028A : 0065; -- 0x65
028B : 0071; -- 0x71
028C : 0028; -- 0x28
028D : 0022; -- 0x22
028E : 0022; -- 0x22
028F : 002C; -- 0x2C
0290 : 0020; -- 0x20
0291 : 0022; -- 0x22
0292 : 0022; -- 0x22
0293 : 002C; -- 0x2C
0294 : 0020; -- 0x20
0295 : 0030; -- 0x30
0296 : 0029; -- 0x29
0297 : 0000; -- 0x0
0298 : 0038; -- 0x38
0299 : 0020; -- 0x20
029A : 003C; -- 0x3C
029B : 003D; -- 0x3D
029C : 0020; -- 0x20
029D : 0037; -- 0x37
029E : 0000; -- 0x0
029F : 0062; -- 0x62
02A0 : 0000; -- 0x0
02A1 : 0073; -- 0x73
02A2 : 0074; -- 0x74
02A3 : 0072; -- 0x72
02A4 : 0065; -- 0x65
02A5 : 0071; -- 0x71
02A6 : 0028; -- 0x28
02A7 : 0022; -- 0x22
02A8 : 0061; -- 0x61
02A9 : 0061; -- 0x61
02AA : 0061; -- 0x61
02AB : 0022; -- 0x22
02AC : 002C; -- 0x2C
02AD : 0020; -- 0x20
02AE : 0022; -- 0x22
02AF : 0061; -- 0x61
02B0 : 0061; -- 0x61
02B1 : 0061; -- 0x61
02B2 : 0062; -- 0x62
02B3 : 0022; -- 0x22
02B4 : 002C; -- 0x2C
02B5 : 0020; -- 0x20
02B6 : 0033; -- 0x33
02B7 : 0029; -- 0x29
02B8 : 0000; -- 0x0
02B9 : 0048; -- 0x48
02BA : 0065; -- 0x65
02BB : 006C; -- 0x6C
02BC : 006C; -- 0x6C
02BD : 006F; -- 0x6F
02BE : 0020; -- 0x20
02BF : 0066; -- 0x66
02C0 : 0072; -- 0x72
02C1 : 006F; -- 0x6F
02C2 : 006D; -- 0x6D
02C3 : 0020; -- 0x20
02C4 : 0054; -- 0x54
02C5 : 006F; -- 0x6F
02C6 : 0061; -- 0x61
02C7 : 0073; -- 0x73
02C8 : 0074; -- 0x74
02C9 : 004C; -- 0x4C
02CA : 0061; -- 0x61
02CB : 006E; -- 0x6E
02CC : 0067; -- 0x67
02CD : 0021; -- 0x21
02CE : 000A; -- 0xA
02CF : 0000; -- 0x0
02D0 : 0038; -- 0x38
02D1 : 0020; -- 0x20
02D2 : 003E; -- 0x3E
02D3 : 003D; -- 0x3D
02D4 : 0020; -- 0x20
02D5 : 0037; -- 0x37
02D6 : 0000; -- 0x0
02D7 : 0038; -- 0x38
02D8 : 0020; -- 0x20
02D9 : 003C; -- 0x3C
02DA : 0020; -- 0x20
02DB : 0037; -- 0x37
02DC : 0000; -- 0x0
02DD : 0061; -- 0x61
02DE : 0061; -- 0x61
02DF : 0061; -- 0x61
02E0 : 0061; -- 0x61
02E1 : 0000; -- 0x0
02E2 : 0030; -- 0x30
02E3 : 0020; -- 0x20
02E4 : 0026; -- 0x26
02E5 : 0026; -- 0x26
02E6 : 0020; -- 0x20
02E7 : 0031; -- 0x31
02E8 : 0000; -- 0x0
02E9 : 0054; -- 0x54
02EA : 0065; -- 0x65
02EB : 0073; -- 0x73
02EC : 0074; -- 0x74
02ED : 0069; -- 0x69
02EE : 006E; -- 0x6E
02EF : 0067; -- 0x67
02F0 : 0020; -- 0x20
02F1 : 0073; -- 0x73
02F2 : 0074; -- 0x74
02F3 : 0072; -- 0x72
02F4 : 0065; -- 0x65
02F5 : 0071; -- 0x71
02F6 : 000A; -- 0xA
02F7 : 0000; -- 0x0
02F8 : 0073; -- 0x73
02F9 : 0074; -- 0x74
02FA : 0072; -- 0x72
02FB : 006C; -- 0x6C
02FC : 0065; -- 0x65
02FD : 006E; -- 0x6E
02FE : 0028; -- 0x28
02FF : 0022; -- 0x22
0300 : 0022; -- 0x22
0301 : 0029; -- 0x29
0302 : 0000; -- 0x0
0303 : 0076; -- 0x76
0304 : 0061; -- 0x61
0305 : 0072; -- 0x72
0306 : 0031; -- 0x31
0307 : 0020; -- 0x20
0308 : 003D; -- 0x3D
0309 : 0020; -- 0x20
030A : 0031; -- 0x31
030B : 0030; -- 0x30
030C : 0000; -- 0x0
030D : 0073; -- 0x73
030E : 0075; -- 0x75
030F : 006D; -- 0x6D
0310 : 0028; -- 0x28
0311 : 0037; -- 0x37
0312 : 0029; -- 0x29
0313 : 0020; -- 0x20
0314 : 003D; -- 0x3D
0315 : 003D; -- 0x3D
0316 : 0020; -- 0x20
0317 : 0032; -- 0x32
0318 : 0031; -- 0x31
0319 : 0000; -- 0x0
031A : 0073; -- 0x73
031B : 0075; -- 0x75
031C : 006D; -- 0x6D
031D : 0028; -- 0x28
031E : 0032; -- 0x32
031F : 0032; -- 0x32
0320 : 0029; -- 0x29
0321 : 0020; -- 0x20
0322 : 003D; -- 0x3D
0323 : 003D; -- 0x3D
0324 : 0020; -- 0x20
0325 : 0032; -- 0x32
0326 : 0035; -- 0x35
0327 : 0033; -- 0x33
0328 : 0000; -- 0x0
0329 : 0073; -- 0x73
032A : 0074; -- 0x74
032B : 0072; -- 0x72
032C : 0065; -- 0x65
032D : 0071; -- 0x71
032E : 0028; -- 0x28
032F : 0022; -- 0x22
0330 : 0061; -- 0x61
0331 : 0061; -- 0x61
0332 : 0061; -- 0x61
0333 : 0022; -- 0x22
0334 : 002C; -- 0x2C
0335 : 0020; -- 0x20
0336 : 0022; -- 0x22
0337 : 0061; -- 0x61
0338 : 0061; -- 0x61
0339 : 0061; -- 0x61
033A : 0062; -- 0x62
033B : 0022; -- 0x22
033C : 002C; -- 0x2C
033D : 0020; -- 0x20
033E : 0034; -- 0x34
033F : 0029; -- 0x29
0340 : 0000; -- 0x0
0341 : 0036; -- 0x36
0342 : 0020; -- 0x20
0343 : 003E; -- 0x3E
0344 : 003D; -- 0x3D
0345 : 0020; -- 0x20
0346 : 0037; -- 0x37
0347 : 0000; -- 0x0
0348 : 0073; -- 0x73
0349 : 0074; -- 0x74
034A : 0072; -- 0x72
034B : 006C; -- 0x6C
034C : 0065; -- 0x65
034D : 006E; -- 0x6E
034E : 0028; -- 0x28
034F : 0022; -- 0x22
0350 : 0061; -- 0x61
0351 : 0062; -- 0x62
0352 : 0063; -- 0x63
0353 : 0064; -- 0x64
0354 : 0022; -- 0x22
0355 : 0029; -- 0x29
0356 : 0000; -- 0x0
0357 : 0073; -- 0x73
0358 : 0074; -- 0x74
0359 : 0072; -- 0x72
035A : 0065; -- 0x65
035B : 0071; -- 0x71
035C : 0028; -- 0x28
035D : 0022; -- 0x22
035E : 0061; -- 0x61
035F : 0022; -- 0x22
0360 : 002C; -- 0x2C
0361 : 0020; -- 0x20
0362 : 0022; -- 0x22
0363 : 0062; -- 0x62
0364 : 0022; -- 0x22
0365 : 002C; -- 0x2C
0366 : 0020; -- 0x20
0367 : 0031; -- 0x31
0368 : 0029; -- 0x29
0369 : 0000; -- 0x0
036A : 66D0; -- . pop [pop! t0]
036B : 5D60; -- . push [push! t0 t0]
036C : 5D60; -- ' push
036D : 260A; -- . imov [imov! t0 10]
036E : 3600; -- ' imoh
036F : 5D60; --   push t0
0370 : 67D0; -- . pop [pop! t1 t0]
0371 : 66D0; -- ' pop
0372 : 2801; --   imov t2 1  # default value
0373 : 8675; --   sub  t0 t1
0374 : 2078; -- . imov [jz!  .print_char_body_0_operator_opskip]
0375 : 3003; -- | imoh
0376 : A001; -- ' j_op
0377 : 2800; --   imov t2 0
0378 : 5D80; -- . push [push! t2]
0379 : 66D0; -- . pop [pop! t0]
037A : 9607; --   tst  t0
037B : 20A1; -- . imov [jz!  .print_char_body_1_else]
037C : 3003; -- | imoh
037D : A001; -- ' j_op
037E : 66D0; -- . pop [pop! t0]
037F : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
0380 : 3680; -- ' imoh
0381 : 5D60; -- . push [push! t0]
0382 : 66D0; -- . pop [pop! t0]
0383 : 0660; --   load t0 t0
0384 : 5D60; -- . push [push! t0]
0385 : 2600; -- . imov [imov! t0 .variable_alloc_text_progress]
0386 : 3680; -- ' imoh
0387 : 5D60; -- . push [push! t0]
0388 : 66D0; -- . pop [pop! t0]
0389 : 0660; --   load t0 t0
038A : 5D60; -- . push [push! t0]
038B : 67D0; -- . pop [pop!  t1 t0]
038C : 66D0; -- ' pop
038D : 8674; --   add   t0 t1
038E : 5D60; -- . push [push! t0]
038F : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
0390 : 3680; -- ' imoh
0391 : 5D60; -- . push [push! t0]
0392 : 67D0; -- . pop [pop! t1 t0]
0393 : 66D0; -- ' pop
0394 : 1760; --   str  t1 t0
0395 : 2664; -- . imov [imov! t0 100]
0396 : 3600; -- ' imoh
0397 : 5D60; --   push t0
0398 : 2600; -- . imov [imov! t0 .variable_alloc_text_progress]
0399 : 3680; -- ' imoh
039A : 5D60; -- . push [push! t0]
039B : 67D0; -- . pop [pop! t1 t0]
039C : 66D0; -- ' pop
039D : 1760; --   str  t1 t0
039E : 20F5; -- . imov [jmp! .print_char_body_1_if_exit]
039F : 3003; -- | imoh
03A0 : A000; -- ' j_op
03A1 : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
03A2 : 3680; -- ' imoh
03A3 : 5D60; -- . push [push! t0]
03A4 : 66D0; -- . pop [pop! t0]
03A5 : 0660; --   load t0 t0
03A6 : 5D60; -- . push [push! t0]
03A7 : 66D0; -- . pop [pop! t0 t1]
03A8 : 67D0; -- ' pop
03A9 : 5D60; -- . push [push! t0 t1]
03AA : 5D70; -- ' push
03AB : 2600; -- . imov [imov! t0 14336]
03AC : 3638; -- ' imoh
03AD : 5D60; --   push t0
03AE : 67D0; -- . pop [pop!  t1 t0]
03AF : 66D0; -- ' pop
03B0 : 8672; --   or    t0 t1
03B1 : 5D60; -- . push [push! t0]
03B2 : 66D0; -- . pop [pop! t0 t1]
03B3 : 67D0; -- ' pop
03B4 : 5D70; -- . push [push! t1 t0 t1]
03B5 : 5D60; -- | push
03B6 : 5D70; -- ' push
03B7 : 67D0; -- . pop [pop! t1 t0]
03B8 : 66D0; -- ' pop
03B9 : 1760; --   str  t1 t0
03BA : 2601; -- . imov [imov! t0 1]
03BB : 3600; -- ' imoh
03BC : 5D60; --   push t0
03BD : 67D0; -- . pop [pop!  t1 t0]
03BE : 66D0; -- ' pop
03BF : 8674; --   add   t0 t1
03C0 : 5D60; -- . push [push! t0]
03C1 : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
03C2 : 3680; -- ' imoh
03C3 : 5D60; -- . push [push! t0]
03C4 : 67D0; -- . pop [pop! t1 t0]
03C5 : 66D0; -- ' pop
03C6 : 1760; --   str  t1 t0
03C7 : 2600; -- . imov [imov! t0 .variable_alloc_text_progress]
03C8 : 3680; -- ' imoh
03C9 : 5D60; -- . push [push! t0]
03CA : 66D0; -- . pop [pop! t0]
03CB : 0660; --   load t0 t0
03CC : 5D60; -- . push [push! t0]
03CD : 2601; -- . imov [imov! t0 1]
03CE : 3600; -- ' imoh
03CF : 5D60; --   push t0
03D0 : 67D0; -- . pop [pop!  t1 t0]
03D1 : 66D0; -- ' pop
03D2 : 8675; --   sub   t0 t1
03D3 : 5D60; -- . push [push! t0]
03D4 : 66D0; -- . pop [pop! t0]
03D5 : 5D60; -- . push [push! t0 t0]
03D6 : 5D60; -- ' push
03D7 : 2600; -- . imov [imov! t0 0]
03D8 : 3600; -- ' imoh
03D9 : 5D60; --   push t0
03DA : 67D0; -- . pop [pop! t1 t0]
03DB : 66D0; -- ' pop
03DC : 2801; --   imov t2 1  # default value
03DD : 8675; --   sub  t0 t1
03DE : 20E2; -- . imov [jz!  .print_char_body_1_else_3_operator_opskip]
03DF : 3003; -- | imoh
03E0 : A001; -- ' j_op
03E1 : 2800; --   imov t2 0
03E2 : 5D80; -- . push [push! t2]
03E3 : 66D0; -- . pop [pop! t0]
03E4 : 9607; --   tst  t0
03E5 : 20EF; -- . imov [jz!  .print_char_body_1_else_4_else]
03E6 : 3003; -- | imoh
03E7 : A001; -- ' j_op
03E8 : 66D0; -- . pop [pop! t0]
03E9 : 2664; -- . imov [imov! t0 100]
03EA : 3600; -- ' imoh
03EB : 5D60; --   push t0
03EC : 20EF; -- . imov [jmp! .print_char_body_1_else_4_if_exit]
03ED : 3003; -- | imoh
03EE : A000; -- ' j_op
03EF : 2600; -- . imov [imov! t0 .variable_alloc_text_progress]
03F0 : 3680; -- ' imoh
03F1 : 5D60; -- . push [push! t0]
03F2 : 67D0; -- . pop [pop! t1 t0]
03F3 : 66D0; -- ' pop
03F4 : 1760; --   str  t1 t0
03F5 : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
03F6 : 3680; -- ' imoh
03F7 : 5D60; -- . push [push! t0]
03F8 : 66D0; -- . pop [pop! t0]
03F9 : 0660; --   load t0 t0
03FA : 5D60; -- . push [push! t0]
03FB : 2670; -- . imov [imov! t0 6000]
03FC : 3617; -- ' imoh
03FD : 5D60; --   push t0
03FE : 67D0; -- . pop [pop! t1 t0]
03FF : 66D0; -- ' pop
0400 : 2800; --   imov t2 0  # default value
0401 : 8675; --   sub  t0 t1
0402 : 2006; -- . imov [jn!  .print_char_body_3_operator_opskip]
0403 : 3004; -- | imoh
0404 : A003; -- ' j_op
0405 : 2801; --   imov t2 1
0406 : 5D80; -- . push [push! t2]
0407 : 66D0; -- . pop [pop! t0]
0408 : 9607; --   tst  t0
0409 : 2022; -- . imov [jz!  .print_char_body_4_else]
040A : 3004; -- | imoh
040B : A001; -- ' j_op
040C : 7000; --   halt
040D : 2600; -- . imov [imov! t0 0]
040E : 3600; -- ' imoh
040F : 5D60; --   push t0
0410 : 2601; -- . imov [imov! t0 .variable_alloc_text_ptr]
0411 : 3680; -- ' imoh
0412 : 5D60; -- . push [push! t0]
0413 : 67D0; -- . pop [pop! t1 t0]
0414 : 66D0; -- ' pop
0415 : 1760; --   str  t1 t0
0416 : 2664; -- . imov [imov! t0 100]
0417 : 3600; -- ' imoh
0418 : 5D60; --   push t0
0419 : 2600; -- . imov [imov! t0 .variable_alloc_text_progress]
041A : 3680; -- ' imoh
041B : 5D60; -- . push [push! t0]
041C : 67D0; -- . pop [pop! t1 t0]
041D : 66D0; -- ' pop
041E : 1760; --   str  t1 t0
041F : 2022; -- . imov [jmp! .print_char_body_4_if_exit]
0420 : 3004; -- | imoh
0421 : A000; -- ' j_op
0422 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0423 : 3680; -- | imoh
0424 : 0660; -- ' load
0425 : 9615; --   isub    t0 1
0426 : 0760; --   load    t1 t0
0427 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0428 : 3080; -- | imoh
0429 : 1060; -- ' str
042A : A700; --   jmp     t1
042B : 66D0; -- . pop [pop! t0]
042C : 5D60; -- . push [push! t0 t0]
042D : 5D60; -- ' push
042E : 260A; -- . imov [imov! t0 10]
042F : 3600; -- ' imoh
0430 : 5D60; --   push t0
0431 : 67D0; -- . pop [pop! t1 t0]
0432 : 66D0; -- ' pop
0433 : 2801; --   imov t2 1  # default value
0434 : 8675; --   sub  t0 t1
0435 : 2039; -- . imov [jn!  .print_hex_body_0_operator_opskip]
0436 : 3004; -- | imoh
0437 : A003; -- ' j_op
0438 : 2800; --   imov t2 0
0439 : 5D80; -- . push [push! t2]
043A : 66D0; -- . pop [pop! t0]
043B : 9607; --   tst  t0
043C : 2056; -- . imov [jz!  .print_hex_body_1_else]
043D : 3004; -- | imoh
043E : A001; -- ' j_op
043F : 2630; -- . imov [imov! t0 48]
0440 : 3600; -- ' imoh
0441 : 5D60; --   push t0
0442 : 67D0; -- . pop [pop!  t1 t0]
0443 : 66D0; -- ' pop
0444 : 8674; --   add   t0 t1
0445 : 5D60; -- . push [push! t0]
0446 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0447 : 3680; -- | imoh
0448 : 0660; -- ' load
0449 : 2753; -- . imov [imov!   t1 .print_hex_body_1_if_retaddr0]
044A : 3704; -- ' imoh
044B : 1670; --   str     t0 t1
044C : 9614; --   iadd    t0 1
044D : 2003; -- . imov [str!    .ret_stack_ptr t0]
044E : 3080; -- | imoh
044F : 1060; -- ' str
0450 : 206A; -- . imov [jmp!    .print_char]
0451 : 3003; -- | imoh
0452 : A000; -- ' j_op
0453 : 2071; -- . imov [jmp! .print_hex_body_1_if_exit]
0454 : 3004; -- | imoh
0455 : A000; -- ' j_op
0456 : 260A; -- . imov [imov! t0 10]
0457 : 3600; -- ' imoh
0458 : 5D60; --   push t0
0459 : 67D0; -- . pop [pop!  t1 t0]
045A : 66D0; -- ' pop
045B : 8675; --   sub   t0 t1
045C : 5D60; -- . push [push! t0]
045D : 2641; -- . imov [imov! t0 65]
045E : 3600; -- ' imoh
045F : 5D60; --   push t0
0460 : 67D0; -- . pop [pop!  t1 t0]
0461 : 66D0; -- ' pop
0462 : 8674; --   add   t0 t1
0463 : 5D60; -- . push [push! t0]
0464 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0465 : 3680; -- | imoh
0466 : 0660; -- ' load
0467 : 2771; -- . imov [imov!   t1 .print_hex_body_1_else_retaddr0]
0468 : 3704; -- ' imoh
0469 : 1670; --   str     t0 t1
046A : 9614; --   iadd    t0 1
046B : 2003; -- . imov [str!    .ret_stack_ptr t0]
046C : 3080; -- | imoh
046D : 1060; -- ' str
046E : 206A; -- . imov [jmp!    .print_char]
046F : 3003; -- | imoh
0470 : A000; -- ' j_op
0471 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0472 : 3680; -- | imoh
0473 : 0660; -- ' load
0474 : 9615; --   isub    t0 1
0475 : 0760; --   load    t1 t0
0476 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0477 : 3080; -- | imoh
0478 : 1060; -- ' str
0479 : A700; --   jmp     t1
047A : 66D0; -- . pop [pop! t0]
047B : 5D60; -- . push [push! t0 t0]
047C : 5D60; -- ' push
047D : 2604; -- . imov [imov! t0 4]
047E : 3600; -- ' imoh
047F : 5D60; --   push t0
0480 : 67D0; -- . pop [pop!  t1 t0]
0481 : 66D0; -- ' pop
0482 : 8679; --   sshr  t0 t1
0483 : 5D60; -- . push [push! t0]
0484 : 260F; -- . imov [imov! t0 15]
0485 : 3600; -- ' imoh
0486 : 5D60; --   push t0
0487 : 67D0; -- . pop [pop!  t1 t0]
0488 : 66D0; -- ' pop
0489 : 8671; --   and   t0 t1
048A : 5D60; -- . push [push! t0]
048B : 2603; -- . imov [load!   t0 .ret_stack_ptr]
048C : 3680; -- | imoh
048D : 0660; -- ' load
048E : 2798; -- . imov [imov!   t1 .print_nibble_body_retaddr0]
048F : 3704; -- ' imoh
0490 : 1670; --   str     t0 t1
0491 : 9614; --   iadd    t0 1
0492 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0493 : 3080; -- | imoh
0494 : 1060; -- ' str
0495 : 202B; -- . imov [jmp!    .print_hex]
0496 : 3004; -- | imoh
0497 : A000; -- ' j_op
0498 : 66D0; -- . pop [pop! t0]
0499 : 5D60; -- . push [push! t0 t0]
049A : 5D60; -- ' push
049B : 260F; -- . imov [imov! t0 15]
049C : 3600; -- ' imoh
049D : 5D60; --   push t0
049E : 67D0; -- . pop [pop!  t1 t0]
049F : 66D0; -- ' pop
04A0 : 8671; --   and   t0 t1
04A1 : 5D60; -- . push [push! t0]
04A2 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
04A3 : 3680; -- | imoh
04A4 : 0660; -- ' load
04A5 : 27AF; -- . imov [imov!   t1 .print_nibble_body_retaddr1]
04A6 : 3704; -- ' imoh
04A7 : 1670; --   str     t0 t1
04A8 : 9614; --   iadd    t0 1
04A9 : 2003; -- . imov [str!    .ret_stack_ptr t0]
04AA : 3080; -- | imoh
04AB : 1060; -- ' str
04AC : 202B; -- . imov [jmp!    .print_hex]
04AD : 3004; -- | imoh
04AE : A000; -- ' j_op
04AF : 66D0; -- . pop [pop! t0]
04B0 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
04B1 : 3680; -- | imoh
04B2 : 0660; -- ' load
04B3 : 9615; --   isub    t0 1
04B4 : 0760; --   load    t1 t0
04B5 : 2003; -- . imov [str!    .ret_stack_ptr t0]
04B6 : 3080; -- | imoh
04B7 : 1060; -- ' str
04B8 : A700; --   jmp     t1
04B9 : 66D0; -- . pop [pop! t0]
04BA : 5D60; -- . push [push! t0 t0]
04BB : 5D60; -- ' push
04BC : 2608; -- . imov [imov! t0 8]
04BD : 3600; -- ' imoh
04BE : 5D60; --   push t0
04BF : 67D0; -- . pop [pop!  t1 t0]
04C0 : 66D0; -- ' pop
04C1 : 8679; --   sshr  t0 t1
04C2 : 5D60; -- . push [push! t0]
04C3 : 26FF; -- . imov [imov! t0 255]
04C4 : 3600; -- ' imoh
04C5 : 5D60; --   push t0
04C6 : 67D0; -- . pop [pop!  t1 t0]
04C7 : 66D0; -- ' pop
04C8 : 8671; --   and   t0 t1
04C9 : 5D60; -- . push [push! t0]
04CA : 2603; -- . imov [load!   t0 .ret_stack_ptr]
04CB : 3680; -- | imoh
04CC : 0660; -- ' load
04CD : 27D7; -- . imov [imov!   t1 .print_word_body_retaddr0]
04CE : 3704; -- ' imoh
04CF : 1670; --   str     t0 t1
04D0 : 9614; --   iadd    t0 1
04D1 : 2003; -- . imov [str!    .ret_stack_ptr t0]
04D2 : 3080; -- | imoh
04D3 : 1060; -- ' str
04D4 : 207A; -- . imov [jmp!    .print_nibble]
04D5 : 3004; -- | imoh
04D6 : A000; -- ' j_op
04D7 : 66D0; -- . pop [pop! t0]
04D8 : 5D60; -- . push [push! t0 t0]
04D9 : 5D60; -- ' push
04DA : 26FF; -- . imov [imov! t0 255]
04DB : 3600; -- ' imoh
04DC : 5D60; --   push t0
04DD : 67D0; -- . pop [pop!  t1 t0]
04DE : 66D0; -- ' pop
04DF : 8671; --   and   t0 t1
04E0 : 5D60; -- . push [push! t0]
04E1 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
04E2 : 3680; -- | imoh
04E3 : 0660; -- ' load
04E4 : 27EE; -- . imov [imov!   t1 .print_word_body_retaddr1]
04E5 : 3704; -- ' imoh
04E6 : 1670; --   str     t0 t1
04E7 : 9614; --   iadd    t0 1
04E8 : 2003; -- . imov [str!    .ret_stack_ptr t0]
04E9 : 3080; -- | imoh
04EA : 1060; -- ' str
04EB : 207A; -- . imov [jmp!    .print_nibble]
04EC : 3004; -- | imoh
04ED : A000; -- ' j_op
04EE : 66D0; -- . pop [pop! t0]
04EF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
04F0 : 3680; -- | imoh
04F1 : 0660; -- ' load
04F2 : 9615; --   isub    t0 1
04F3 : 0760; --   load    t1 t0
04F4 : 2003; -- . imov [str!    .ret_stack_ptr t0]
04F5 : 3080; -- | imoh
04F6 : 1060; -- ' str
04F7 : A700; --   jmp     t1
04F8 : 66D0; -- . pop [pop! t0]
04F9 : 5D60; -- . push [push! t0 t0]
04FA : 5D60; -- ' push
04FB : 66D0; -- . pop [pop! t0]
04FC : 0660; --   load t0 t0
04FD : 5D60; -- . push [push! t0]
04FE : 66D0; -- . pop [pop! t0]
04FF : 5D60; -- . push [push! t0 t0]
0500 : 5D60; -- ' push
0501 : 66D0; -- . pop [pop! t0]
0502 : 9607; --   tst  t0
0503 : 2020; -- . imov [jz!  .print_string_body_0_while_exit]
0504 : 3005; -- | imoh
0505 : A001; -- ' j_op
0506 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0507 : 3680; -- | imoh
0508 : 0660; -- ' load
0509 : 2713; -- . imov [imov!   t1 .print_string_body_0_while_block_retaddr0]
050A : 3705; -- ' imoh
050B : 1670; --   str     t0 t1
050C : 9614; --   iadd    t0 1
050D : 2003; -- . imov [str!    .ret_stack_ptr t0]
050E : 3080; -- | imoh
050F : 1060; -- ' str
0510 : 206A; -- . imov [jmp!    .print_char]
0511 : 3003; -- | imoh
0512 : A000; -- ' j_op
0513 : 2601; -- . imov [imov! t0 1]
0514 : 3600; -- ' imoh
0515 : 5D60; --   push t0
0516 : 67D0; -- . pop [pop!  t1 t0]
0517 : 66D0; -- ' pop
0518 : 8674; --   add   t0 t1
0519 : 5D60; -- . push [push! t0]
051A : 66D0; -- . pop [pop! t0]
051B : 5D60; -- . push [push! t0 t0]
051C : 5D60; -- ' push
051D : 20FB; -- . imov [jmp! .print_string_body_0_while_eval]
051E : 3004; -- | imoh
051F : A000; -- ' j_op
0520 : 66D0; -- . pop [pop! t0]
0521 : 66D0; -- . pop [pop! t0]
0522 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0523 : 3680; -- | imoh
0524 : 0660; -- ' load
0525 : 9615; --   isub    t0 1
0526 : 0760; --   load    t1 t0
0527 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0528 : 3080; -- | imoh
0529 : 1060; -- ' str
052A : A700; --   jmp     t1
052B : 2637; -- . imov [imov! t0 .string_alloc_0]
052C : 3600; -- ' imoh
052D : 5D60; -- . push [push! t0]
052E : 26FF; -- . imov [imov! t0 65535]
052F : 36FF; -- ' imoh
0530 : 5D60; --   push t0
0531 : 66D0; -- . pop [pop! t0]
0532 : 0660; --   load t0 t0
0533 : 5D60; -- . push [push! t0]
0534 : 67D0; -- . pop [pop!  t1 t0]
0535 : 66D0; -- ' pop
0536 : 8674; --   add   t0 t1
0537 : 5D60; -- . push [push! t0]
0538 : 66D0; -- . pop [pop! t0]
0539 : 0660; --   load t0 t0
053A : 5D60; -- . push [push! t0]
053B : 2603; -- . imov [load!   t0 .ret_stack_ptr]
053C : 3680; -- | imoh
053D : 0660; -- ' load
053E : 9615; --   isub    t0 1
053F : 0760; --   load    t1 t0
0540 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0541 : 3080; -- | imoh
0542 : 1060; -- ' str
0543 : A700; --   jmp     t1
0544 : 66D0; -- . pop [pop! t0]
0545 : 5D60; -- . push [push! t0 t0]
0546 : 5D60; -- ' push
0547 : 66D0; -- . pop [pop! t0]
0548 : 5D60; -- . push [push! t0 t0]
0549 : 5D60; -- ' push
054A : 66D0; -- . pop [pop! t0]
054B : 0660; --   load t0 t0
054C : 5D60; -- . push [push! t0]
054D : 66D0; -- . pop [pop! t0]
054E : 9607; --   tst  t0
054F : 205C; -- . imov [jz!  .strlen_body_0_while_exit]
0550 : 3005; -- | imoh
0551 : A001; -- ' j_op
0552 : 2601; -- . imov [imov! t0 1]
0553 : 3600; -- ' imoh
0554 : 5D60; --   push t0
0555 : 67D0; -- . pop [pop!  t1 t0]
0556 : 66D0; -- ' pop
0557 : 8674; --   add   t0 t1
0558 : 5D60; -- . push [push! t0]
0559 : 2047; -- . imov [jmp! .strlen_body_0_while_eval]
055A : 3005; -- | imoh
055B : A000; -- ' j_op
055C : 66D0; -- . pop [pop! t0 t1]
055D : 67D0; -- ' pop
055E : 5D60; -- . push [push! t0 t1]
055F : 5D70; -- ' push
0560 : 67D0; -- . pop [pop!  t1 t0]
0561 : 66D0; -- ' pop
0562 : 8675; --   sub   t0 t1
0563 : 5D60; -- . push [push! t0]
0564 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0565 : 3680; -- | imoh
0566 : 0660; -- ' load
0567 : 9615; --   isub    t0 1
0568 : 0760; --   load    t1 t0
0569 : 2003; -- . imov [str!    .ret_stack_ptr t0]
056A : 3080; -- | imoh
056B : 1060; -- ' str
056C : A700; --   jmp     t1
056D : 2603; -- . imov [load!   t0 .ret_stack_ptr]
056E : 3680; -- | imoh
056F : 0660; -- ' load
0570 : 67D0; -- . pop [pop!    t1]
0571 : 1670; --   str     t0 t1
0572 : 9614; --   iadd    t0 1
0573 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0574 : 3080; -- | imoh
0575 : 1060; -- ' str
0576 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0577 : 3680; -- | imoh
0578 : 0660; -- ' load
0579 : 2701; -- . imov [imov!   t1 1]
057A : 3700; -- ' imoh
057B : 8675; --   sub     t0 t1
057C : 5D60; -- . push [push!   t0]
057D : 66D0; -- . pop [pop! t0]
057E : 0660; --   load t0 t0
057F : 5D60; -- . push [push! t0]
0580 : 2600; -- . imov [imov! t0 0]
0581 : 3600; -- ' imoh
0582 : 5D60; --   push t0
0583 : 67D0; -- . pop [pop! t1 t0]
0584 : 66D0; -- ' pop
0585 : 2801; --   imov t2 1  # default value
0586 : 8675; --   sub  t0 t1
0587 : 208B; -- . imov [jp!  .streq_body_0_let_block_0_while_eval_0_operator_opskip]
0588 : 3005; -- | imoh
0589 : A004; -- ' j_op
058A : 2800; --   imov t2 0
058B : 5D80; -- . push [push! t2]
058C : 66D0; -- . pop [pop! t0]
058D : 9607; --   tst  t0
058E : 2006; -- . imov [jz!  .streq_body_0_let_block_0_while_exit]
058F : 3006; -- | imoh
0590 : A001; -- ' j_op
0591 : 66D0; -- . pop [pop! t0 t1]
0592 : 67D0; -- ' pop
0593 : 5D70; -- . push [push! t1 t0 t1]
0594 : 5D60; -- | push
0595 : 5D70; -- ' push
0596 : 66D0; -- . pop [pop! t0]
0597 : 0660; --   load t0 t0
0598 : 5D60; -- . push [push! t0]
0599 : 66D0; -- . pop [pop! t0 t1]
059A : 67D0; -- ' pop
059B : 5D70; -- . push [push! t1 t0 t1]
059C : 5D60; -- | push
059D : 5D70; -- ' push
059E : 66D0; -- . pop [pop! t0]
059F : 0660; --   load t0 t0
05A0 : 5D60; -- . push [push! t0]
05A1 : 67D0; -- . pop [pop! t1 t0]
05A2 : 66D0; -- ' pop
05A3 : 2801; --   imov t2 1  # default value
05A4 : 8675; --   sub  t0 t1
05A5 : 20A9; -- . imov [jz!  .streq_body_0_let_block_0_while_block_0_operator_opskip]
05A6 : 3005; -- | imoh
05A7 : A001; -- ' j_op
05A8 : 2800; --   imov t2 0
05A9 : 5D80; -- . push [push! t2]
05AA : 66D0; -- . pop [pop! t0]
05AB : 2701; --   imov t1 1
05AC : 9607; --   tst  t0
05AD : 20B1; -- . imov [jz! .streq_body_0_let_block_0_while_block_1_operator_nottrue]
05AE : 3005; -- | imoh
05AF : A001; -- ' j_op
05B0 : 2700; --   imov t1 0
05B1 : 5D70; -- . push [push! t1]
05B2 : 66D0; -- . pop [pop! t0]
05B3 : 9607; --   tst  t0
05B4 : 20D2; -- . imov [jz!  .streq_body_0_let_block_0_while_block_2_else]
05B5 : 3005; -- | imoh
05B6 : A001; -- ' j_op
05B7 : 66D0; -- . pop [pop! t0]
05B8 : 66D0; -- . pop [pop! t0]
05B9 : 2600; -- . imov [imov! t0 0]
05BA : 3600; -- ' imoh
05BB : 5D60; --   push t0
05BC : 2603; -- . imov [load!   t0 .ret_stack_ptr]
05BD : 3680; -- | imoh
05BE : 0660; -- ' load
05BF : 2701; -- . imov [imov!   t1 1]
05C0 : 3700; -- ' imoh
05C1 : 8675; --   sub     t0 t1
05C2 : 2003; -- . imov [str!    .ret_stack_ptr t0]
05C3 : 3080; -- | imoh
05C4 : 1060; -- ' str
05C5 : 2014; -- . imov [jmp!  .streq_exit]
05C6 : 3006; -- | imoh
05C7 : A000; -- ' j_op
05C8 : 66D0; -- . pop [pop! t0]
05C9 : 2600; -- . imov [imov! t0 0]
05CA : 3600; -- ' imoh
05CB : 5D60; --   push t0
05CC : 2600; -- . imov [imov! t0 0]
05CD : 3600; -- ' imoh
05CE : 5D60; --   push t0
05CF : 20D2; -- . imov [jmp! .streq_body_0_let_block_0_while_block_2_if_exit]
05D0 : 3005; -- | imoh
05D1 : A000; -- ' j_op
05D2 : 2601; -- . imov [imov! t0 1]
05D3 : 3600; -- ' imoh
05D4 : 5D60; --   push t0
05D5 : 67D0; -- . pop [pop!  t1 t0]
05D6 : 66D0; -- ' pop
05D7 : 8674; --   add   t0 t1
05D8 : 5D60; -- . push [push! t0]
05D9 : 66D0; -- . pop [pop! t0 t1]
05DA : 67D0; -- ' pop
05DB : 5D60; -- . push [push! t0 t1]
05DC : 5D70; -- ' push
05DD : 2601; -- . imov [imov! t0 1]
05DE : 3600; -- ' imoh
05DF : 5D60; --   push t0
05E0 : 67D0; -- . pop [pop!  t1 t0]
05E1 : 66D0; -- ' pop
05E2 : 8674; --   add   t0 t1
05E3 : 5D60; -- . push [push! t0]
05E4 : 66D0; -- . pop [pop! t0 t1]
05E5 : 67D0; -- ' pop
05E6 : 5D60; -- . push [push! t0 t1]
05E7 : 5D70; -- ' push
05E8 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
05E9 : 3680; -- | imoh
05EA : 0660; -- ' load
05EB : 2701; -- . imov [imov!   t1 1]
05EC : 3700; -- ' imoh
05ED : 8675; --   sub     t0 t1
05EE : 5D60; -- . push [push!   t0]
05EF : 66D0; -- . pop [pop! t0]
05F0 : 0660; --   load t0 t0
05F1 : 5D60; -- . push [push! t0]
05F2 : 2601; -- . imov [imov! t0 1]
05F3 : 3600; -- ' imoh
05F4 : 5D60; --   push t0
05F5 : 67D0; -- . pop [pop!  t1 t0]
05F6 : 66D0; -- ' pop
05F7 : 8675; --   sub   t0 t1
05F8 : 5D60; -- . push [push! t0]
05F9 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
05FA : 3680; -- | imoh
05FB : 0660; -- ' load
05FC : 2701; -- . imov [imov!   t1 1]
05FD : 3700; -- ' imoh
05FE : 8675; --   sub     t0 t1
05FF : 5D60; -- . push [push!   t0]
0600 : 67D0; -- . pop [pop! t1 t0]
0601 : 66D0; -- ' pop
0602 : 1760; --   str  t1 t0
0603 : 2076; -- . imov [jmp! .streq_body_0_let_block_0_while_eval]
0604 : 3005; -- | imoh
0605 : A000; -- ' j_op
0606 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0607 : 3680; -- | imoh
0608 : 0660; -- ' load
0609 : 2701; -- . imov [imov!   t1 1]
060A : 3700; -- ' imoh
060B : 8675; --   sub     t0 t1
060C : 2003; -- . imov [str!    .ret_stack_ptr t0]
060D : 3080; -- | imoh
060E : 1060; -- ' str
060F : 66D0; -- . pop [pop! t0]
0610 : 66D0; -- . pop [pop! t0]
0611 : 2601; -- . imov [imov! t0 1]
0612 : 3600; -- ' imoh
0613 : 5D60; --   push t0
0614 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0615 : 3680; -- | imoh
0616 : 0660; -- ' load
0617 : 9615; --   isub    t0 1
0618 : 0760; --   load    t1 t0
0619 : 2003; -- . imov [str!    .ret_stack_ptr t0]
061A : 3080; -- | imoh
061B : 1060; -- ' str
061C : A700; --   jmp     t1
061D : 66D0; -- . pop [pop! t0]
061E : 9607; --   tst  t0
061F : 2025; -- . imov [jz!  .assert_body_0_else]
0620 : 3006; -- | imoh
0621 : A001; -- ' j_op
0622 : 2056; -- . imov [jmp! .assert_body_0_if_exit]
0623 : 3006; -- | imoh
0624 : A000; -- ' j_op
0625 : 66D0; -- . pop [pop! t0]
0626 : 5D60; -- . push [push! t0 t0]
0627 : 5D60; -- ' push
0628 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0629 : 3680; -- | imoh
062A : 0660; -- ' load
062B : 2735; -- . imov [imov!   t1 .assert_body_0_else_retaddr0]
062C : 3706; -- ' imoh
062D : 1670; --   str     t0 t1
062E : 9614; --   iadd    t0 1
062F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0630 : 3080; -- | imoh
0631 : 1060; -- ' str
0632 : 20F8; -- . imov [jmp!    .print_string]
0633 : 3004; -- | imoh
0634 : A000; -- ' j_op
0635 : 2620; -- . imov [imov! t0 32]
0636 : 3600; -- ' imoh
0637 : 5D60; --   push t0
0638 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0639 : 3680; -- | imoh
063A : 0660; -- ' load
063B : 2745; -- . imov [imov!   t1 .assert_body_0_else_retaddr1]
063C : 3706; -- ' imoh
063D : 1670; --   str     t0 t1
063E : 9614; --   iadd    t0 1
063F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0640 : 3080; -- | imoh
0641 : 1060; -- ' str
0642 : 206A; -- . imov [jmp!    .print_char]
0643 : 3003; -- | imoh
0644 : A000; -- ' j_op
0645 : 2696; -- . imov [imov! t0 .string_alloc_1]
0646 : 3601; -- ' imoh
0647 : 5D60; -- . push [push! t0]
0648 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0649 : 3680; -- | imoh
064A : 0660; -- ' load
064B : 2755; -- . imov [imov!   t1 .assert_body_0_else_retaddr2]
064C : 3706; -- ' imoh
064D : 1670; --   str     t0 t1
064E : 9614; --   iadd    t0 1
064F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0650 : 3080; -- | imoh
0651 : 1060; -- ' str
0652 : 20F8; -- . imov [jmp!    .print_string]
0653 : 3004; -- | imoh
0654 : A000; -- ' j_op
0655 : 7000; --   halt
0656 : 66D0; -- . pop [pop! t0]
0657 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0658 : 3680; -- | imoh
0659 : 0660; -- ' load
065A : 9615; --   isub    t0 1
065B : 0760; --   load    t1 t0
065C : 2003; -- . imov [str!    .ret_stack_ptr t0]
065D : 3080; -- | imoh
065E : 1060; -- ' str
065F : A700; --   jmp     t1
0660 : 2600; -- . imov [imov! t0 0]
0661 : 3600; -- ' imoh
0662 : 5D60; --   push t0
0663 : 66D0; -- . pop [pop! t0 t1]
0664 : 67D0; -- ' pop
0665 : 5D60; -- . push [push! t0 t1]
0666 : 5D70; -- ' push
0667 : 66D0; -- . pop [pop! t0]
0668 : 5D60; -- . push [push! t0 t0]
0669 : 5D60; -- ' push
066A : 66D0; -- . pop [pop! t0]
066B : 9607; --   tst  t0
066C : 208A; -- . imov [jz!  .sum_body_0_while_exit]
066D : 3006; -- | imoh
066E : A001; -- ' j_op
066F : 66D0; -- . pop [pop! t0 t1]
0670 : 67D0; -- ' pop
0671 : 5D60; -- . push [push! t0 t1]
0672 : 5D70; -- ' push
0673 : 66D0; -- . pop [pop! t0 t1]
0674 : 67D0; -- ' pop
0675 : 5D70; -- . push [push! t1 t0 t1]
0676 : 5D60; -- | push
0677 : 5D70; -- ' push
0678 : 67D0; -- . pop [pop!  t1 t0]
0679 : 66D0; -- ' pop
067A : 8674; --   add   t0 t1
067B : 5D60; -- . push [push! t0]
067C : 66D0; -- . pop [pop! t0 t1]
067D : 67D0; -- ' pop
067E : 5D60; -- . push [push! t0 t1]
067F : 5D70; -- ' push
0680 : 2601; -- . imov [imov! t0 1]
0681 : 3600; -- ' imoh
0682 : 5D60; --   push t0
0683 : 67D0; -- . pop [pop!  t1 t0]
0684 : 66D0; -- ' pop
0685 : 8675; --   sub   t0 t1
0686 : 5D60; -- . push [push! t0]
0687 : 2067; -- . imov [jmp! .sum_body_0_while_eval]
0688 : 3006; -- | imoh
0689 : A000; -- ' j_op
068A : 66D0; -- . pop [pop! t0]
068B : 2603; -- . imov [load!   t0 .ret_stack_ptr]
068C : 3680; -- | imoh
068D : 0660; -- ' load
068E : 9615; --   isub    t0 1
068F : 0760; --   load    t1 t0
0690 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0691 : 3080; -- | imoh
0692 : 1060; -- ' str
0693 : A700; --   jmp     t1
0694 : 2600; -- . imov [imov! t0 0]
0695 : 3600; -- ' imoh
0696 : 5D60; --   push t0
0697 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0698 : 3680; -- | imoh
0699 : 0660; -- ' load
069A : 67D0; -- . pop [pop!    t1]
069B : 1670; --   str     t0 t1
069C : 9614; --   iadd    t0 1
069D : 67D0; -- . pop [pop!    t1]
069E : 1670; --   str     t0 t1
069F : 9614; --   iadd    t0 1
06A0 : 67D0; -- . pop [pop!    t1]
06A1 : 1670; --   str     t0 t1
06A2 : 9614; --   iadd    t0 1
06A3 : 2003; -- . imov [str!    .ret_stack_ptr t0]
06A4 : 3080; -- | imoh
06A5 : 1060; -- ' str
06A6 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06A7 : 3680; -- | imoh
06A8 : 0660; -- ' load
06A9 : 2702; -- . imov [imov!   t1 2]
06AA : 3700; -- ' imoh
06AB : 8675; --   sub     t0 t1
06AC : 5D60; -- . push [push!   t0]
06AD : 66D0; -- . pop [pop! t0]
06AE : 0660; --   load t0 t0
06AF : 5D60; -- . push [push! t0]
06B0 : 66D0; -- . pop [pop! t0]
06B1 : 9607; --   tst  t0
06B2 : 20F5; -- . imov [jz!  .mul_body_0_let_block_0_while_exit]
06B3 : 3006; -- | imoh
06B4 : A001; -- ' j_op
06B5 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06B6 : 3680; -- | imoh
06B7 : 0660; -- ' load
06B8 : 2703; -- . imov [imov!   t1 3]
06B9 : 3700; -- ' imoh
06BA : 8675; --   sub     t0 t1
06BB : 5D60; -- . push [push!   t0]
06BC : 66D0; -- . pop [pop! t0]
06BD : 0660; --   load t0 t0
06BE : 5D60; -- . push [push! t0]
06BF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06C0 : 3680; -- | imoh
06C1 : 0660; -- ' load
06C2 : 2701; -- . imov [imov!   t1 1]
06C3 : 3700; -- ' imoh
06C4 : 8675; --   sub     t0 t1
06C5 : 5D60; -- . push [push!   t0]
06C6 : 66D0; -- . pop [pop! t0]
06C7 : 0660; --   load t0 t0
06C8 : 5D60; -- . push [push! t0]
06C9 : 67D0; -- . pop [pop!  t1 t0]
06CA : 66D0; -- ' pop
06CB : 8674; --   add   t0 t1
06CC : 5D60; -- . push [push! t0]
06CD : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06CE : 3680; -- | imoh
06CF : 0660; -- ' load
06D0 : 2703; -- . imov [imov!   t1 3]
06D1 : 3700; -- ' imoh
06D2 : 8675; --   sub     t0 t1
06D3 : 5D60; -- . push [push!   t0]
06D4 : 67D0; -- . pop [pop! t1 t0]
06D5 : 66D0; -- ' pop
06D6 : 1760; --   str  t1 t0
06D7 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06D8 : 3680; -- | imoh
06D9 : 0660; -- ' load
06DA : 2702; -- . imov [imov!   t1 2]
06DB : 3700; -- ' imoh
06DC : 8675; --   sub     t0 t1
06DD : 5D60; -- . push [push!   t0]
06DE : 66D0; -- . pop [pop! t0]
06DF : 0660; --   load t0 t0
06E0 : 5D60; -- . push [push! t0]
06E1 : 2601; -- . imov [imov! t0 1]
06E2 : 3600; -- ' imoh
06E3 : 5D60; --   push t0
06E4 : 67D0; -- . pop [pop!  t1 t0]
06E5 : 66D0; -- ' pop
06E6 : 8675; --   sub   t0 t1
06E7 : 5D60; -- . push [push! t0]
06E8 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06E9 : 3680; -- | imoh
06EA : 0660; -- ' load
06EB : 2702; -- . imov [imov!   t1 2]
06EC : 3700; -- ' imoh
06ED : 8675; --   sub     t0 t1
06EE : 5D60; -- . push [push!   t0]
06EF : 67D0; -- . pop [pop! t1 t0]
06F0 : 66D0; -- ' pop
06F1 : 1760; --   str  t1 t0
06F2 : 20A6; -- . imov [jmp! .mul_body_0_let_block_0_while_eval]
06F3 : 3006; -- | imoh
06F4 : A000; -- ' j_op
06F5 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
06F6 : 3680; -- | imoh
06F7 : 0660; -- ' load
06F8 : 2703; -- . imov [imov!   t1 3]
06F9 : 3700; -- ' imoh
06FA : 8675; --   sub     t0 t1
06FB : 5D60; -- . push [push!   t0]
06FC : 66D0; -- . pop [pop! t0]
06FD : 0660; --   load t0 t0
06FE : 5D60; -- . push [push! t0]
06FF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0700 : 3680; -- | imoh
0701 : 0660; -- ' load
0702 : 2703; -- . imov [imov!   t1 3]
0703 : 3700; -- ' imoh
0704 : 8675; --   sub     t0 t1
0705 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0706 : 3080; -- | imoh
0707 : 1060; -- ' str
0708 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0709 : 3680; -- | imoh
070A : 0660; -- ' load
070B : 9615; --   isub    t0 1
070C : 0760; --   load    t1 t0
070D : 2003; -- . imov [str!    .ret_stack_ptr t0]
070E : 3080; -- | imoh
070F : 1060; -- ' str
0710 : A700; --   jmp     t1
0711 : 26D3; -- . imov [imov! t0 .string_alloc_2]
0712 : 3601; -- ' imoh
0713 : 5D60; -- . push [push! t0]
0714 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0715 : 3680; -- | imoh
0716 : 0660; -- ' load
0717 : 2721; -- . imov [imov!   t1 .test_sum_body_retaddr0]
0718 : 3707; -- ' imoh
0719 : 1670; --   str     t0 t1
071A : 9614; --   iadd    t0 1
071B : 2003; -- . imov [str!    .ret_stack_ptr t0]
071C : 3080; -- | imoh
071D : 1060; -- ' str
071E : 20F8; -- . imov [jmp!    .print_string]
071F : 3004; -- | imoh
0720 : A000; -- ' j_op
0721 : 260D; -- . imov [imov! t0 .string_alloc_3]
0722 : 3603; -- ' imoh
0723 : 5D60; -- . push [push! t0]
0724 : 2607; -- . imov [imov! t0 7]
0725 : 3600; -- ' imoh
0726 : 5D60; --   push t0
0727 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0728 : 3680; -- | imoh
0729 : 0660; -- ' load
072A : 2734; -- . imov [imov!   t1 .test_sum_body_0_retaddr0]
072B : 3707; -- ' imoh
072C : 1670; --   str     t0 t1
072D : 9614; --   iadd    t0 1
072E : 2003; -- . imov [str!    .ret_stack_ptr t0]
072F : 3080; -- | imoh
0730 : 1060; -- ' str
0731 : 2060; -- . imov [jmp!    .sum]
0732 : 3006; -- | imoh
0733 : A000; -- ' j_op
0734 : 261C; -- . imov [imov! t0 28]
0735 : 3600; -- ' imoh
0736 : 5D60; --   push t0
0737 : 67D0; -- . pop [pop!  t1 t0]
0738 : 66D0; -- ' pop
0739 : 8675; --   sub   t0 t1
073A : 5D60; -- . push [push! t0]
073B : 2600; -- . imov [imov! t0 0]
073C : 3600; -- ' imoh
073D : 5D60; --   push t0
073E : 67D0; -- . pop [pop! t1 t0]
073F : 66D0; -- ' pop
0740 : 2801; --   imov t2 1  # default value
0741 : 8675; --   sub  t0 t1
0742 : 2046; -- . imov [jz!  .test_sum_body_0_1_operator_opskip]
0743 : 3007; -- | imoh
0744 : A001; -- ' j_op
0745 : 2800; --   imov t2 0
0746 : 5D80; -- . push [push! t2]
0747 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0748 : 3680; -- | imoh
0749 : 0660; -- ' load
074A : 2754; -- . imov [imov!   t1 .test_sum_body_retaddr1]
074B : 3707; -- ' imoh
074C : 1670; --   str     t0 t1
074D : 9614; --   iadd    t0 1
074E : 2003; -- . imov [str!    .ret_stack_ptr t0]
074F : 3080; -- | imoh
0750 : 1060; -- ' str
0751 : 201D; -- . imov [jmp!    .assert]
0752 : 3006; -- | imoh
0753 : A000; -- ' j_op
0754 : 261A; -- . imov [imov! t0 .string_alloc_4]
0755 : 3603; -- ' imoh
0756 : 5D60; -- . push [push! t0]
0757 : 2616; -- . imov [imov! t0 22]
0758 : 3600; -- ' imoh
0759 : 5D60; --   push t0
075A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
075B : 3680; -- | imoh
075C : 0660; -- ' load
075D : 2767; -- . imov [imov!   t1 .test_sum_body_1_retaddr0]
075E : 3707; -- ' imoh
075F : 1670; --   str     t0 t1
0760 : 9614; --   iadd    t0 1
0761 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0762 : 3080; -- | imoh
0763 : 1060; -- ' str
0764 : 2060; -- . imov [jmp!    .sum]
0765 : 3006; -- | imoh
0766 : A000; -- ' j_op
0767 : 26FD; -- . imov [imov! t0 253]
0768 : 3600; -- ' imoh
0769 : 5D60; --   push t0
076A : 67D0; -- . pop [pop!  t1 t0]
076B : 66D0; -- ' pop
076C : 8675; --   sub   t0 t1
076D : 5D60; -- . push [push! t0]
076E : 2600; -- . imov [imov! t0 0]
076F : 3600; -- ' imoh
0770 : 5D60; --   push t0
0771 : 67D0; -- . pop [pop! t1 t0]
0772 : 66D0; -- ' pop
0773 : 2801; --   imov t2 1  # default value
0774 : 8675; --   sub  t0 t1
0775 : 2079; -- . imov [jz!  .test_sum_body_1_1_operator_opskip]
0776 : 3007; -- | imoh
0777 : A001; -- ' j_op
0778 : 2800; --   imov t2 0
0779 : 5D80; -- . push [push! t2]
077A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
077B : 3680; -- | imoh
077C : 0660; -- ' load
077D : 2787; -- . imov [imov!   t1 .test_sum_body_retaddr2]
077E : 3707; -- ' imoh
077F : 1670; --   str     t0 t1
0780 : 9614; --   iadd    t0 1
0781 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0782 : 3080; -- | imoh
0783 : 1060; -- ' str
0784 : 201D; -- . imov [jmp!    .assert]
0785 : 3006; -- | imoh
0786 : A000; -- ' j_op
0787 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0788 : 3680; -- | imoh
0789 : 0660; -- ' load
078A : 9615; --   isub    t0 1
078B : 0760; --   load    t1 t0
078C : 2003; -- . imov [str!    .ret_stack_ptr t0]
078D : 3080; -- | imoh
078E : 1060; -- ' str
078F : A700; --   jmp     t1
0790 : 2645; -- . imov [imov! t0 .string_alloc_5]
0791 : 3602; -- ' imoh
0792 : 5D60; -- . push [push! t0]
0793 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0794 : 3680; -- | imoh
0795 : 0660; -- ' load
0796 : 27A0; -- . imov [imov!   t1 .test_arith_body_retaddr0]
0797 : 3707; -- ' imoh
0798 : 1670; --   str     t0 t1
0799 : 9614; --   iadd    t0 1
079A : 2003; -- . imov [str!    .ret_stack_ptr t0]
079B : 3080; -- | imoh
079C : 1060; -- ' str
079D : 20F8; -- . imov [jmp!    .print_string]
079E : 3004; -- | imoh
079F : A000; -- ' j_op
07A0 : 264C; -- . imov [imov! t0 .string_alloc_6]
07A1 : 3601; -- ' imoh
07A2 : 5D60; -- . push [push! t0]
07A3 : 2607; -- . imov [imov! t0 7]
07A4 : 3600; -- ' imoh
07A5 : 5D60; --   push t0
07A6 : 2607; -- . imov [imov! t0 7]
07A7 : 3600; -- ' imoh
07A8 : 5D60; --   push t0
07A9 : 67D0; -- . pop [pop! t1 t0]
07AA : 66D0; -- ' pop
07AB : 2801; --   imov t2 1  # default value
07AC : 8675; --   sub  t0 t1
07AD : 20B1; -- . imov [jz!  .test_arith_body_0_0_operator_opskip]
07AE : 3007; -- | imoh
07AF : A001; -- ' j_op
07B0 : 2800; --   imov t2 0
07B1 : 5D80; -- . push [push! t2]
07B2 : 2601; -- . imov [imov! t0 1]
07B3 : 3600; -- ' imoh
07B4 : 5D60; --   push t0
07B5 : 67D0; -- . pop [pop! t1 t0]
07B6 : 66D0; -- ' pop
07B7 : 2801; --   imov t2 1  # default value
07B8 : 8675; --   sub  t0 t1
07B9 : 20BD; -- . imov [jz!  .test_arith_body_0_1_operator_opskip]
07BA : 3007; -- | imoh
07BB : A001; -- ' j_op
07BC : 2800; --   imov t2 0
07BD : 5D80; -- . push [push! t2]
07BE : 2603; -- . imov [load!   t0 .ret_stack_ptr]
07BF : 3680; -- | imoh
07C0 : 0660; -- ' load
07C1 : 27CB; -- . imov [imov!   t1 .test_arith_body_retaddr1]
07C2 : 3707; -- ' imoh
07C3 : 1670; --   str     t0 t1
07C4 : 9614; --   iadd    t0 1
07C5 : 2003; -- . imov [str!    .ret_stack_ptr t0]
07C6 : 3080; -- | imoh
07C7 : 1060; -- ' str
07C8 : 201D; -- . imov [jmp!    .assert]
07C9 : 3006; -- | imoh
07CA : A000; -- ' j_op
07CB : 2655; -- . imov [imov! t0 .string_alloc_7]
07CC : 3601; -- ' imoh
07CD : 5D60; -- . push [push! t0]
07CE : 2606; -- . imov [imov! t0 6]
07CF : 3600; -- ' imoh
07D0 : 5D60; --   push t0
07D1 : 2607; -- . imov [imov! t0 7]
07D2 : 3600; -- ' imoh
07D3 : 5D60; --   push t0
07D4 : 67D0; -- . pop [pop! t1 t0]
07D5 : 66D0; -- ' pop
07D6 : 2801; --   imov t2 1  # default value
07D7 : 8675; --   sub  t0 t1
07D8 : 20DC; -- . imov [jz!  .test_arith_body_1_0_operator_opskip]
07D9 : 3007; -- | imoh
07DA : A001; -- ' j_op
07DB : 2800; --   imov t2 0
07DC : 5D80; -- . push [push! t2]
07DD : 2600; -- . imov [imov! t0 0]
07DE : 3600; -- ' imoh
07DF : 5D60; --   push t0
07E0 : 67D0; -- . pop [pop! t1 t0]
07E1 : 66D0; -- ' pop
07E2 : 2801; --   imov t2 1  # default value
07E3 : 8675; --   sub  t0 t1
07E4 : 20E8; -- . imov [jz!  .test_arith_body_1_1_operator_opskip]
07E5 : 3007; -- | imoh
07E6 : A001; -- ' j_op
07E7 : 2800; --   imov t2 0
07E8 : 5D80; -- . push [push! t2]
07E9 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
07EA : 3680; -- | imoh
07EB : 0660; -- ' load
07EC : 27F6; -- . imov [imov!   t1 .test_arith_body_retaddr2]
07ED : 3707; -- ' imoh
07EE : 1670; --   str     t0 t1
07EF : 9614; --   iadd    t0 1
07F0 : 2003; -- . imov [str!    .ret_stack_ptr t0]
07F1 : 3080; -- | imoh
07F2 : 1060; -- ' str
07F3 : 201D; -- . imov [jmp!    .assert]
07F4 : 3006; -- | imoh
07F5 : A000; -- ' j_op
07F6 : 2681; -- . imov [imov! t0 .string_alloc_8]
07F7 : 3602; -- ' imoh
07F8 : 5D60; -- . push [push! t0]
07F9 : 2606; -- . imov [imov! t0 6]
07FA : 3600; -- ' imoh
07FB : 5D60; --   push t0
07FC : 2607; -- . imov [imov! t0 7]
07FD : 3600; -- ' imoh
07FE : 5D60; --   push t0
07FF : 67D0; -- . pop [pop! t1 t0]
0800 : 66D0; -- ' pop
0801 : 2801; --   imov t2 1  # default value
0802 : 8675; --   sub  t0 t1
0803 : 2007; -- . imov [jp!  .test_arith_body_2_0_operator_opskip]
0804 : 3008; -- | imoh
0805 : A004; -- ' j_op
0806 : 2800; --   imov t2 0
0807 : 5D80; -- . push [push! t2]
0808 : 2600; -- . imov [imov! t0 0]
0809 : 3600; -- ' imoh
080A : 5D60; --   push t0
080B : 67D0; -- . pop [pop! t1 t0]
080C : 66D0; -- ' pop
080D : 2801; --   imov t2 1  # default value
080E : 8675; --   sub  t0 t1
080F : 2013; -- . imov [jz!  .test_arith_body_2_1_operator_opskip]
0810 : 3008; -- | imoh
0811 : A001; -- ' j_op
0812 : 2800; --   imov t2 0
0813 : 5D80; -- . push [push! t2]
0814 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0815 : 3680; -- | imoh
0816 : 0660; -- ' load
0817 : 2721; -- . imov [imov!   t1 .test_arith_body_retaddr3]
0818 : 3708; -- ' imoh
0819 : 1670; --   str     t0 t1
081A : 9614; --   iadd    t0 1
081B : 2003; -- . imov [str!    .ret_stack_ptr t0]
081C : 3080; -- | imoh
081D : 1060; -- ' str
081E : 201D; -- . imov [jmp!    .assert]
081F : 3006; -- | imoh
0820 : A000; -- ' j_op
0821 : 2615; -- . imov [imov! t0 .string_alloc_9]
0822 : 3602; -- ' imoh
0823 : 5D60; -- . push [push! t0]
0824 : 2607; -- . imov [imov! t0 7]
0825 : 3600; -- ' imoh
0826 : 5D60; --   push t0
0827 : 2607; -- . imov [imov! t0 7]
0828 : 3600; -- ' imoh
0829 : 5D60; --   push t0
082A : 67D0; -- . pop [pop! t1 t0]
082B : 66D0; -- ' pop
082C : 2801; --   imov t2 1  # default value
082D : 8675; --   sub  t0 t1
082E : 2032; -- . imov [jp!  .test_arith_body_3_0_operator_opskip]
082F : 3008; -- | imoh
0830 : A004; -- ' j_op
0831 : 2800; --   imov t2 0
0832 : 5D80; -- . push [push! t2]
0833 : 2600; -- . imov [imov! t0 0]
0834 : 3600; -- ' imoh
0835 : 5D60; --   push t0
0836 : 67D0; -- . pop [pop! t1 t0]
0837 : 66D0; -- ' pop
0838 : 2801; --   imov t2 1  # default value
0839 : 8675; --   sub  t0 t1
083A : 203E; -- . imov [jz!  .test_arith_body_3_1_operator_opskip]
083B : 3008; -- | imoh
083C : A001; -- ' j_op
083D : 2800; --   imov t2 0
083E : 5D80; -- . push [push! t2]
083F : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0840 : 3680; -- | imoh
0841 : 0660; -- ' load
0842 : 274C; -- . imov [imov!   t1 .test_arith_body_retaddr4]
0843 : 3708; -- ' imoh
0844 : 1670; --   str     t0 t1
0845 : 9614; --   iadd    t0 1
0846 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0847 : 3080; -- | imoh
0848 : 1060; -- ' str
0849 : 201D; -- . imov [jmp!    .assert]
084A : 3006; -- | imoh
084B : A000; -- ' j_op
084C : 260F; -- . imov [imov! t0 .string_alloc_10]
084D : 3602; -- ' imoh
084E : 5D60; -- . push [push! t0]
084F : 2608; -- . imov [imov! t0 8]
0850 : 3600; -- ' imoh
0851 : 5D60; --   push t0
0852 : 2607; -- . imov [imov! t0 7]
0853 : 3600; -- ' imoh
0854 : 5D60; --   push t0
0855 : 67D0; -- . pop [pop! t1 t0]
0856 : 66D0; -- ' pop
0857 : 2801; --   imov t2 1  # default value
0858 : 8675; --   sub  t0 t1
0859 : 205D; -- . imov [jp!  .test_arith_body_4_0_operator_opskip]
085A : 3008; -- | imoh
085B : A004; -- ' j_op
085C : 2800; --   imov t2 0
085D : 5D80; -- . push [push! t2]
085E : 2601; -- . imov [imov! t0 1]
085F : 3600; -- ' imoh
0860 : 5D60; --   push t0
0861 : 67D0; -- . pop [pop! t1 t0]
0862 : 66D0; -- ' pop
0863 : 2801; --   imov t2 1  # default value
0864 : 8675; --   sub  t0 t1
0865 : 2069; -- . imov [jz!  .test_arith_body_4_1_operator_opskip]
0866 : 3008; -- | imoh
0867 : A001; -- ' j_op
0868 : 2800; --   imov t2 0
0869 : 5D80; -- . push [push! t2]
086A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
086B : 3680; -- | imoh
086C : 0660; -- ' load
086D : 2777; -- . imov [imov!   t1 .test_arith_body_retaddr5]
086E : 3708; -- ' imoh
086F : 1670; --   str     t0 t1
0870 : 9614; --   iadd    t0 1
0871 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0872 : 3080; -- | imoh
0873 : 1060; -- ' str
0874 : 201D; -- . imov [jmp!    .assert]
0875 : 3006; -- | imoh
0876 : A000; -- ' j_op
0877 : 2641; -- . imov [imov! t0 .string_alloc_11]
0878 : 3603; -- ' imoh
0879 : 5D60; -- . push [push! t0]
087A : 2606; -- . imov [imov! t0 6]
087B : 3600; -- ' imoh
087C : 5D60; --   push t0
087D : 2607; -- . imov [imov! t0 7]
087E : 3600; -- ' imoh
087F : 5D60; --   push t0
0880 : 67D0; -- . pop [pop! t1 t0]
0881 : 66D0; -- ' pop
0882 : 2800; --   imov t2 0  # default value
0883 : 8675; --   sub  t0 t1
0884 : 2088; -- . imov [jn!  .test_arith_body_5_0_operator_opskip]
0885 : 3008; -- | imoh
0886 : A003; -- ' j_op
0887 : 2801; --   imov t2 1
0888 : 5D80; -- . push [push! t2]
0889 : 2600; -- . imov [imov! t0 0]
088A : 3600; -- ' imoh
088B : 5D60; --   push t0
088C : 67D0; -- . pop [pop! t1 t0]
088D : 66D0; -- ' pop
088E : 2801; --   imov t2 1  # default value
088F : 8675; --   sub  t0 t1
0890 : 2094; -- . imov [jz!  .test_arith_body_5_1_operator_opskip]
0891 : 3008; -- | imoh
0892 : A001; -- ' j_op
0893 : 2800; --   imov t2 0
0894 : 5D80; -- . push [push! t2]
0895 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0896 : 3680; -- | imoh
0897 : 0660; -- ' load
0898 : 27A2; -- . imov [imov!   t1 .test_arith_body_retaddr6]
0899 : 3708; -- ' imoh
089A : 1670; --   str     t0 t1
089B : 9614; --   iadd    t0 1
089C : 2003; -- . imov [str!    .ret_stack_ptr t0]
089D : 3080; -- | imoh
089E : 1060; -- ' str
089F : 201D; -- . imov [jmp!    .assert]
08A0 : 3006; -- | imoh
08A1 : A000; -- ' j_op
08A2 : 2673; -- . imov [imov! t0 .string_alloc_12]
08A3 : 3602; -- ' imoh
08A4 : 5D60; -- . push [push! t0]
08A5 : 2607; -- . imov [imov! t0 7]
08A6 : 3600; -- ' imoh
08A7 : 5D60; --   push t0
08A8 : 2607; -- . imov [imov! t0 7]
08A9 : 3600; -- ' imoh
08AA : 5D60; --   push t0
08AB : 67D0; -- . pop [pop! t1 t0]
08AC : 66D0; -- ' pop
08AD : 2800; --   imov t2 0  # default value
08AE : 8675; --   sub  t0 t1
08AF : 20B3; -- . imov [jn!  .test_arith_body_6_0_operator_opskip]
08B0 : 3008; -- | imoh
08B1 : A003; -- ' j_op
08B2 : 2801; --   imov t2 1
08B3 : 5D80; -- . push [push! t2]
08B4 : 2601; -- . imov [imov! t0 1]
08B5 : 3600; -- ' imoh
08B6 : 5D60; --   push t0
08B7 : 67D0; -- . pop [pop! t1 t0]
08B8 : 66D0; -- ' pop
08B9 : 2801; --   imov t2 1  # default value
08BA : 8675; --   sub  t0 t1
08BB : 20BF; -- . imov [jz!  .test_arith_body_6_1_operator_opskip]
08BC : 3008; -- | imoh
08BD : A001; -- ' j_op
08BE : 2800; --   imov t2 0
08BF : 5D80; -- . push [push! t2]
08C0 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
08C1 : 3680; -- | imoh
08C2 : 0660; -- ' load
08C3 : 27CD; -- . imov [imov!   t1 .test_arith_body_retaddr7]
08C4 : 3708; -- ' imoh
08C5 : 1670; --   str     t0 t1
08C6 : 9614; --   iadd    t0 1
08C7 : 2003; -- . imov [str!    .ret_stack_ptr t0]
08C8 : 3080; -- | imoh
08C9 : 1060; -- ' str
08CA : 201D; -- . imov [jmp!    .assert]
08CB : 3006; -- | imoh
08CC : A000; -- ' j_op
08CD : 26D0; -- . imov [imov! t0 .string_alloc_13]
08CE : 3602; -- ' imoh
08CF : 5D60; -- . push [push! t0]
08D0 : 2608; -- . imov [imov! t0 8]
08D1 : 3600; -- ' imoh
08D2 : 5D60; --   push t0
08D3 : 2607; -- . imov [imov! t0 7]
08D4 : 3600; -- ' imoh
08D5 : 5D60; --   push t0
08D6 : 67D0; -- . pop [pop! t1 t0]
08D7 : 66D0; -- ' pop
08D8 : 2800; --   imov t2 0  # default value
08D9 : 8675; --   sub  t0 t1
08DA : 20DE; -- . imov [jn!  .test_arith_body_7_0_operator_opskip]
08DB : 3008; -- | imoh
08DC : A003; -- ' j_op
08DD : 2801; --   imov t2 1
08DE : 5D80; -- . push [push! t2]
08DF : 2601; -- . imov [imov! t0 1]
08E0 : 3600; -- ' imoh
08E1 : 5D60; --   push t0
08E2 : 67D0; -- . pop [pop! t1 t0]
08E3 : 66D0; -- ' pop
08E4 : 2801; --   imov t2 1  # default value
08E5 : 8675; --   sub  t0 t1
08E6 : 20EA; -- . imov [jz!  .test_arith_body_7_1_operator_opskip]
08E7 : 3008; -- | imoh
08E8 : A001; -- ' j_op
08E9 : 2800; --   imov t2 0
08EA : 5D80; -- . push [push! t2]
08EB : 2603; -- . imov [load!   t0 .ret_stack_ptr]
08EC : 3680; -- | imoh
08ED : 0660; -- ' load
08EE : 27F8; -- . imov [imov!   t1 .test_arith_body_retaddr8]
08EF : 3708; -- ' imoh
08F0 : 1670; --   str     t0 t1
08F1 : 9614; --   iadd    t0 1
08F2 : 2003; -- . imov [str!    .ret_stack_ptr t0]
08F3 : 3080; -- | imoh
08F4 : 1060; -- ' str
08F5 : 201D; -- . imov [jmp!    .assert]
08F6 : 3006; -- | imoh
08F7 : A000; -- ' j_op
08F8 : 2676; -- . imov [imov! t0 .string_alloc_14]
08F9 : 3601; -- ' imoh
08FA : 5D60; -- . push [push! t0]
08FB : 2606; -- . imov [imov! t0 6]
08FC : 3600; -- ' imoh
08FD : 5D60; --   push t0
08FE : 2607; -- . imov [imov! t0 7]
08FF : 3600; -- ' imoh
0900 : 5D60; --   push t0
0901 : 67D0; -- . pop [pop! t1 t0]
0902 : 66D0; -- ' pop
0903 : 2801; --   imov t2 1  # default value
0904 : 8675; --   sub  t0 t1
0905 : 2009; -- . imov [jn!  .test_arith_body_8_0_operator_opskip]
0906 : 3009; -- | imoh
0907 : A003; -- ' j_op
0908 : 2800; --   imov t2 0
0909 : 5D80; -- . push [push! t2]
090A : 2601; -- . imov [imov! t0 1]
090B : 3600; -- ' imoh
090C : 5D60; --   push t0
090D : 67D0; -- . pop [pop! t1 t0]
090E : 66D0; -- ' pop
090F : 2801; --   imov t2 1  # default value
0910 : 8675; --   sub  t0 t1
0911 : 2015; -- . imov [jz!  .test_arith_body_8_1_operator_opskip]
0912 : 3009; -- | imoh
0913 : A001; -- ' j_op
0914 : 2800; --   imov t2 0
0915 : 5D80; -- . push [push! t2]
0916 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0917 : 3680; -- | imoh
0918 : 0660; -- ' load
0919 : 2723; -- . imov [imov!   t1 .test_arith_body_retaddr9]
091A : 3709; -- ' imoh
091B : 1670; --   str     t0 t1
091C : 9614; --   iadd    t0 1
091D : 2003; -- . imov [str!    .ret_stack_ptr t0]
091E : 3080; -- | imoh
091F : 1060; -- ' str
0920 : 201D; -- . imov [jmp!    .assert]
0921 : 3006; -- | imoh
0922 : A000; -- ' j_op
0923 : 2670; -- . imov [imov! t0 .string_alloc_15]
0924 : 3601; -- ' imoh
0925 : 5D60; -- . push [push! t0]
0926 : 2607; -- . imov [imov! t0 7]
0927 : 3600; -- ' imoh
0928 : 5D60; --   push t0
0929 : 2607; -- . imov [imov! t0 7]
092A : 3600; -- ' imoh
092B : 5D60; --   push t0
092C : 67D0; -- . pop [pop! t1 t0]
092D : 66D0; -- ' pop
092E : 2801; --   imov t2 1  # default value
092F : 8675; --   sub  t0 t1
0930 : 2034; -- . imov [jn!  .test_arith_body_9_0_operator_opskip]
0931 : 3009; -- | imoh
0932 : A003; -- ' j_op
0933 : 2800; --   imov t2 0
0934 : 5D80; -- . push [push! t2]
0935 : 2600; -- . imov [imov! t0 0]
0936 : 3600; -- ' imoh
0937 : 5D60; --   push t0
0938 : 67D0; -- . pop [pop! t1 t0]
0939 : 66D0; -- ' pop
093A : 2801; --   imov t2 1  # default value
093B : 8675; --   sub  t0 t1
093C : 2040; -- . imov [jz!  .test_arith_body_9_1_operator_opskip]
093D : 3009; -- | imoh
093E : A001; -- ' j_op
093F : 2800; --   imov t2 0
0940 : 5D80; -- . push [push! t2]
0941 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0942 : 3680; -- | imoh
0943 : 0660; -- ' load
0944 : 274E; -- . imov [imov!   t1 .test_arith_body_retaddr10]
0945 : 3709; -- ' imoh
0946 : 1670; --   str     t0 t1
0947 : 9614; --   iadd    t0 1
0948 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0949 : 3080; -- | imoh
094A : 1060; -- ' str
094B : 201D; -- . imov [jmp!    .assert]
094C : 3006; -- | imoh
094D : A000; -- ' j_op
094E : 26D7; -- . imov [imov! t0 .string_alloc_16]
094F : 3602; -- ' imoh
0950 : 5D60; -- . push [push! t0]
0951 : 2608; -- . imov [imov! t0 8]
0952 : 3600; -- ' imoh
0953 : 5D60; --   push t0
0954 : 2607; -- . imov [imov! t0 7]
0955 : 3600; -- ' imoh
0956 : 5D60; --   push t0
0957 : 67D0; -- . pop [pop! t1 t0]
0958 : 66D0; -- ' pop
0959 : 2801; --   imov t2 1  # default value
095A : 8675; --   sub  t0 t1
095B : 205F; -- . imov [jn!  .test_arith_body_10_0_operator_opskip]
095C : 3009; -- | imoh
095D : A003; -- ' j_op
095E : 2800; --   imov t2 0
095F : 5D80; -- . push [push! t2]
0960 : 2600; -- . imov [imov! t0 0]
0961 : 3600; -- ' imoh
0962 : 5D60; --   push t0
0963 : 67D0; -- . pop [pop! t1 t0]
0964 : 66D0; -- ' pop
0965 : 2801; --   imov t2 1  # default value
0966 : 8675; --   sub  t0 t1
0967 : 206B; -- . imov [jz!  .test_arith_body_10_1_operator_opskip]
0968 : 3009; -- | imoh
0969 : A001; -- ' j_op
096A : 2800; --   imov t2 0
096B : 5D80; -- . push [push! t2]
096C : 2603; -- . imov [load!   t0 .ret_stack_ptr]
096D : 3680; -- | imoh
096E : 0660; -- ' load
096F : 2779; -- . imov [imov!   t1 .test_arith_body_retaddr11]
0970 : 3709; -- ' imoh
0971 : 1670; --   str     t0 t1
0972 : 9614; --   iadd    t0 1
0973 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0974 : 3080; -- | imoh
0975 : 1060; -- ' str
0976 : 201D; -- . imov [jmp!    .assert]
0977 : 3006; -- | imoh
0978 : A000; -- ' j_op
0979 : 26E4; -- . imov [imov! t0 .string_alloc_17]
097A : 3601; -- ' imoh
097B : 5D60; -- . push [push! t0]
097C : 2606; -- . imov [imov! t0 6]
097D : 3600; -- ' imoh
097E : 5D60; --   push t0
097F : 2607; -- . imov [imov! t0 7]
0980 : 3600; -- ' imoh
0981 : 5D60; --   push t0
0982 : 67D0; -- . pop [pop! t1 t0]
0983 : 66D0; -- ' pop
0984 : 2800; --   imov t2 0  # default value
0985 : 8675; --   sub  t0 t1
0986 : 208A; -- . imov [jp!  .test_arith_body_11_0_operator_opskip]
0987 : 3009; -- | imoh
0988 : A004; -- ' j_op
0989 : 2801; --   imov t2 1
098A : 5D80; -- . push [push! t2]
098B : 2601; -- . imov [imov! t0 1]
098C : 3600; -- ' imoh
098D : 5D60; --   push t0
098E : 67D0; -- . pop [pop! t1 t0]
098F : 66D0; -- ' pop
0990 : 2801; --   imov t2 1  # default value
0991 : 8675; --   sub  t0 t1
0992 : 2096; -- . imov [jz!  .test_arith_body_11_1_operator_opskip]
0993 : 3009; -- | imoh
0994 : A001; -- ' j_op
0995 : 2800; --   imov t2 0
0996 : 5D80; -- . push [push! t2]
0997 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0998 : 3680; -- | imoh
0999 : 0660; -- ' load
099A : 27A4; -- . imov [imov!   t1 .test_arith_body_retaddr12]
099B : 3709; -- ' imoh
099C : 1670; --   str     t0 t1
099D : 9614; --   iadd    t0 1
099E : 2003; -- . imov [str!    .ret_stack_ptr t0]
099F : 3080; -- | imoh
09A0 : 1060; -- ' str
09A1 : 201D; -- . imov [jmp!    .assert]
09A2 : 3006; -- | imoh
09A3 : A000; -- ' j_op
09A4 : 2638; -- . imov [imov! t0 .string_alloc_18]
09A5 : 3601; -- ' imoh
09A6 : 5D60; -- . push [push! t0]
09A7 : 2607; -- . imov [imov! t0 7]
09A8 : 3600; -- ' imoh
09A9 : 5D60; --   push t0
09AA : 2607; -- . imov [imov! t0 7]
09AB : 3600; -- ' imoh
09AC : 5D60; --   push t0
09AD : 67D0; -- . pop [pop! t1 t0]
09AE : 66D0; -- ' pop
09AF : 2800; --   imov t2 0  # default value
09B0 : 8675; --   sub  t0 t1
09B1 : 20B5; -- . imov [jp!  .test_arith_body_12_0_operator_opskip]
09B2 : 3009; -- | imoh
09B3 : A004; -- ' j_op
09B4 : 2801; --   imov t2 1
09B5 : 5D80; -- . push [push! t2]
09B6 : 2601; -- . imov [imov! t0 1]
09B7 : 3600; -- ' imoh
09B8 : 5D60; --   push t0
09B9 : 67D0; -- . pop [pop! t1 t0]
09BA : 66D0; -- ' pop
09BB : 2801; --   imov t2 1  # default value
09BC : 8675; --   sub  t0 t1
09BD : 20C1; -- . imov [jz!  .test_arith_body_12_1_operator_opskip]
09BE : 3009; -- | imoh
09BF : A001; -- ' j_op
09C0 : 2800; --   imov t2 0
09C1 : 5D80; -- . push [push! t2]
09C2 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
09C3 : 3680; -- | imoh
09C4 : 0660; -- ' load
09C5 : 27CF; -- . imov [imov!   t1 .test_arith_body_retaddr13]
09C6 : 3709; -- ' imoh
09C7 : 1670; --   str     t0 t1
09C8 : 9614; --   iadd    t0 1
09C9 : 2003; -- . imov [str!    .ret_stack_ptr t0]
09CA : 3080; -- | imoh
09CB : 1060; -- ' str
09CC : 201D; -- . imov [jmp!    .assert]
09CD : 3006; -- | imoh
09CE : A000; -- ' j_op
09CF : 2698; -- . imov [imov! t0 .string_alloc_19]
09D0 : 3602; -- ' imoh
09D1 : 5D60; -- . push [push! t0]
09D2 : 2608; -- . imov [imov! t0 8]
09D3 : 3600; -- ' imoh
09D4 : 5D60; --   push t0
09D5 : 2607; -- . imov [imov! t0 7]
09D6 : 3600; -- ' imoh
09D7 : 5D60; --   push t0
09D8 : 67D0; -- . pop [pop! t1 t0]
09D9 : 66D0; -- ' pop
09DA : 2800; --   imov t2 0  # default value
09DB : 8675; --   sub  t0 t1
09DC : 20E0; -- . imov [jp!  .test_arith_body_13_0_operator_opskip]
09DD : 3009; -- | imoh
09DE : A004; -- ' j_op
09DF : 2801; --   imov t2 1
09E0 : 5D80; -- . push [push! t2]
09E1 : 2600; -- . imov [imov! t0 0]
09E2 : 3600; -- ' imoh
09E3 : 5D60; --   push t0
09E4 : 67D0; -- . pop [pop! t1 t0]
09E5 : 66D0; -- ' pop
09E6 : 2801; --   imov t2 1  # default value
09E7 : 8675; --   sub  t0 t1
09E8 : 20EC; -- . imov [jz!  .test_arith_body_13_1_operator_opskip]
09E9 : 3009; -- | imoh
09EA : A001; -- ' j_op
09EB : 2800; --   imov t2 0
09EC : 5D80; -- . push [push! t2]
09ED : 2603; -- . imov [load!   t0 .ret_stack_ptr]
09EE : 3680; -- | imoh
09EF : 0660; -- ' load
09F0 : 27FA; -- . imov [imov!   t1 .test_arith_body_retaddr14]
09F1 : 3709; -- ' imoh
09F2 : 1670; --   str     t0 t1
09F3 : 9614; --   iadd    t0 1
09F4 : 2003; -- . imov [str!    .ret_stack_ptr t0]
09F5 : 3080; -- | imoh
09F6 : 1060; -- ' str
09F7 : 201D; -- . imov [jmp!    .assert]
09F8 : 3006; -- | imoh
09F9 : A000; -- ' j_op
09FA : 2603; -- . imov [load!   t0 .ret_stack_ptr]
09FB : 3680; -- | imoh
09FC : 0660; -- ' load
09FD : 9615; --   isub    t0 1
09FE : 0760; --   load    t1 t0
09FF : 2003; -- . imov [str!    .ret_stack_ptr t0]
0A00 : 3080; -- | imoh
0A01 : 1060; -- ' str
0A02 : A700; --   jmp     t1
0A03 : 26EB; -- . imov [imov! t0 .string_alloc_20]
0A04 : 3601; -- ' imoh
0A05 : 5D60; -- . push [push! t0]
0A06 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0A07 : 3680; -- | imoh
0A08 : 0660; -- ' load
0A09 : 2713; -- . imov [imov!   t1 .test_logical_body_retaddr0]
0A0A : 370A; -- ' imoh
0A0B : 1670; --   str     t0 t1
0A0C : 9614; --   iadd    t0 1
0A0D : 2003; -- . imov [str!    .ret_stack_ptr t0]
0A0E : 3080; -- | imoh
0A0F : 1060; -- ' str
0A10 : 20F8; -- . imov [jmp!    .print_string]
0A11 : 3004; -- | imoh
0A12 : A000; -- ' j_op
0A13 : 2602; -- . imov [imov! t0 .string_alloc_21]
0A14 : 3602; -- ' imoh
0A15 : 5D60; -- . push [push! t0]
0A16 : 2601; -- . imov [imov! t0 1]
0A17 : 3600; -- ' imoh
0A18 : 5D60; --   push t0
0A19 : 2601; -- . imov [imov! t0 1]
0A1A : 3600; -- ' imoh
0A1B : 5D60; --   push t0
0A1C : 67D0; -- . pop [pop! t1 t0]
0A1D : 66D0; -- ' pop
0A1E : 2800; --   imov t2 0
0A1F : 9607; --   tst  t0
0A20 : 2028; -- . imov [jz! .test_logical_body_0_0_operator_andfalse]
0A21 : 300A; -- | imoh
0A22 : A001; -- ' j_op
0A23 : 9707; --   tst  t1
0A24 : 2028; -- . imov [jz! .test_logical_body_0_0_operator_andfalse]
0A25 : 300A; -- | imoh
0A26 : A001; -- ' j_op
0A27 : 2801; --   imov t2 1
0A28 : 5D80; -- . push [push! t2]
0A29 : 2601; -- . imov [imov! t0 1]
0A2A : 3600; -- ' imoh
0A2B : 5D60; --   push t0
0A2C : 67D0; -- . pop [pop! t1 t0]
0A2D : 66D0; -- ' pop
0A2E : 2801; --   imov t2 1  # default value
0A2F : 8675; --   sub  t0 t1
0A30 : 2034; -- . imov [jz!  .test_logical_body_0_1_operator_opskip]
0A31 : 300A; -- | imoh
0A32 : A001; -- ' j_op
0A33 : 2800; --   imov t2 0
0A34 : 5D80; -- . push [push! t2]
0A35 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0A36 : 3680; -- | imoh
0A37 : 0660; -- ' load
0A38 : 2742; -- . imov [imov!   t1 .test_logical_body_retaddr1]
0A39 : 370A; -- ' imoh
0A3A : 1670; --   str     t0 t1
0A3B : 9614; --   iadd    t0 1
0A3C : 2003; -- . imov [str!    .ret_stack_ptr t0]
0A3D : 3080; -- | imoh
0A3E : 1060; -- ' str
0A3F : 201D; -- . imov [jmp!    .assert]
0A40 : 3006; -- | imoh
0A41 : A000; -- ' j_op
0A42 : 26E2; -- . imov [imov! t0 .string_alloc_22]
0A43 : 3602; -- ' imoh
0A44 : 5D60; -- . push [push! t0]
0A45 : 2600; -- . imov [imov! t0 0]
0A46 : 3600; -- ' imoh
0A47 : 5D60; --   push t0
0A48 : 2601; -- . imov [imov! t0 1]
0A49 : 3600; -- ' imoh
0A4A : 5D60; --   push t0
0A4B : 67D0; -- . pop [pop! t1 t0]
0A4C : 66D0; -- ' pop
0A4D : 2800; --   imov t2 0
0A4E : 9607; --   tst  t0
0A4F : 2057; -- . imov [jz! .test_logical_body_1_0_operator_andfalse]
0A50 : 300A; -- | imoh
0A51 : A001; -- ' j_op
0A52 : 9707; --   tst  t1
0A53 : 2057; -- . imov [jz! .test_logical_body_1_0_operator_andfalse]
0A54 : 300A; -- | imoh
0A55 : A001; -- ' j_op
0A56 : 2801; --   imov t2 1
0A57 : 5D80; -- . push [push! t2]
0A58 : 2600; -- . imov [imov! t0 0]
0A59 : 3600; -- ' imoh
0A5A : 5D60; --   push t0
0A5B : 67D0; -- . pop [pop! t1 t0]
0A5C : 66D0; -- ' pop
0A5D : 2801; --   imov t2 1  # default value
0A5E : 8675; --   sub  t0 t1
0A5F : 2063; -- . imov [jz!  .test_logical_body_1_1_operator_opskip]
0A60 : 300A; -- | imoh
0A61 : A001; -- ' j_op
0A62 : 2800; --   imov t2 0
0A63 : 5D80; -- . push [push! t2]
0A64 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0A65 : 3680; -- | imoh
0A66 : 0660; -- ' load
0A67 : 2771; -- . imov [imov!   t1 .test_logical_body_retaddr2]
0A68 : 370A; -- ' imoh
0A69 : 1670; --   str     t0 t1
0A6A : 9614; --   iadd    t0 1
0A6B : 2003; -- . imov [str!    .ret_stack_ptr t0]
0A6C : 3080; -- | imoh
0A6D : 1060; -- ' str
0A6E : 201D; -- . imov [jmp!    .assert]
0A6F : 3006; -- | imoh
0A70 : A000; -- ' j_op
0A71 : 26B5; -- . imov [imov! t0 .string_alloc_23]
0A72 : 3601; -- ' imoh
0A73 : 5D60; -- . push [push! t0]
0A74 : 2600; -- . imov [imov! t0 0]
0A75 : 3600; -- ' imoh
0A76 : 5D60; --   push t0
0A77 : 2600; -- . imov [imov! t0 0]
0A78 : 3600; -- ' imoh
0A79 : 5D60; --   push t0
0A7A : 67D0; -- . pop [pop! t1 t0]
0A7B : 66D0; -- ' pop
0A7C : 2801; --   imov t2 1
0A7D : 9607; --   tst  t0
0A7E : 2086; -- . imov [jnz! .test_logical_body_2_0_operator_ortrue]
0A7F : 300A; -- | imoh
0A80 : A002; -- ' j_op
0A81 : 9707; --   tst  t1
0A82 : 2086; -- . imov [jnz! .test_logical_body_2_0_operator_ortrue]
0A83 : 300A; -- | imoh
0A84 : A002; -- ' j_op
0A85 : 2800; --   imov t2 0
0A86 : 5D80; -- . push [push! t2]
0A87 : 2600; -- . imov [imov! t0 0]
0A88 : 3600; -- ' imoh
0A89 : 5D60; --   push t0
0A8A : 67D0; -- . pop [pop! t1 t0]
0A8B : 66D0; -- ' pop
0A8C : 2801; --   imov t2 1  # default value
0A8D : 8675; --   sub  t0 t1
0A8E : 2092; -- . imov [jz!  .test_logical_body_2_1_operator_opskip]
0A8F : 300A; -- | imoh
0A90 : A001; -- ' j_op
0A91 : 2800; --   imov t2 0
0A92 : 5D80; -- . push [push! t2]
0A93 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0A94 : 3680; -- | imoh
0A95 : 0660; -- ' load
0A96 : 27A0; -- . imov [imov!   t1 .test_logical_body_retaddr3]
0A97 : 370A; -- ' imoh
0A98 : 1670; --   str     t0 t1
0A99 : 9614; --   iadd    t0 1
0A9A : 2003; -- . imov [str!    .ret_stack_ptr t0]
0A9B : 3080; -- | imoh
0A9C : 1060; -- ' str
0A9D : 201D; -- . imov [jmp!    .assert]
0A9E : 3006; -- | imoh
0A9F : A000; -- ' j_op
0AA0 : 268F; -- . imov [imov! t0 .string_alloc_24]
0AA1 : 3601; -- ' imoh
0AA2 : 5D60; -- . push [push! t0]
0AA3 : 2601; -- . imov [imov! t0 1]
0AA4 : 3600; -- ' imoh
0AA5 : 5D60; --   push t0
0AA6 : 2600; -- . imov [imov! t0 0]
0AA7 : 3600; -- ' imoh
0AA8 : 5D60; --   push t0
0AA9 : 67D0; -- . pop [pop! t1 t0]
0AAA : 66D0; -- ' pop
0AAB : 2801; --   imov t2 1
0AAC : 9607; --   tst  t0
0AAD : 20B5; -- . imov [jnz! .test_logical_body_3_0_operator_ortrue]
0AAE : 300A; -- | imoh
0AAF : A002; -- ' j_op
0AB0 : 9707; --   tst  t1
0AB1 : 20B5; -- . imov [jnz! .test_logical_body_3_0_operator_ortrue]
0AB2 : 300A; -- | imoh
0AB3 : A002; -- ' j_op
0AB4 : 2800; --   imov t2 0
0AB5 : 5D80; -- . push [push! t2]
0AB6 : 2601; -- . imov [imov! t0 1]
0AB7 : 3600; -- ' imoh
0AB8 : 5D60; --   push t0
0AB9 : 67D0; -- . pop [pop! t1 t0]
0ABA : 66D0; -- ' pop
0ABB : 2801; --   imov t2 1  # default value
0ABC : 8675; --   sub  t0 t1
0ABD : 20C1; -- . imov [jz!  .test_logical_body_3_1_operator_opskip]
0ABE : 300A; -- | imoh
0ABF : A001; -- ' j_op
0AC0 : 2800; --   imov t2 0
0AC1 : 5D80; -- . push [push! t2]
0AC2 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0AC3 : 3680; -- | imoh
0AC4 : 0660; -- ' load
0AC5 : 27CF; -- . imov [imov!   t1 .test_logical_body_retaddr4]
0AC6 : 370A; -- ' imoh
0AC7 : 1670; --   str     t0 t1
0AC8 : 9614; --   iadd    t0 1
0AC9 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0ACA : 3080; -- | imoh
0ACB : 1060; -- ' str
0ACC : 201D; -- . imov [jmp!    .assert]
0ACD : 3006; -- | imoh
0ACE : A000; -- ' j_op
0ACF : 26BF; -- . imov [imov! t0 .string_alloc_25]
0AD0 : 3601; -- ' imoh
0AD1 : 5D60; -- . push [push! t0]
0AD2 : 2601; -- . imov [imov! t0 1]
0AD3 : 3600; -- ' imoh
0AD4 : 5D60; --   push t0
0AD5 : 66D0; -- . pop [pop! t0]
0AD6 : 2701; --   imov t1 1
0AD7 : 9607; --   tst  t0
0AD8 : 20DC; -- . imov [jz! .test_logical_body_4_0_operator_nottrue]
0AD9 : 300A; -- | imoh
0ADA : A001; -- ' j_op
0ADB : 2700; --   imov t1 0
0ADC : 5D70; -- . push [push! t1]
0ADD : 2600; -- . imov [imov! t0 0]
0ADE : 3600; -- ' imoh
0ADF : 5D60; --   push t0
0AE0 : 67D0; -- . pop [pop! t1 t0]
0AE1 : 66D0; -- ' pop
0AE2 : 2801; --   imov t2 1  # default value
0AE3 : 8675; --   sub  t0 t1
0AE4 : 20E8; -- . imov [jz!  .test_logical_body_4_1_operator_opskip]
0AE5 : 300A; -- | imoh
0AE6 : A001; -- ' j_op
0AE7 : 2800; --   imov t2 0
0AE8 : 5D80; -- . push [push! t2]
0AE9 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0AEA : 3680; -- | imoh
0AEB : 0660; -- ' load
0AEC : 27F6; -- . imov [imov!   t1 .test_logical_body_retaddr5]
0AED : 370A; -- ' imoh
0AEE : 1670; --   str     t0 t1
0AEF : 9614; --   iadd    t0 1
0AF0 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0AF1 : 3080; -- | imoh
0AF2 : 1060; -- ' str
0AF3 : 201D; -- . imov [jmp!    .assert]
0AF4 : 3006; -- | imoh
0AF5 : A000; -- ' j_op
0AF6 : 262C; -- . imov [imov! t0 .string_alloc_26]
0AF7 : 3600; -- ' imoh
0AF8 : 5D60; -- . push [push! t0]
0AF9 : 2600; -- . imov [imov! t0 0]
0AFA : 3600; -- ' imoh
0AFB : 5D60; --   push t0
0AFC : 66D0; -- . pop [pop! t0]
0AFD : 2701; --   imov t1 1
0AFE : 9607; --   tst  t0
0AFF : 2003; -- . imov [jz! .test_logical_body_5_0_operator_nottrue]
0B00 : 300B; -- | imoh
0B01 : A001; -- ' j_op
0B02 : 2700; --   imov t1 0
0B03 : 5D70; -- . push [push! t1]
0B04 : 2601; -- . imov [imov! t0 1]
0B05 : 3600; -- ' imoh
0B06 : 5D60; --   push t0
0B07 : 67D0; -- . pop [pop! t1 t0]
0B08 : 66D0; -- ' pop
0B09 : 2801; --   imov t2 1  # default value
0B0A : 8675; --   sub  t0 t1
0B0B : 200F; -- . imov [jz!  .test_logical_body_5_1_operator_opskip]
0B0C : 300B; -- | imoh
0B0D : A001; -- ' j_op
0B0E : 2800; --   imov t2 0
0B0F : 5D80; -- . push [push! t2]
0B10 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B11 : 3680; -- | imoh
0B12 : 0660; -- ' load
0B13 : 271D; -- . imov [imov!   t1 .test_logical_body_retaddr6]
0B14 : 370B; -- ' imoh
0B15 : 1670; --   str     t0 t1
0B16 : 9614; --   iadd    t0 1
0B17 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B18 : 3080; -- | imoh
0B19 : 1060; -- ' str
0B1A : 201D; -- . imov [jmp!    .assert]
0B1B : 3006; -- | imoh
0B1C : A000; -- ' j_op
0B1D : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B1E : 3680; -- | imoh
0B1F : 0660; -- ' load
0B20 : 9615; --   isub    t0 1
0B21 : 0760; --   load    t1 t0
0B22 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B23 : 3080; -- | imoh
0B24 : 1060; -- ' str
0B25 : A700; --   jmp     t1
0B26 : 26C3; -- . imov [imov! t0 .string_alloc_27]
0B27 : 3601; -- ' imoh
0B28 : 5D60; -- . push [push! t0]
0B29 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B2A : 3680; -- | imoh
0B2B : 0660; -- ' load
0B2C : 2736; -- . imov [imov!   t1 .test_strlen_body_retaddr0]
0B2D : 370B; -- ' imoh
0B2E : 1670; --   str     t0 t1
0B2F : 9614; --   iadd    t0 1
0B30 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B31 : 3080; -- | imoh
0B32 : 1060; -- ' str
0B33 : 20F8; -- . imov [jmp!    .print_string]
0B34 : 3004; -- | imoh
0B35 : A000; -- ' j_op
0B36 : 2648; -- . imov [imov! t0 .string_alloc_28]
0B37 : 3603; -- ' imoh
0B38 : 5D60; -- . push [push! t0]
0B39 : 267C; -- . imov [imov! t0 .string_alloc_29]
0B3A : 3602; -- ' imoh
0B3B : 5D60; -- . push [push! t0]
0B3C : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B3D : 3680; -- | imoh
0B3E : 0660; -- ' load
0B3F : 2749; -- . imov [imov!   t1 .test_strlen_body_0_retaddr0]
0B40 : 370B; -- ' imoh
0B41 : 1670; --   str     t0 t1
0B42 : 9614; --   iadd    t0 1
0B43 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B44 : 3080; -- | imoh
0B45 : 1060; -- ' str
0B46 : 2044; -- . imov [jmp!    .strlen]
0B47 : 3005; -- | imoh
0B48 : A000; -- ' j_op
0B49 : 2604; -- . imov [imov! t0 4]
0B4A : 3600; -- ' imoh
0B4B : 5D60; --   push t0
0B4C : 67D0; -- . pop [pop! t1 t0]
0B4D : 66D0; -- ' pop
0B4E : 2801; --   imov t2 1  # default value
0B4F : 8675; --   sub  t0 t1
0B50 : 2054; -- . imov [jz!  .test_strlen_body_0_0_operator_opskip]
0B51 : 300B; -- | imoh
0B52 : A001; -- ' j_op
0B53 : 2800; --   imov t2 0
0B54 : 5D80; -- . push [push! t2]
0B55 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B56 : 3680; -- | imoh
0B57 : 0660; -- ' load
0B58 : 2762; -- . imov [imov!   t1 .test_strlen_body_retaddr1]
0B59 : 370B; -- ' imoh
0B5A : 1670; --   str     t0 t1
0B5B : 9614; --   iadd    t0 1
0B5C : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B5D : 3080; -- | imoh
0B5E : 1060; -- ' str
0B5F : 201D; -- . imov [jmp!    .assert]
0B60 : 3006; -- | imoh
0B61 : A000; -- ' j_op
0B62 : 26F8; -- . imov [imov! t0 .string_alloc_30]
0B63 : 3602; -- ' imoh
0B64 : 5D60; -- . push [push! t0]
0B65 : 267F; -- . imov [imov! t0 .string_alloc_31]
0B66 : 3601; -- ' imoh
0B67 : 5D60; -- . push [push! t0]
0B68 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B69 : 3680; -- | imoh
0B6A : 0660; -- ' load
0B6B : 2775; -- . imov [imov!   t1 .test_strlen_body_1_retaddr0]
0B6C : 370B; -- ' imoh
0B6D : 1670; --   str     t0 t1
0B6E : 9614; --   iadd    t0 1
0B6F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B70 : 3080; -- | imoh
0B71 : 1060; -- ' str
0B72 : 2044; -- . imov [jmp!    .strlen]
0B73 : 3005; -- | imoh
0B74 : A000; -- ' j_op
0B75 : 2600; -- . imov [imov! t0 0]
0B76 : 3600; -- ' imoh
0B77 : 5D60; --   push t0
0B78 : 67D0; -- . pop [pop! t1 t0]
0B79 : 66D0; -- ' pop
0B7A : 2801; --   imov t2 1  # default value
0B7B : 8675; --   sub  t0 t1
0B7C : 2080; -- . imov [jz!  .test_strlen_body_1_0_operator_opskip]
0B7D : 300B; -- | imoh
0B7E : A001; -- ' j_op
0B7F : 2800; --   imov t2 0
0B80 : 5D80; -- . push [push! t2]
0B81 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B82 : 3680; -- | imoh
0B83 : 0660; -- ' load
0B84 : 278E; -- . imov [imov!   t1 .test_strlen_body_retaddr2]
0B85 : 370B; -- ' imoh
0B86 : 1670; --   str     t0 t1
0B87 : 9614; --   iadd    t0 1
0B88 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B89 : 3080; -- | imoh
0B8A : 1060; -- ' str
0B8B : 201D; -- . imov [jmp!    .assert]
0B8C : 3006; -- | imoh
0B8D : A000; -- ' j_op
0B8E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B8F : 3680; -- | imoh
0B90 : 0660; -- ' load
0B91 : 9615; --   isub    t0 1
0B92 : 0760; --   load    t1 t0
0B93 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0B94 : 3080; -- | imoh
0B95 : 1060; -- ' str
0B96 : A700; --   jmp     t1
0B97 : 26E9; -- . imov [imov! t0 .string_alloc_32]
0B98 : 3602; -- ' imoh
0B99 : 5D60; -- . push [push! t0]
0B9A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0B9B : 3680; -- | imoh
0B9C : 0660; -- ' load
0B9D : 27A7; -- . imov [imov!   t1 .test_streq_body_retaddr0]
0B9E : 370B; -- ' imoh
0B9F : 1670; --   str     t0 t1
0BA0 : 9614; --   iadd    t0 1
0BA1 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0BA2 : 3080; -- | imoh
0BA3 : 1060; -- ' str
0BA4 : 20F8; -- . imov [jmp!    .print_string]
0BA5 : 3004; -- | imoh
0BA6 : A000; -- ' j_op
0BA7 : 2687; -- . imov [imov! t0 .string_alloc_33]
0BA8 : 3602; -- ' imoh
0BA9 : 5D60; -- . push [push! t0]
0BAA : 267F; -- . imov [imov! t0 .string_alloc_31]
0BAB : 3601; -- ' imoh
0BAC : 5D60; -- . push [push! t0]
0BAD : 267F; -- . imov [imov! t0 .string_alloc_31]
0BAE : 3601; -- ' imoh
0BAF : 5D60; -- . push [push! t0]
0BB0 : 2600; -- . imov [imov! t0 0]
0BB1 : 3600; -- ' imoh
0BB2 : 5D60; --   push t0
0BB3 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0BB4 : 3680; -- | imoh
0BB5 : 0660; -- ' load
0BB6 : 27C0; -- . imov [imov!   t1 .test_streq_body_0_retaddr0]
0BB7 : 370B; -- ' imoh
0BB8 : 1670; --   str     t0 t1
0BB9 : 9614; --   iadd    t0 1
0BBA : 2003; -- . imov [str!    .ret_stack_ptr t0]
0BBB : 3080; -- | imoh
0BBC : 1060; -- ' str
0BBD : 206D; -- . imov [jmp!    .streq]
0BBE : 3005; -- | imoh
0BBF : A000; -- ' j_op
0BC0 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0BC1 : 3680; -- | imoh
0BC2 : 0660; -- ' load
0BC3 : 27CD; -- . imov [imov!   t1 .test_streq_body_retaddr1]
0BC4 : 370B; -- ' imoh
0BC5 : 1670; --   str     t0 t1
0BC6 : 9614; --   iadd    t0 1
0BC7 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0BC8 : 3080; -- | imoh
0BC9 : 1060; -- ' str
0BCA : 201D; -- . imov [jmp!    .assert]
0BCB : 3006; -- | imoh
0BCC : A000; -- ' j_op
0BCD : 2654; -- . imov [imov! t0 .string_alloc_36]
0BCE : 3602; -- ' imoh
0BCF : 5D60; -- . push [push! t0]
0BD0 : 267A; -- . imov [imov! t0 .string_alloc_37]
0BD1 : 3602; -- ' imoh
0BD2 : 5D60; -- . push [push! t0]
0BD3 : 267F; -- . imov [imov! t0 .string_alloc_31]
0BD4 : 3601; -- ' imoh
0BD5 : 5D60; -- . push [push! t0]
0BD6 : 2600; -- . imov [imov! t0 0]
0BD7 : 3600; -- ' imoh
0BD8 : 5D60; --   push t0
0BD9 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0BDA : 3680; -- | imoh
0BDB : 0660; -- ' load
0BDC : 27E6; -- . imov [imov!   t1 .test_streq_body_1_retaddr0]
0BDD : 370B; -- ' imoh
0BDE : 1670; --   str     t0 t1
0BDF : 9614; --   iadd    t0 1
0BE0 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0BE1 : 3080; -- | imoh
0BE2 : 1060; -- ' str
0BE3 : 206D; -- . imov [jmp!    .streq]
0BE4 : 3005; -- | imoh
0BE5 : A000; -- ' j_op
0BE6 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0BE7 : 3680; -- | imoh
0BE8 : 0660; -- ' load
0BE9 : 27F3; -- . imov [imov!   t1 .test_streq_body_retaddr2]
0BEA : 370B; -- ' imoh
0BEB : 1670; --   str     t0 t1
0BEC : 9614; --   iadd    t0 1
0BED : 2003; -- . imov [str!    .ret_stack_ptr t0]
0BEE : 3080; -- | imoh
0BEF : 1060; -- ' str
0BF0 : 201D; -- . imov [jmp!    .assert]
0BF1 : 3006; -- | imoh
0BF2 : A000; -- ' j_op
0BF3 : 2632; -- . imov [imov! t0 .string_alloc_39]
0BF4 : 3602; -- ' imoh
0BF5 : 5D60; -- . push [push! t0]
0BF6 : 267A; -- . imov [imov! t0 .string_alloc_37]
0BF7 : 3602; -- ' imoh
0BF8 : 5D60; -- . push [push! t0]
0BF9 : 267A; -- . imov [imov! t0 .string_alloc_37]
0BFA : 3602; -- ' imoh
0BFB : 5D60; -- . push [push! t0]
0BFC : 2601; -- . imov [imov! t0 1]
0BFD : 3600; -- ' imoh
0BFE : 5D60; --   push t0
0BFF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C00 : 3680; -- | imoh
0C01 : 0660; -- ' load
0C02 : 270C; -- . imov [imov!   t1 .test_streq_body_2_retaddr0]
0C03 : 370C; -- ' imoh
0C04 : 1670; --   str     t0 t1
0C05 : 9614; --   iadd    t0 1
0C06 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C07 : 3080; -- | imoh
0C08 : 1060; -- ' str
0C09 : 206D; -- . imov [jmp!    .streq]
0C0A : 3005; -- | imoh
0C0B : A000; -- ' j_op
0C0C : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C0D : 3680; -- | imoh
0C0E : 0660; -- ' load
0C0F : 2719; -- . imov [imov!   t1 .test_streq_body_retaddr3]
0C10 : 370C; -- ' imoh
0C11 : 1670; --   str     t0 t1
0C12 : 9614; --   iadd    t0 1
0C13 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C14 : 3080; -- | imoh
0C15 : 1060; -- ' str
0C16 : 201D; -- . imov [jmp!    .assert]
0C17 : 3006; -- | imoh
0C18 : A000; -- ' j_op
0C19 : 2657; -- . imov [imov! t0 .string_alloc_42]
0C1A : 3603; -- ' imoh
0C1B : 5D60; -- . push [push! t0]
0C1C : 267A; -- . imov [imov! t0 .string_alloc_37]
0C1D : 3602; -- ' imoh
0C1E : 5D60; -- . push [push! t0]
0C1F : 269F; -- . imov [imov! t0 .string_alloc_44]
0C20 : 3602; -- ' imoh
0C21 : 5D60; -- . push [push! t0]
0C22 : 2601; -- . imov [imov! t0 1]
0C23 : 3600; -- ' imoh
0C24 : 5D60; --   push t0
0C25 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C26 : 3680; -- | imoh
0C27 : 0660; -- ' load
0C28 : 2732; -- . imov [imov!   t1 .test_streq_body_3_retaddr0]
0C29 : 370C; -- ' imoh
0C2A : 1670; --   str     t0 t1
0C2B : 9614; --   iadd    t0 1
0C2C : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C2D : 3080; -- | imoh
0C2E : 1060; -- ' str
0C2F : 206D; -- . imov [jmp!    .streq]
0C30 : 3005; -- | imoh
0C31 : A000; -- ' j_op
0C32 : 2600; -- . imov [imov! t0 0]
0C33 : 3600; -- ' imoh
0C34 : 5D60; --   push t0
0C35 : 67D0; -- . pop [pop! t1 t0]
0C36 : 66D0; -- ' pop
0C37 : 2801; --   imov t2 1  # default value
0C38 : 8675; --   sub  t0 t1
0C39 : 203D; -- . imov [jz!  .test_streq_body_3_0_operator_opskip]
0C3A : 300C; -- | imoh
0C3B : A001; -- ' j_op
0C3C : 2800; --   imov t2 0
0C3D : 5D80; -- . push [push! t2]
0C3E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C3F : 3680; -- | imoh
0C40 : 0660; -- ' load
0C41 : 274B; -- . imov [imov!   t1 .test_streq_body_retaddr4]
0C42 : 370C; -- ' imoh
0C43 : 1670; --   str     t0 t1
0C44 : 9614; --   iadd    t0 1
0C45 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C46 : 3080; -- | imoh
0C47 : 1060; -- ' str
0C48 : 201D; -- . imov [jmp!    .assert]
0C49 : 3006; -- | imoh
0C4A : A000; -- ' j_op
0C4B : 26A1; -- . imov [imov! t0 .string_alloc_45]
0C4C : 3602; -- ' imoh
0C4D : 5D60; -- . push [push! t0]
0C4E : 26E0; -- . imov [imov! t0 .string_alloc_46]
0C4F : 3601; -- ' imoh
0C50 : 5D60; -- . push [push! t0]
0C51 : 2627; -- . imov [imov! t0 .string_alloc_47]
0C52 : 3600; -- ' imoh
0C53 : 5D60; -- . push [push! t0]
0C54 : 2603; -- . imov [imov! t0 3]
0C55 : 3600; -- ' imoh
0C56 : 5D60; --   push t0
0C57 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C58 : 3680; -- | imoh
0C59 : 0660; -- ' load
0C5A : 2764; -- . imov [imov!   t1 .test_streq_body_4_retaddr0]
0C5B : 370C; -- ' imoh
0C5C : 1670; --   str     t0 t1
0C5D : 9614; --   iadd    t0 1
0C5E : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C5F : 3080; -- | imoh
0C60 : 1060; -- ' str
0C61 : 206D; -- . imov [jmp!    .streq]
0C62 : 3005; -- | imoh
0C63 : A000; -- ' j_op
0C64 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C65 : 3680; -- | imoh
0C66 : 0660; -- ' load
0C67 : 2771; -- . imov [imov!   t1 .test_streq_body_retaddr5]
0C68 : 370C; -- ' imoh
0C69 : 1670; --   str     t0 t1
0C6A : 9614; --   iadd    t0 1
0C6B : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C6C : 3080; -- | imoh
0C6D : 1060; -- ' str
0C6E : 201D; -- . imov [jmp!    .assert]
0C6F : 3006; -- | imoh
0C70 : A000; -- ' j_op
0C71 : 2629; -- . imov [imov! t0 .string_alloc_48]
0C72 : 3603; -- ' imoh
0C73 : 5D60; -- . push [push! t0]
0C74 : 26DD; -- . imov [imov! t0 .string_alloc_49]
0C75 : 3602; -- ' imoh
0C76 : 5D60; -- . push [push! t0]
0C77 : 2627; -- . imov [imov! t0 .string_alloc_47]
0C78 : 3600; -- ' imoh
0C79 : 5D60; -- . push [push! t0]
0C7A : 2604; -- . imov [imov! t0 4]
0C7B : 3600; -- ' imoh
0C7C : 5D60; --   push t0
0C7D : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C7E : 3680; -- | imoh
0C7F : 0660; -- ' load
0C80 : 278A; -- . imov [imov!   t1 .test_streq_body_5_retaddr0]
0C81 : 370C; -- ' imoh
0C82 : 1670; --   str     t0 t1
0C83 : 9614; --   iadd    t0 1
0C84 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C85 : 3080; -- | imoh
0C86 : 1060; -- ' str
0C87 : 206D; -- . imov [jmp!    .streq]
0C88 : 3005; -- | imoh
0C89 : A000; -- ' j_op
0C8A : 2600; -- . imov [imov! t0 0]
0C8B : 3600; -- ' imoh
0C8C : 5D60; --   push t0
0C8D : 67D0; -- . pop [pop! t1 t0]
0C8E : 66D0; -- ' pop
0C8F : 2801; --   imov t2 1  # default value
0C90 : 8675; --   sub  t0 t1
0C91 : 2095; -- . imov [jz!  .test_streq_body_5_0_operator_opskip]
0C92 : 300C; -- | imoh
0C93 : A001; -- ' j_op
0C94 : 2800; --   imov t2 0
0C95 : 5D80; -- . push [push! t2]
0C96 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0C97 : 3680; -- | imoh
0C98 : 0660; -- ' load
0C99 : 27A3; -- . imov [imov!   t1 .test_streq_body_retaddr6]
0C9A : 370C; -- ' imoh
0C9B : 1670; --   str     t0 t1
0C9C : 9614; --   iadd    t0 1
0C9D : 2003; -- . imov [str!    .ret_stack_ptr t0]
0C9E : 3080; -- | imoh
0C9F : 1060; -- ' str
0CA0 : 201D; -- . imov [jmp!    .assert]
0CA1 : 3006; -- | imoh
0CA2 : A000; -- ' j_op
0CA3 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0CA4 : 3680; -- | imoh
0CA5 : 0660; -- ' load
0CA6 : 9615; --   isub    t0 1
0CA7 : 0760; --   load    t1 t0
0CA8 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0CA9 : 3080; -- | imoh
0CAA : 1060; -- ' str
0CAB : A700; --   jmp     t1
0CAC : 26A5; -- . imov [imov! t0 .string_alloc_51]
0CAD : 3601; -- ' imoh
0CAE : 5D60; -- . push [push! t0]
0CAF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0CB0 : 3680; -- | imoh
0CB1 : 0660; -- ' load
0CB2 : 27BC; -- . imov [imov!   t1 .test_let_body_retaddr0]
0CB3 : 370C; -- ' imoh
0CB4 : 1670; --   str     t0 t1
0CB5 : 9614; --   iadd    t0 1
0CB6 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0CB7 : 3080; -- | imoh
0CB8 : 1060; -- ' str
0CB9 : 20F8; -- . imov [jmp!    .print_string]
0CBA : 3004; -- | imoh
0CBB : A000; -- ' j_op
0CBC : 260B; -- . imov [imov! t0 11]
0CBD : 3600; -- ' imoh
0CBE : 5D60; --   push t0
0CBF : 260A; -- . imov [imov! t0 10]
0CC0 : 3600; -- ' imoh
0CC1 : 5D60; --   push t0
0CC2 : 260B; -- . imov [imov! t0 11]
0CC3 : 3600; -- ' imoh
0CC4 : 5D60; --   push t0
0CC5 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0CC6 : 3680; -- | imoh
0CC7 : 0660; -- ' load
0CC8 : 67D0; -- . pop [pop!    t1]
0CC9 : 1670; --   str     t0 t1
0CCA : 9614; --   iadd    t0 1
0CCB : 67D0; -- . pop [pop!    t1]
0CCC : 1670; --   str     t0 t1
0CCD : 9614; --   iadd    t0 1
0CCE : 2003; -- . imov [str!    .ret_stack_ptr t0]
0CCF : 3080; -- | imoh
0CD0 : 1060; -- ' str
0CD1 : 260B; -- . imov [imov! t0 11]
0CD2 : 3600; -- ' imoh
0CD3 : 5D60; --   push t0
0CD4 : 67D0; -- . pop [pop! t1 t0]
0CD5 : 66D0; -- ' pop
0CD6 : 2801; --   imov t2 1  # default value
0CD7 : 8675; --   sub  t0 t1
0CD8 : 20DC; -- . imov [jz!  .test_let_body_0_let_block_0_0_operator_opskip]
0CD9 : 300C; -- | imoh
0CDA : A001; -- ' j_op
0CDB : 2800; --   imov t2 0
0CDC : 5D80; -- . push [push! t2]
0CDD : 26FC; -- . imov [imov! t0 .string_alloc_52]
0CDE : 3601; -- ' imoh
0CDF : 5D60; -- . push [push! t0]
0CE0 : 66D0; -- . pop [pop! t0 t1]
0CE1 : 67D0; -- ' pop
0CE2 : 5D60; -- . push [push! t0 t1]
0CE3 : 5D70; -- ' push
0CE4 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0CE5 : 3680; -- | imoh
0CE6 : 0660; -- ' load
0CE7 : 27F1; -- . imov [imov!   t1 .test_let_body_0_let_block_retaddr0]
0CE8 : 370C; -- ' imoh
0CE9 : 1670; --   str     t0 t1
0CEA : 9614; --   iadd    t0 1
0CEB : 2003; -- . imov [str!    .ret_stack_ptr t0]
0CEC : 3080; -- | imoh
0CED : 1060; -- ' str
0CEE : 201D; -- . imov [jmp!    .assert]
0CEF : 3006; -- | imoh
0CF0 : A000; -- ' j_op
0CF1 : 2652; -- . imov [imov! t0 .string_alloc_53]
0CF2 : 3601; -- ' imoh
0CF3 : 5D60; -- . push [push! t0]
0CF4 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0CF5 : 3680; -- | imoh
0CF6 : 0660; -- ' load
0CF7 : 2701; -- . imov [imov!   t1 1]
0CF8 : 3700; -- ' imoh
0CF9 : 8675; --   sub     t0 t1
0CFA : 5D60; -- . push [push!   t0]
0CFB : 66D0; -- . pop [pop! t0]
0CFC : 0660; --   load t0 t0
0CFD : 5D60; -- . push [push! t0]
0CFE : 260A; -- . imov [imov! t0 10]
0CFF : 3600; -- ' imoh
0D00 : 5D60; --   push t0
0D01 : 67D0; -- . pop [pop! t1 t0]
0D02 : 66D0; -- ' pop
0D03 : 2801; --   imov t2 1  # default value
0D04 : 8675; --   sub  t0 t1
0D05 : 2009; -- . imov [jz!  .test_let_body_0_let_block_1_0_operator_opskip]
0D06 : 300D; -- | imoh
0D07 : A001; -- ' j_op
0D08 : 2800; --   imov t2 0
0D09 : 5D80; -- . push [push! t2]
0D0A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D0B : 3680; -- | imoh
0D0C : 0660; -- ' load
0D0D : 2717; -- . imov [imov!   t1 .test_let_body_0_let_block_retaddr1]
0D0E : 370D; -- ' imoh
0D0F : 1670; --   str     t0 t1
0D10 : 9614; --   iadd    t0 1
0D11 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0D12 : 3080; -- | imoh
0D13 : 1060; -- ' str
0D14 : 201D; -- . imov [jmp!    .assert]
0D15 : 3006; -- | imoh
0D16 : A000; -- ' j_op
0D17 : 267C; -- . imov [imov! t0 .string_alloc_54]
0D18 : 3601; -- ' imoh
0D19 : 5D60; -- . push [push! t0]
0D1A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D1B : 3680; -- | imoh
0D1C : 0660; -- ' load
0D1D : 2702; -- . imov [imov!   t1 2]
0D1E : 3700; -- ' imoh
0D1F : 8675; --   sub     t0 t1
0D20 : 5D60; -- . push [push!   t0]
0D21 : 66D0; -- . pop [pop! t0]
0D22 : 0660; --   load t0 t0
0D23 : 5D60; -- . push [push! t0]
0D24 : 260B; -- . imov [imov! t0 11]
0D25 : 3600; -- ' imoh
0D26 : 5D60; --   push t0
0D27 : 67D0; -- . pop [pop! t1 t0]
0D28 : 66D0; -- ' pop
0D29 : 2801; --   imov t2 1  # default value
0D2A : 8675; --   sub  t0 t1
0D2B : 202F; -- . imov [jz!  .test_let_body_0_let_block_2_0_operator_opskip]
0D2C : 300D; -- | imoh
0D2D : A001; -- ' j_op
0D2E : 2800; --   imov t2 0
0D2F : 5D80; -- . push [push! t2]
0D30 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D31 : 3680; -- | imoh
0D32 : 0660; -- ' load
0D33 : 273D; -- . imov [imov!   t1 .test_let_body_0_let_block_retaddr2]
0D34 : 370D; -- ' imoh
0D35 : 1670; --   str     t0 t1
0D36 : 9614; --   iadd    t0 1
0D37 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0D38 : 3080; -- | imoh
0D39 : 1060; -- ' str
0D3A : 201D; -- . imov [jmp!    .assert]
0D3B : 3006; -- | imoh
0D3C : A000; -- ' j_op
0D3D : 260C; -- . imov [imov! t0 12]
0D3E : 3600; -- ' imoh
0D3F : 5D60; --   push t0
0D40 : 260D; -- . imov [imov! t0 13]
0D41 : 3600; -- ' imoh
0D42 : 5D60; --   push t0
0D43 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D44 : 3680; -- | imoh
0D45 : 0660; -- ' load
0D46 : 67D0; -- . pop [pop!    t1]
0D47 : 1670; --   str     t0 t1
0D48 : 9614; --   iadd    t0 1
0D49 : 67D0; -- . pop [pop!    t1]
0D4A : 1670; --   str     t0 t1
0D4B : 9614; --   iadd    t0 1
0D4C : 2003; -- . imov [str!    .ret_stack_ptr t0]
0D4D : 3080; -- | imoh
0D4E : 1060; -- ' str
0D4F : 26BC; -- . imov [imov! t0 .string_alloc_55]
0D50 : 3601; -- ' imoh
0D51 : 5D60; -- . push [push! t0]
0D52 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D53 : 3680; -- | imoh
0D54 : 0660; -- ' load
0D55 : 2703; -- . imov [imov!   t1 3]
0D56 : 3700; -- ' imoh
0D57 : 8675; --   sub     t0 t1
0D58 : 5D60; -- . push [push!   t0]
0D59 : 66D0; -- . pop [pop! t0]
0D5A : 0660; --   load t0 t0
0D5B : 5D60; -- . push [push! t0]
0D5C : 260A; -- . imov [imov! t0 10]
0D5D : 3600; -- ' imoh
0D5E : 5D60; --   push t0
0D5F : 67D0; -- . pop [pop! t1 t0]
0D60 : 66D0; -- ' pop
0D61 : 2801; --   imov t2 1  # default value
0D62 : 8675; --   sub  t0 t1
0D63 : 2067; -- . imov [jz!  .test_let_body_0_let_block_3_let_block_0_0_operator_opskip]
0D64 : 300D; -- | imoh
0D65 : A001; -- ' j_op
0D66 : 2800; --   imov t2 0
0D67 : 5D80; -- . push [push! t2]
0D68 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D69 : 3680; -- | imoh
0D6A : 0660; -- ' load
0D6B : 2775; -- . imov [imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr0]
0D6C : 370D; -- ' imoh
0D6D : 1670; --   str     t0 t1
0D6E : 9614; --   iadd    t0 1
0D6F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0D70 : 3080; -- | imoh
0D71 : 1060; -- ' str
0D72 : 201D; -- . imov [jmp!    .assert]
0D73 : 3006; -- | imoh
0D74 : A000; -- ' j_op
0D75 : 26FF; -- . imov [imov! t0 .string_alloc_56]
0D76 : 3601; -- ' imoh
0D77 : 5D60; -- . push [push! t0]
0D78 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D79 : 3680; -- | imoh
0D7A : 0660; -- ' load
0D7B : 2701; -- . imov [imov!   t1 1]
0D7C : 3700; -- ' imoh
0D7D : 8675; --   sub     t0 t1
0D7E : 5D60; -- . push [push!   t0]
0D7F : 66D0; -- . pop [pop! t0]
0D80 : 0660; --   load t0 t0
0D81 : 5D60; -- . push [push! t0]
0D82 : 260C; -- . imov [imov! t0 12]
0D83 : 3600; -- ' imoh
0D84 : 5D60; --   push t0
0D85 : 67D0; -- . pop [pop! t1 t0]
0D86 : 66D0; -- ' pop
0D87 : 2801; --   imov t2 1  # default value
0D88 : 8675; --   sub  t0 t1
0D89 : 208D; -- . imov [jz!  .test_let_body_0_let_block_3_let_block_1_0_operator_opskip]
0D8A : 300D; -- | imoh
0D8B : A001; -- ' j_op
0D8C : 2800; --   imov t2 0
0D8D : 5D80; -- . push [push! t2]
0D8E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D8F : 3680; -- | imoh
0D90 : 0660; -- ' load
0D91 : 279B; -- . imov [imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr1]
0D92 : 370D; -- ' imoh
0D93 : 1670; --   str     t0 t1
0D94 : 9614; --   iadd    t0 1
0D95 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0D96 : 3080; -- | imoh
0D97 : 1060; -- ' str
0D98 : 201D; -- . imov [jmp!    .assert]
0D99 : 3006; -- | imoh
0D9A : A000; -- ' j_op
0D9B : 26B2; -- . imov [imov! t0 .string_alloc_57]
0D9C : 3601; -- ' imoh
0D9D : 5D60; -- . push [push! t0]
0D9E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0D9F : 3680; -- | imoh
0DA0 : 0660; -- ' load
0DA1 : 2702; -- . imov [imov!   t1 2]
0DA2 : 3700; -- ' imoh
0DA3 : 8675; --   sub     t0 t1
0DA4 : 5D60; -- . push [push!   t0]
0DA5 : 66D0; -- . pop [pop! t0]
0DA6 : 0660; --   load t0 t0
0DA7 : 5D60; -- . push [push! t0]
0DA8 : 260D; -- . imov [imov! t0 13]
0DA9 : 3600; -- ' imoh
0DAA : 5D60; --   push t0
0DAB : 67D0; -- . pop [pop! t1 t0]
0DAC : 66D0; -- ' pop
0DAD : 2801; --   imov t2 1  # default value
0DAE : 8675; --   sub  t0 t1
0DAF : 20B3; -- . imov [jz!  .test_let_body_0_let_block_3_let_block_2_0_operator_opskip]
0DB0 : 300D; -- | imoh
0DB1 : A001; -- ' j_op
0DB2 : 2800; --   imov t2 0
0DB3 : 5D80; -- . push [push! t2]
0DB4 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DB5 : 3680; -- | imoh
0DB6 : 0660; -- ' load
0DB7 : 27C1; -- . imov [imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr2]
0DB8 : 370D; -- ' imoh
0DB9 : 1670; --   str     t0 t1
0DBA : 9614; --   iadd    t0 1
0DBB : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DBC : 3080; -- | imoh
0DBD : 1060; -- ' str
0DBE : 201D; -- . imov [jmp!    .assert]
0DBF : 3006; -- | imoh
0DC0 : A000; -- ' j_op
0DC1 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DC2 : 3680; -- | imoh
0DC3 : 0660; -- ' load
0DC4 : 2702; -- . imov [imov!   t1 2]
0DC5 : 3700; -- ' imoh
0DC6 : 8675; --   sub     t0 t1
0DC7 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DC8 : 3080; -- | imoh
0DC9 : 1060; -- ' str
0DCA : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DCB : 3680; -- | imoh
0DCC : 0660; -- ' load
0DCD : 2702; -- . imov [imov!   t1 2]
0DCE : 3700; -- ' imoh
0DCF : 8675; --   sub     t0 t1
0DD0 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DD1 : 3080; -- | imoh
0DD2 : 1060; -- ' str
0DD3 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DD4 : 3680; -- | imoh
0DD5 : 0660; -- ' load
0DD6 : 9615; --   isub    t0 1
0DD7 : 0760; --   load    t1 t0
0DD8 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DD9 : 3080; -- | imoh
0DDA : 1060; -- ' str
0DDB : A700; --   jmp     t1
0DDC : 2666; -- . imov [imov! t0 .string_alloc_58]
0DDD : 3602; -- ' imoh
0DDE : 5D60; -- . push [push! t0]
0DDF : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DE0 : 3680; -- | imoh
0DE1 : 0660; -- ' load
0DE2 : 27EC; -- . imov [imov!   t1 .test_mul_body_retaddr0]
0DE3 : 370D; -- ' imoh
0DE4 : 1670; --   str     t0 t1
0DE5 : 9614; --   iadd    t0 1
0DE6 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DE7 : 3080; -- | imoh
0DE8 : 1060; -- ' str
0DE9 : 20F8; -- . imov [jmp!    .print_string]
0DEA : 3004; -- | imoh
0DEB : A000; -- ' j_op
0DEC : 2646; -- . imov [imov! t0 .string_alloc_59]
0DED : 3601; -- ' imoh
0DEE : 5D60; -- . push [push! t0]
0DEF : 2601; -- . imov [imov! t0 1]
0DF0 : 3600; -- ' imoh
0DF1 : 5D60; --   push t0
0DF2 : 2602; -- . imov [imov! t0 2]
0DF3 : 3600; -- ' imoh
0DF4 : 5D60; --   push t0
0DF5 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0DF6 : 3680; -- | imoh
0DF7 : 0660; -- ' load
0DF8 : 2702; -- . imov [imov!   t1 .test_mul_body_0_retaddr0]
0DF9 : 370E; -- ' imoh
0DFA : 1670; --   str     t0 t1
0DFB : 9614; --   iadd    t0 1
0DFC : 2003; -- . imov [str!    .ret_stack_ptr t0]
0DFD : 3080; -- | imoh
0DFE : 1060; -- ' str
0DFF : 2094; -- . imov [jmp!    .mul]
0E00 : 3006; -- | imoh
0E01 : A000; -- ' j_op
0E02 : 2602; -- . imov [imov! t0 2]
0E03 : 3600; -- ' imoh
0E04 : 5D60; --   push t0
0E05 : 67D0; -- . pop [pop! t1 t0]
0E06 : 66D0; -- ' pop
0E07 : 2801; --   imov t2 1  # default value
0E08 : 8675; --   sub  t0 t1
0E09 : 200D; -- . imov [jz!  .test_mul_body_0_0_operator_opskip]
0E0A : 300E; -- | imoh
0E0B : A001; -- ' j_op
0E0C : 2800; --   imov t2 0
0E0D : 5D80; -- . push [push! t2]
0E0E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E0F : 3680; -- | imoh
0E10 : 0660; -- ' load
0E11 : 271B; -- . imov [imov!   t1 .test_mul_body_retaddr1]
0E12 : 370E; -- ' imoh
0E13 : 1670; --   str     t0 t1
0E14 : 9614; --   iadd    t0 1
0E15 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E16 : 3080; -- | imoh
0E17 : 1060; -- ' str
0E18 : 201D; -- . imov [jmp!    .assert]
0E19 : 3006; -- | imoh
0E1A : A000; -- ' j_op
0E1B : 2609; -- . imov [imov! t0 .string_alloc_60]
0E1C : 3602; -- ' imoh
0E1D : 5D60; -- . push [push! t0]
0E1E : 2602; -- . imov [imov! t0 2]
0E1F : 3600; -- ' imoh
0E20 : 5D60; --   push t0
0E21 : 2605; -- . imov [imov! t0 5]
0E22 : 3600; -- ' imoh
0E23 : 5D60; --   push t0
0E24 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E25 : 3680; -- | imoh
0E26 : 0660; -- ' load
0E27 : 2731; -- . imov [imov!   t1 .test_mul_body_1_retaddr0]
0E28 : 370E; -- ' imoh
0E29 : 1670; --   str     t0 t1
0E2A : 9614; --   iadd    t0 1
0E2B : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E2C : 3080; -- | imoh
0E2D : 1060; -- ' str
0E2E : 2094; -- . imov [jmp!    .mul]
0E2F : 3006; -- | imoh
0E30 : A000; -- ' j_op
0E31 : 260A; -- . imov [imov! t0 10]
0E32 : 3600; -- ' imoh
0E33 : 5D60; --   push t0
0E34 : 67D0; -- . pop [pop! t1 t0]
0E35 : 66D0; -- ' pop
0E36 : 2801; --   imov t2 1  # default value
0E37 : 8675; --   sub  t0 t1
0E38 : 203C; -- . imov [jz!  .test_mul_body_1_0_operator_opskip]
0E39 : 300E; -- | imoh
0E3A : A001; -- ' j_op
0E3B : 2800; --   imov t2 0
0E3C : 5D80; -- . push [push! t2]
0E3D : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E3E : 3680; -- | imoh
0E3F : 0660; -- ' load
0E40 : 274A; -- . imov [imov!   t1 .test_mul_body_retaddr2]
0E41 : 370E; -- ' imoh
0E42 : 1670; --   str     t0 t1
0E43 : 9614; --   iadd    t0 1
0E44 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E45 : 3080; -- | imoh
0E46 : 1060; -- ' str
0E47 : 201D; -- . imov [jmp!    .assert]
0E48 : 3006; -- | imoh
0E49 : A000; -- ' j_op
0E4A : 263F; -- . imov [imov! t0 .string_alloc_61]
0E4B : 3601; -- ' imoh
0E4C : 5D60; -- . push [push! t0]
0E4D : 2600; -- . imov [imov! t0 0]
0E4E : 3600; -- ' imoh
0E4F : 5D60; --   push t0
0E50 : 260A; -- . imov [imov! t0 10]
0E51 : 3600; -- ' imoh
0E52 : 5D60; --   push t0
0E53 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E54 : 3680; -- | imoh
0E55 : 0660; -- ' load
0E56 : 2760; -- . imov [imov!   t1 .test_mul_body_2_retaddr0]
0E57 : 370E; -- ' imoh
0E58 : 1670; --   str     t0 t1
0E59 : 9614; --   iadd    t0 1
0E5A : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E5B : 3080; -- | imoh
0E5C : 1060; -- ' str
0E5D : 2094; -- . imov [jmp!    .mul]
0E5E : 3006; -- | imoh
0E5F : A000; -- ' j_op
0E60 : 2600; -- . imov [imov! t0 0]
0E61 : 3600; -- ' imoh
0E62 : 5D60; --   push t0
0E63 : 67D0; -- . pop [pop! t1 t0]
0E64 : 66D0; -- ' pop
0E65 : 2801; --   imov t2 1  # default value
0E66 : 8675; --   sub  t0 t1
0E67 : 206B; -- . imov [jz!  .test_mul_body_2_0_operator_opskip]
0E68 : 300E; -- | imoh
0E69 : A001; -- ' j_op
0E6A : 2800; --   imov t2 0
0E6B : 5D80; -- . push [push! t2]
0E6C : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E6D : 3680; -- | imoh
0E6E : 0660; -- ' load
0E6F : 2779; -- . imov [imov!   t1 .test_mul_body_retaddr3]
0E70 : 370E; -- ' imoh
0E71 : 1670; --   str     t0 t1
0E72 : 9614; --   iadd    t0 1
0E73 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E74 : 3080; -- | imoh
0E75 : 1060; -- ' str
0E76 : 201D; -- . imov [jmp!    .assert]
0E77 : 3006; -- | imoh
0E78 : A000; -- ' j_op
0E79 : 2630; -- . imov [imov! t0 .string_alloc_62]
0E7A : 3600; -- ' imoh
0E7B : 5D60; -- . push [push! t0]
0E7C : 260A; -- . imov [imov! t0 10]
0E7D : 3600; -- ' imoh
0E7E : 5D60; --   push t0
0E7F : 2600; -- . imov [imov! t0 0]
0E80 : 3600; -- ' imoh
0E81 : 5D60; --   push t0
0E82 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E83 : 3680; -- | imoh
0E84 : 0660; -- ' load
0E85 : 278F; -- . imov [imov!   t1 .test_mul_body_3_retaddr0]
0E86 : 370E; -- ' imoh
0E87 : 1670; --   str     t0 t1
0E88 : 9614; --   iadd    t0 1
0E89 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0E8A : 3080; -- | imoh
0E8B : 1060; -- ' str
0E8C : 2094; -- . imov [jmp!    .mul]
0E8D : 3006; -- | imoh
0E8E : A000; -- ' j_op
0E8F : 2600; -- . imov [imov! t0 0]
0E90 : 3600; -- ' imoh
0E91 : 5D60; --   push t0
0E92 : 67D0; -- . pop [pop! t1 t0]
0E93 : 66D0; -- ' pop
0E94 : 2801; --   imov t2 1  # default value
0E95 : 8675; --   sub  t0 t1
0E96 : 209A; -- . imov [jz!  .test_mul_body_3_0_operator_opskip]
0E97 : 300E; -- | imoh
0E98 : A001; -- ' j_op
0E99 : 2800; --   imov t2 0
0E9A : 5D80; -- . push [push! t2]
0E9B : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0E9C : 3680; -- | imoh
0E9D : 0660; -- ' load
0E9E : 27A8; -- . imov [imov!   t1 .test_mul_body_retaddr4]
0E9F : 370E; -- ' imoh
0EA0 : 1670; --   str     t0 t1
0EA1 : 9614; --   iadd    t0 1
0EA2 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0EA3 : 3080; -- | imoh
0EA4 : 1060; -- ' str
0EA5 : 201D; -- . imov [jmp!    .assert]
0EA6 : 3006; -- | imoh
0EA7 : A000; -- ' j_op
0EA8 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0EA9 : 3680; -- | imoh
0EAA : 0660; -- ' load
0EAB : 9615; --   isub    t0 1
0EAC : 0760; --   load    t1 t0
0EAD : 2003; -- . imov [str!    .ret_stack_ptr t0]
0EAE : 3080; -- | imoh
0EAF : 1060; -- ' str
0EB0 : A700; --   jmp     t1
0EB1 : 265B; -- . imov [imov! t0 .string_alloc_63]
0EB2 : 3601; -- ' imoh
0EB3 : 5D60; -- . push [push! t0]
0EB4 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0EB5 : 3680; -- | imoh
0EB6 : 0660; -- ' load
0EB7 : 27C1; -- . imov [imov!   t1 .test_global_body_retaddr0]
0EB8 : 370E; -- ' imoh
0EB9 : 1670; --   str     t0 t1
0EBA : 9614; --   iadd    t0 1
0EBB : 2003; -- . imov [str!    .ret_stack_ptr t0]
0EBC : 3080; -- | imoh
0EBD : 1060; -- ' str
0EBE : 20F8; -- . imov [jmp!    .print_string]
0EBF : 3004; -- | imoh
0EC0 : A000; -- ' j_op
0EC1 : 2680; -- . imov [imov! t0 .string_alloc_64]
0EC2 : 3601; -- ' imoh
0EC3 : 5D60; -- . push [push! t0]
0EC4 : 2602; -- . imov [imov! t0 .variable_alloc_var1]
0EC5 : 3680; -- ' imoh
0EC6 : 5D60; -- . push [push! t0]
0EC7 : 66D0; -- . pop [pop! t0]
0EC8 : 0660; --   load t0 t0
0EC9 : 5D60; -- . push [push! t0]
0ECA : 26AD; -- . imov [imov! t0 57005]
0ECB : 36DE; -- ' imoh
0ECC : 5D60; --   push t0
0ECD : 67D0; -- . pop [pop! t1 t0]
0ECE : 66D0; -- ' pop
0ECF : 2801; --   imov t2 1  # default value
0ED0 : 8675; --   sub  t0 t1
0ED1 : 20D5; -- . imov [jz!  .test_global_body_0_0_operator_opskip]
0ED2 : 300E; -- | imoh
0ED3 : A001; -- ' j_op
0ED4 : 2800; --   imov t2 0
0ED5 : 5D80; -- . push [push! t2]
0ED6 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0ED7 : 3680; -- | imoh
0ED8 : 0660; -- ' load
0ED9 : 27E3; -- . imov [imov!   t1 .test_global_body_retaddr1]
0EDA : 370E; -- ' imoh
0EDB : 1670; --   str     t0 t1
0EDC : 9614; --   iadd    t0 1
0EDD : 2003; -- . imov [str!    .ret_stack_ptr t0]
0EDE : 3080; -- | imoh
0EDF : 1060; -- ' str
0EE0 : 201D; -- . imov [jmp!    .assert]
0EE1 : 3006; -- | imoh
0EE2 : A000; -- ' j_op
0EE3 : 2603; -- . imov [imov! t0 .string_alloc_65]
0EE4 : 3603; -- ' imoh
0EE5 : 5D60; -- . push [push! t0]
0EE6 : 260A; -- . imov [imov! t0 10]
0EE7 : 3600; -- ' imoh
0EE8 : 5D60; --   push t0
0EE9 : 2602; -- . imov [imov! t0 .variable_alloc_var1]
0EEA : 3680; -- ' imoh
0EEB : 5D60; -- . push [push! t0]
0EEC : 67D0; -- . pop [pop! t1 t0]
0EED : 66D0; -- ' pop
0EEE : 1760; --   str  t1 t0
0EEF : 2602; -- . imov [imov! t0 .variable_alloc_var1]
0EF0 : 3680; -- ' imoh
0EF1 : 5D60; -- . push [push! t0]
0EF2 : 66D0; -- . pop [pop! t0]
0EF3 : 0660; --   load t0 t0
0EF4 : 5D60; -- . push [push! t0]
0EF5 : 260A; -- . imov [imov! t0 10]
0EF6 : 3600; -- ' imoh
0EF7 : 5D60; --   push t0
0EF8 : 67D0; -- . pop [pop! t1 t0]
0EF9 : 66D0; -- ' pop
0EFA : 2801; --   imov t2 1  # default value
0EFB : 8675; --   sub  t0 t1
0EFC : 2000; -- . imov [jz!  .test_global_body_1_0_operator_opskip]
0EFD : 300F; -- | imoh
0EFE : A001; -- ' j_op
0EFF : 2800; --   imov t2 0
0F00 : 5D80; -- . push [push! t2]
0F01 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F02 : 3680; -- | imoh
0F03 : 0660; -- ' load
0F04 : 270E; -- . imov [imov!   t1 .test_global_body_retaddr2]
0F05 : 370F; -- ' imoh
0F06 : 1670; --   str     t0 t1
0F07 : 9614; --   iadd    t0 1
0F08 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F09 : 3080; -- | imoh
0F0A : 1060; -- ' str
0F0B : 201D; -- . imov [jmp!    .assert]
0F0C : 3006; -- | imoh
0F0D : A000; -- ' j_op
0F0E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F0F : 3680; -- | imoh
0F10 : 0660; -- ' load
0F11 : 9615; --   isub    t0 1
0F12 : 0760; --   load    t1 t0
0F13 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F14 : 3080; -- | imoh
0F15 : 1060; -- ' str
0F16 : A700; --   jmp     t1
0F17 : 26B9; -- . imov [imov! t0 .string_alloc_66]
0F18 : 3602; -- ' imoh
0F19 : 5D60; -- . push [push! t0]
0F1A : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F1B : 3680; -- | imoh
0F1C : 0660; -- ' load
0F1D : 2727; -- . imov [imov!   t1 .main_body_retaddr0]
0F1E : 370F; -- ' imoh
0F1F : 1670; --   str     t0 t1
0F20 : 9614; --   iadd    t0 1
0F21 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F22 : 3080; -- | imoh
0F23 : 1060; -- ' str
0F24 : 20F8; -- . imov [jmp!    .print_string]
0F25 : 3004; -- | imoh
0F26 : A000; -- ' j_op
0F27 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F28 : 3680; -- | imoh
0F29 : 0660; -- ' load
0F2A : 2734; -- . imov [imov!   t1 .main_body_retaddr1]
0F2B : 370F; -- ' imoh
0F2C : 1670; --   str     t0 t1
0F2D : 9614; --   iadd    t0 1
0F2E : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F2F : 3080; -- | imoh
0F30 : 1060; -- ' str
0F31 : 2011; -- . imov [jmp!    .test_sum]
0F32 : 3007; -- | imoh
0F33 : A000; -- ' j_op
0F34 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F35 : 3680; -- | imoh
0F36 : 0660; -- ' load
0F37 : 2741; -- . imov [imov!   t1 .main_body_retaddr2]
0F38 : 370F; -- ' imoh
0F39 : 1670; --   str     t0 t1
0F3A : 9614; --   iadd    t0 1
0F3B : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F3C : 3080; -- | imoh
0F3D : 1060; -- ' str
0F3E : 2090; -- . imov [jmp!    .test_arith]
0F3F : 3007; -- | imoh
0F40 : A000; -- ' j_op
0F41 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F42 : 3680; -- | imoh
0F43 : 0660; -- ' load
0F44 : 274E; -- . imov [imov!   t1 .main_body_retaddr3]
0F45 : 370F; -- ' imoh
0F46 : 1670; --   str     t0 t1
0F47 : 9614; --   iadd    t0 1
0F48 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F49 : 3080; -- | imoh
0F4A : 1060; -- ' str
0F4B : 2003; -- . imov [jmp!    .test_logical]
0F4C : 300A; -- | imoh
0F4D : A000; -- ' j_op
0F4E : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F4F : 3680; -- | imoh
0F50 : 0660; -- ' load
0F51 : 275B; -- . imov [imov!   t1 .main_body_retaddr4]
0F52 : 370F; -- ' imoh
0F53 : 1670; --   str     t0 t1
0F54 : 9614; --   iadd    t0 1
0F55 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F56 : 3080; -- | imoh
0F57 : 1060; -- ' str
0F58 : 2026; -- . imov [jmp!    .test_strlen]
0F59 : 300B; -- | imoh
0F5A : A000; -- ' j_op
0F5B : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F5C : 3680; -- | imoh
0F5D : 0660; -- ' load
0F5E : 2768; -- . imov [imov!   t1 .main_body_retaddr5]
0F5F : 370F; -- ' imoh
0F60 : 1670; --   str     t0 t1
0F61 : 9614; --   iadd    t0 1
0F62 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F63 : 3080; -- | imoh
0F64 : 1060; -- ' str
0F65 : 2097; -- . imov [jmp!    .test_streq]
0F66 : 300B; -- | imoh
0F67 : A000; -- ' j_op
0F68 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F69 : 3680; -- | imoh
0F6A : 0660; -- ' load
0F6B : 2775; -- . imov [imov!   t1 .main_body_retaddr6]
0F6C : 370F; -- ' imoh
0F6D : 1670; --   str     t0 t1
0F6E : 9614; --   iadd    t0 1
0F6F : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F70 : 3080; -- | imoh
0F71 : 1060; -- ' str
0F72 : 20AC; -- . imov [jmp!    .test_let]
0F73 : 300C; -- | imoh
0F74 : A000; -- ' j_op
0F75 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F76 : 3680; -- | imoh
0F77 : 0660; -- ' load
0F78 : 2782; -- . imov [imov!   t1 .main_body_retaddr7]
0F79 : 370F; -- ' imoh
0F7A : 1670; --   str     t0 t1
0F7B : 9614; --   iadd    t0 1
0F7C : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F7D : 3080; -- | imoh
0F7E : 1060; -- ' str
0F7F : 20DC; -- . imov [jmp!    .test_mul]
0F80 : 300D; -- | imoh
0F81 : A000; -- ' j_op
0F82 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F83 : 3680; -- | imoh
0F84 : 0660; -- ' load
0F85 : 278F; -- . imov [imov!   t1 .main_body_retaddr8]
0F86 : 370F; -- ' imoh
0F87 : 1670; --   str     t0 t1
0F88 : 9614; --   iadd    t0 1
0F89 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F8A : 3080; -- | imoh
0F8B : 1060; -- ' str
0F8C : 20B1; -- . imov [jmp!    .test_global]
0F8D : 300E; -- | imoh
0F8E : A000; -- ' j_op
0F8F : 261B; -- . imov [imov! t0 .string_alloc_67]
0F90 : 3602; -- ' imoh
0F91 : 5D60; -- . push [push! t0]
0F92 : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0F93 : 3680; -- | imoh
0F94 : 0660; -- ' load
0F95 : 279F; -- . imov [imov!   t1 .main_body_retaddr9]
0F96 : 370F; -- ' imoh
0F97 : 1670; --   str     t0 t1
0F98 : 9614; --   iadd    t0 1
0F99 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0F9A : 3080; -- | imoh
0F9B : 1060; -- ' str
0F9C : 20F8; -- . imov [jmp!    .print_string]
0F9D : 3004; -- | imoh
0F9E : A000; -- ' j_op
0F9F : 2603; -- . imov [load!   t0 .ret_stack_ptr]
0FA0 : 3680; -- | imoh
0FA1 : 0660; -- ' load
0FA2 : 9615; --   isub    t0 1
0FA3 : 0760; --   load    t1 t0
0FA4 : 2003; -- . imov [str!    .ret_stack_ptr t0]
0FA5 : 3080; -- | imoh
0FA6 : 1060; -- ' str
0FA7 : A700; --   jmp     t1
END;