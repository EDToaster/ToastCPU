
.reset
    # setup isr and jump to main
    imov!   isr .isr
    # call!   .print_init

    # initialize ret stack ptrs
    imov!   t0 .ret_stack
    imov!   t1 .reset_ret

    str     t0 t1
    iadd    t0 1
    str!    .ret_stack_ptr t0

    # initialize our global variables
    call!   .init_globals
    jmp!    .main
.reset_ret
    halt

.init_globals

    push! t0
    
    imov!  t0 57005
    str!   .variable_alloc_var1 t0
            
    imov!  t0 100
    str!   .variable_alloc_text_progress t0
            
    imov!  t0 0
    str!   .variable_alloc_text_ptr t0
            
    pop! t0
    jmpr
                                        


.variable_alloc_var1 [1]
    
.variable_alloc_text_progress [1]
    
.variable_alloc_text_ptr [1]
    

# allocate 1024 words on the heap
.ret_stack_ptr [1]
.ret_stack [0x0400]

# #include<../../lib/std/print>
# #include<../../lib/std/keyboard>

fn .isr
    isr!
    rti!
#end .isr

.string_alloc_17
    0x37
    0x20
    0x3C
    0x3D
    0x20
    0x37
    0x0

.string_alloc_13
    0x36
    0x20
    0x3C
    0x20
    0x37
    0x0

.string_alloc_18
    0x38
    0x20
    0x3C
    0x3D
    0x20
    0x37
    0x0

.string_alloc_1
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x53
    0x75
    0x6D
    0xA
    0x0

.string_alloc_2
    0x73
    0x75
    0x6D
    0x28
    0x37
    0x29
    0x20
    0x3D
    0x3D
    0x20
    0x32
    0x31
    0x0

.string_alloc_8
    0x37
    0x20
    0x3E
    0x20
    0x37
    0x0

.string_alloc_31
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x6C
    0x65
    0x74
    0xA
    0x0

.string_alloc_32
    0x31
    0x31
    0x0

.string_alloc_15
    0x38
    0x20
    0x3C
    0x20
    0x37
    0x0

.string_alloc_28
    0x61
    0x62
    0x63
    0x64
    0x0

.string_alloc_37
    0x63
    0x32
    0x0

.string_alloc_23
    0x31
    0x20
    0x7C
    0x7C
    0x20
    0x30
    0x0

.string_alloc_39
    0x31
    0x20
    0x78
    0x20
    0x32
    0x0

.string_alloc_19
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x4C
    0x6F
    0x67
    0x69
    0x63
    0x61
    0x6C
    0xA
    0x0

.string_alloc_42
    0x31
    0x30
    0x20
    0x78
    0x20
    0x30
    0x0

.string_alloc_45
    0x76
    0x61
    0x72
    0x31
    0x20
    0x3D
    0x20
    0x31
    0x30
    0x0

.string_alloc_47
    0x50
    0x61
    0x73
    0x73
    0x65
    0x64
    0x20
    0x41
    0x6C
    0x6C
    0x20
    0x54
    0x65
    0x73
    0x74
    0x20
    0x43
    0x61
    0x73
    0x65
    0x73
    0x21
    0x0

.string_alloc_16
    0x36
    0x20
    0x3C
    0x3D
    0x20
    0x37
    0x0

.string_alloc_27
    0x73
    0x74
    0x72
    0x6C
    0x65
    0x6E
    0x28
    0x22
    0x61
    0x62
    0x63
    0x64
    0x22
    0x29
    0x0

.string_alloc_41
    0x30
    0x20
    0x78
    0x20
    0x31
    0x30
    0x0

.string_alloc_35
    0x61
    0x32
    0x0

.string_alloc_12
    0x38
    0x20
    0x3E
    0x3D
    0x20
    0x37
    0x0

.string_alloc_9
    0x38
    0x20
    0x3E
    0x20
    0x37
    0x0

.string_alloc_3
    0x73
    0x75
    0x6D
    0x28
    0x32
    0x32
    0x29
    0x20
    0x3D
    0x3D
    0x20
    0x32
    0x35
    0x33
    0x0

.string_alloc_7
    0x36
    0x20
    0x3E
    0x20
    0x37
    0x0

.string_alloc_22
    0x30
    0x20
    0x7C
    0x7C
    0x20
    0x30
    0x0

.string_alloc_36
    0x62
    0x32
    0x0

.string_alloc_5
    0x37
    0x20
    0x3D
    0x20
    0x37
    0x0

.string_alloc_14
    0x37
    0x20
    0x3C
    0x20
    0x37
    0x0

.string_alloc_29
    0x73
    0x74
    0x72
    0x6C
    0x65
    0x6E
    0x28
    0x22
    0x22
    0x29
    0x0

.string_alloc_30
    0x0

.string_alloc_25
    0x30
    0x20
    0x21
    0x0

.string_alloc_0
    0x41
    0x73
    0x73
    0x65
    0x72
    0x74
    0x20
    0x46
    0x61
    0x69
    0x6C
    0x65
    0x64
    0xA
    0x0

.string_alloc_44
    0x76
    0x61
    0x72
    0x31
    0x20
    0x3D
    0x3D
    0x20
    0x30
    0x78
    0x44
    0x45
    0x41
    0x44
    0x0

.string_alloc_24
    0x31
    0x20
    0x21
    0x0

.string_alloc_34
    0x62
    0x31
    0x0

.string_alloc_21
    0x30
    0x20
    0x26
    0x26
    0x20
    0x31
    0x0

.string_alloc_10
    0x36
    0x20
    0x3E
    0x3D
    0x20
    0x37
    0x0

.string_alloc_11
    0x37
    0x20
    0x3E
    0x3D
    0x20
    0x37
    0x0

.string_alloc_46
    0x48
    0x65
    0x6C
    0x6C
    0x6F
    0x20
    0x66
    0x72
    0x6F
    0x6D
    0x20
    0x54
    0x6F
    0x61
    0x73
    0x74
    0x4C
    0x61
    0x6E
    0x67
    0x21
    0xA
    0xA
    0x0

.string_alloc_40
    0x32
    0x20
    0x78
    0x20
    0x35
    0x0

.string_alloc_6
    0x36
    0x20
    0x3D
    0x20
    0x37
    0x0

.string_alloc_20
    0x31
    0x20
    0x26
    0x26
    0x20
    0x31
    0x0

.string_alloc_4
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x41
    0x72
    0x69
    0x74
    0x68
    0xA
    0x0

.string_alloc_38
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x6D
    0x75
    0x6C
    0xA
    0x0

.string_alloc_26
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x73
    0x74
    0x72
    0x6C
    0x65
    0x6E
    0xA
    0x0

.string_alloc_43
    0x54
    0x65
    0x73
    0x74
    0x69
    0x6E
    0x67
    0x20
    0x67
    0x6C
    0x6F
    0x62
    0x61
    0x6C
    0x20
    0x76
    0x61
    0x72
    0x73
    0xA
    0x0

.string_alloc_33
    0x61
    0x31
    0x0
fn .ps


    pop! t0
    push! t0 t0
                            
.ps_body_0_while_eval

    pop! t0
    load t0 t0
    push! t0
                            
    pop! t0
    push! t0 t0
                            
    pop! t0
    tst  t0
    jz!  .ps_body_0_while_exit
.ps_body_0_while_block

    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .ps_body_0_while_block_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pc
.ps_body_0_while_block_retaddr0
                                
    imov! t0 1
    push t0
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    pop! t0
    push! t0 t0
                            
    jmp! .ps_body_0_while_eval
.ps_body_0_while_exit
                    
    pop! t0
                            
    pop! t0
                            
    
.ps_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .ps
fn .assert


    pop! t0
    tst  t0
    jz!  .assert_body_0_else
.assert_body_0_if

    jmp! .assert_body_0_if_exit
.assert_body_0_else

    pop! t0
    push! t0 t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .assert_body_0_else_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.assert_body_0_else_retaddr0
                                
    imov! t0 32
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .assert_body_0_else_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pc
.assert_body_0_else_retaddr1
                                
    imov! t0 .string_alloc_0
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .assert_body_0_else_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.assert_body_0_else_retaddr2
                                
    halt
                            
.assert_body_0_if_exit
                    
    pop! t0
                            
    
.assert_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .assert
fn .sum


    imov! t0 0
    push t0
                    
    pop! t0 t1
    push! t0 t1
                            
.sum_body_0_while_eval

    pop! t0
    push! t0 t0
                            
    pop! t0
    tst  t0
    jz!  .sum_body_0_while_exit
.sum_body_0_while_block

    pop! t0 t1
    push! t0 t1
                            
    pop! t0 t1
    push! t1 t0 t1
                            
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    pop! t0 t1
    push! t0 t1
                            
    imov! t0 1
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    jmp! .sum_body_0_while_eval
.sum_body_0_while_exit
                    
    pop! t0
                            
    
.sum_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .sum
fn .mul


    imov! t0 0
    push t0
                    
    load!   t0 .ret_stack_ptr
                    
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    str!    .ret_stack_ptr t0
                    

.mul_body_0_let_block_0_while_eval

    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    pop! t0
    tst  t0
    jz!  .mul_body_0_let_block_0_while_exit
.mul_body_0_let_block_0_while_block

    load!   t0 .ret_stack_ptr
    imov!   t1 3
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            

    load!   t0 .ret_stack_ptr
    imov!   t1 1
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    load!   t0 .ret_stack_ptr
    imov!   t1 3
    sub     t0 t1
    push!   t0
                                
    pop! t1 t0
    str  t1 t0
                            
    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 1
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    push!   t0
                                
    pop! t1 t0
    str  t1 t0
                            
    jmp! .mul_body_0_let_block_0_while_eval
.mul_body_0_let_block_0_while_exit
                    
    load!   t0 .ret_stack_ptr
    imov!   t1 3
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    # pop 3 elements from return stack
    load!   t0 .ret_stack_ptr
    imov!   t1 3
    sub     t0 t1
    str!    .ret_stack_ptr t0
                    
    
.mul_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .mul
fn .test_sum


    imov! t0 .string_alloc_1
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_sum_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_sum_body_retaddr0
                                
    imov! t0 .string_alloc_2
    push! t0
                    

    imov! t0 7
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_sum_body_0_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .sum
.test_sum_body_0_retaddr0
                                
    imov! t0 28
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_sum_body_0_0_opskip
    imov t2 0
.test_sum_body_0_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_sum_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_sum_body_retaddr1
                                
    imov! t0 .string_alloc_3
    push! t0
                    

    imov! t0 22
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_sum_body_1_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .sum
.test_sum_body_1_retaddr0
                                
    imov! t0 253
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_sum_body_1_0_opskip
    imov t2 0
.test_sum_body_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_sum_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_sum_body_retaddr2
                                
    
.test_sum_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_sum
fn .test_arith


    imov! t0 .string_alloc_4
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_arith_body_retaddr0
                                
    imov! t0 .string_alloc_5
    push! t0
                    

    imov! t0 7
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_0_0_opskip
    imov t2 0
.test_arith_body_0_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_0_1_opskip
    imov t2 0
.test_arith_body_0_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr1
                                
    imov! t0 .string_alloc_6
    push! t0
                    

    imov! t0 6
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_1_0_opskip
    imov t2 0
.test_arith_body_1_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_1_1_opskip
    imov t2 0
.test_arith_body_1_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr2
                                
    imov! t0 .string_alloc_7
    push! t0
                    

    imov! t0 6
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jp!  .test_arith_body_2_0_opskip
    imov t2 0
.test_arith_body_2_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_2_1_opskip
    imov t2 0
.test_arith_body_2_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr3

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr3
                                
    imov! t0 .string_alloc_8
    push! t0
                    

    imov! t0 7
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jp!  .test_arith_body_3_0_opskip
    imov t2 0
.test_arith_body_3_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_3_1_opskip
    imov t2 0
.test_arith_body_3_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr4

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr4
                                
    imov! t0 .string_alloc_9
    push! t0
                    

    imov! t0 8
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jp!  .test_arith_body_4_0_opskip
    imov t2 0
.test_arith_body_4_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_4_1_opskip
    imov t2 0
.test_arith_body_4_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr5

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr5
                                
    imov! t0 .string_alloc_10
    push! t0
                    

    imov! t0 6
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jn!  .test_arith_body_5_0_opskip
    imov t2 1
.test_arith_body_5_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_5_1_opskip
    imov t2 0
.test_arith_body_5_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr6

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr6
                                
    imov! t0 .string_alloc_11
    push! t0
                    

    imov! t0 7
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jn!  .test_arith_body_6_0_opskip
    imov t2 1
.test_arith_body_6_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_6_1_opskip
    imov t2 0
.test_arith_body_6_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr7

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr7
                                
    imov! t0 .string_alloc_12
    push! t0
                    

    imov! t0 8
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jn!  .test_arith_body_7_0_opskip
    imov t2 1
.test_arith_body_7_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_7_1_opskip
    imov t2 0
.test_arith_body_7_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr8

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr8
                                
    imov! t0 .string_alloc_13
    push! t0
                    

    imov! t0 6
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .test_arith_body_8_0_opskip
    imov t2 0
.test_arith_body_8_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_8_1_opskip
    imov t2 0
.test_arith_body_8_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr9

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr9
                                
    imov! t0 .string_alloc_14
    push! t0
                    

    imov! t0 7
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .test_arith_body_9_0_opskip
    imov t2 0
.test_arith_body_9_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_9_1_opskip
    imov t2 0
.test_arith_body_9_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr10

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr10
                                
    imov! t0 .string_alloc_15
    push! t0
                    

    imov! t0 8
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .test_arith_body_10_0_opskip
    imov t2 0
.test_arith_body_10_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_10_1_opskip
    imov t2 0
.test_arith_body_10_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr11

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr11
                                
    imov! t0 .string_alloc_16
    push! t0
                    

    imov! t0 6
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jp!  .test_arith_body_11_0_opskip
    imov t2 1
.test_arith_body_11_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_11_1_opskip
    imov t2 0
.test_arith_body_11_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr12

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr12
                                
    imov! t0 .string_alloc_17
    push! t0
                    

    imov! t0 7
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jp!  .test_arith_body_12_0_opskip
    imov t2 1
.test_arith_body_12_0_opskip
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_12_1_opskip
    imov t2 0
.test_arith_body_12_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr13

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr13
                                
    imov! t0 .string_alloc_18
    push! t0
                    

    imov! t0 8
    push t0
                    
    imov! t0 7
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jp!  .test_arith_body_13_0_opskip
    imov t2 1
.test_arith_body_13_0_opskip
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_arith_body_13_1_opskip
    imov t2 0
.test_arith_body_13_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_arith_body_retaddr14

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_arith_body_retaddr14
                                
    
.test_arith_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_arith
fn .test_logical


    imov! t0 .string_alloc_19
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_logical_body_retaddr0
                                
    imov! t0 .string_alloc_20
    push! t0
                    

    imov! t0 1
    push t0
                    
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 0
    tst  t0
    jz! .test_logical_body_0_0_andfalse
    tst  t1
    jz! .test_logical_body_0_0_andfalse
    imov t2 1
.test_logical_body_0_0_andfalse
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_0_1_opskip
    imov t2 0
.test_logical_body_0_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr1
                                
    imov! t0 .string_alloc_21
    push! t0
                    

    imov! t0 0
    push t0
                    
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 0
    tst  t0
    jz! .test_logical_body_1_0_andfalse
    tst  t1
    jz! .test_logical_body_1_0_andfalse
    imov t2 1
.test_logical_body_1_0_andfalse
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_1_1_opskip
    imov t2 0
.test_logical_body_1_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr2
                                
    imov! t0 .string_alloc_22
    push! t0
                    

    imov! t0 0
    push t0
                    
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1
    tst  t0
    jnz! .test_logical_body_2_0_ortrue
    tst  t1
    jnz! .test_logical_body_2_0_ortrue
    imov t2 0
.test_logical_body_2_0_ortrue
    push! t2
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_2_1_opskip
    imov t2 0
.test_logical_body_2_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr3

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr3
                                
    imov! t0 .string_alloc_23
    push! t0
                    

    imov! t0 1
    push t0
                    
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1
    tst  t0
    jnz! .test_logical_body_3_0_ortrue
    tst  t1
    jnz! .test_logical_body_3_0_ortrue
    imov t2 0
.test_logical_body_3_0_ortrue
    push! t2
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_3_1_opskip
    imov t2 0
.test_logical_body_3_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr4

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr4
                                
    imov! t0 .string_alloc_24
    push! t0
                    

    imov! t0 1
    push t0
                    
    pop! t0
    imov t1 1
    tst  t0
    jz! .test_logical_body_4_0_nottrue
    imov t1 0
.test_logical_body_4_0_nottrue
    push! t1
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_4_1_opskip
    imov t2 0
.test_logical_body_4_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr5

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr5
                                
    imov! t0 .string_alloc_25
    push! t0
                    

    imov! t0 0
    push t0
                    
    pop! t0
    imov t1 1
    tst  t0
    jz! .test_logical_body_5_0_nottrue
    imov t1 0
.test_logical_body_5_0_nottrue
    push! t1
                            
    imov! t0 1
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_logical_body_5_1_opskip
    imov t2 0
.test_logical_body_5_1_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_logical_body_retaddr6

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_logical_body_retaddr6
                                
    
.test_logical_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_logical
fn .strlen


    pop! t0
    push! t0 t0
                            
.strlen_body_0_while_eval

    pop! t0
    push! t0 t0
                            
    pop! t0
    load t0 t0
    push! t0
                            
    pop! t0
    tst  t0
    jz!  .strlen_body_0_while_exit
.strlen_body_0_while_block

    imov! t0 1
    push t0
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    jmp! .strlen_body_0_while_eval
.strlen_body_0_while_exit
                    
    pop! t0 t1
    push! t0 t1
                            
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    
.strlen_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .strlen
fn .test_strlen


    imov! t0 .string_alloc_26
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_strlen_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_strlen_body_retaddr0
                                
    imov! t0 .string_alloc_27
    push! t0
                    

    imov! t0 .string_alloc_28
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_strlen_body_0_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .strlen
.test_strlen_body_0_retaddr0
                                
    imov! t0 4
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_strlen_body_0_0_opskip
    imov t2 0
.test_strlen_body_0_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_strlen_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_strlen_body_retaddr1
                                
    imov! t0 .string_alloc_29
    push! t0
                    

    imov! t0 .string_alloc_30
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_strlen_body_1_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .strlen
.test_strlen_body_1_retaddr0
                                
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_strlen_body_1_0_opskip
    imov t2 0
.test_strlen_body_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_strlen_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_strlen_body_retaddr2
                                
    
.test_strlen_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_strlen
fn .test_let


    imov! t0 .string_alloc_31
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_let_body_retaddr0
                                
    imov! t0 11
    push t0
                    
    imov! t0 10
    push t0
                    
    imov! t0 11
    push t0
                    
    load!   t0 .ret_stack_ptr
                    
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    str!    .ret_stack_ptr t0
                    


    imov! t0 11
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_0_0_opskip
    imov t2 0
.test_let_body_0_let_block_0_0_opskip
    push! t2
                            
                    
    imov! t0 .string_alloc_32
    push! t0
                    
    pop! t0 t1
    push! t0 t1
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_retaddr0
                                
    imov! t0 .string_alloc_33
    push! t0
                    

    load!   t0 .ret_stack_ptr
    imov!   t1 1
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_1_0_opskip
    imov t2 0
.test_let_body_0_let_block_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_retaddr1
                                
    imov! t0 .string_alloc_34
    push! t0
                    

    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 11
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_2_0_opskip
    imov t2 0
.test_let_body_0_let_block_2_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_retaddr2
                                
    imov! t0 12
    push t0
                    
    imov! t0 13
    push t0
                    
    load!   t0 .ret_stack_ptr
                    
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    # pop from the data stack
    # push to return stack
    pop!    t1
    str     t0 t1
    iadd    t0 1
                        
    str!    .ret_stack_ptr t0
                    

    imov! t0 .string_alloc_35
    push! t0
                    

    load!   t0 .ret_stack_ptr
    imov!   t1 3
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_3_let_block_0_0_opskip
    imov t2 0
.test_let_body_0_let_block_3_let_block_0_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_3_let_block_retaddr0
                                
    imov! t0 .string_alloc_36
    push! t0
                    

    load!   t0 .ret_stack_ptr
    imov!   t1 1
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 12
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_3_let_block_1_0_opskip
    imov t2 0
.test_let_body_0_let_block_3_let_block_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_3_let_block_retaddr1
                                
    imov! t0 .string_alloc_37
    push! t0
                    

    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    push!   t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 13
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_let_body_0_let_block_3_let_block_2_0_opskip
    imov t2 0
.test_let_body_0_let_block_3_let_block_2_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_let_body_0_let_block_3_let_block_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_let_body_0_let_block_3_let_block_retaddr2
                                
    # pop 2 elements from return stack
    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    str!    .ret_stack_ptr t0
                    
    # pop 2 elements from return stack
    load!   t0 .ret_stack_ptr
    imov!   t1 2
    sub     t0 t1
    str!    .ret_stack_ptr t0
                    
    
.test_let_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_let
fn .test_mul


    imov! t0 .string_alloc_38
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_mul_body_retaddr0
                                
    imov! t0 .string_alloc_39
    push! t0
                    

    imov! t0 1
    push t0
                    
    imov! t0 2
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_0_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .mul
.test_mul_body_0_retaddr0
                                
    imov! t0 2
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_mul_body_0_0_opskip
    imov t2 0
.test_mul_body_0_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_mul_body_retaddr1
                                
    imov! t0 .string_alloc_40
    push! t0
                    

    imov! t0 2
    push t0
                    
    imov! t0 5
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_1_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .mul
.test_mul_body_1_retaddr0
                                
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_mul_body_1_0_opskip
    imov t2 0
.test_mul_body_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_mul_body_retaddr2
                                
    imov! t0 .string_alloc_41
    push! t0
                    

    imov! t0 0
    push t0
                    
    imov! t0 10
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_2_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .mul
.test_mul_body_2_retaddr0
                                
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_mul_body_2_0_opskip
    imov t2 0
.test_mul_body_2_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_retaddr3

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_mul_body_retaddr3
                                
    imov! t0 .string_alloc_42
    push! t0
                    

    imov! t0 10
    push t0
                    
    imov! t0 0
    push t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_3_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .mul
.test_mul_body_3_retaddr0
                                
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_mul_body_3_0_opskip
    imov t2 0
.test_mul_body_3_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_mul_body_retaddr4

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_mul_body_retaddr4
                                
    
.test_mul_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_mul
fn .test_global


    imov! t0 .string_alloc_43
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_global_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.test_global_body_retaddr0
                                
    imov! t0 .string_alloc_44
    push! t0
                    

    imov! t0 .variable_alloc_var1
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 57005
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_global_body_0_0_opskip
    imov t2 0
.test_global_body_0_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_global_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_global_body_retaddr1
                                
    imov! t0 .string_alloc_45
    push! t0
                    

    imov! t0 10
    push t0
                    
    imov! t0 .variable_alloc_var1
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    imov! t0 .variable_alloc_var1
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .test_global_body_1_0_opskip
    imov t2 0
.test_global_body_1_0_opskip
    push! t2
                            
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .test_global_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .assert
.test_global_body_retaddr2
                                
    
.test_global_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .test_global
fn .main


    imov! t0 .string_alloc_46
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.main_body_retaddr0
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_sum
.main_body_retaddr1
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr2

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_arith
.main_body_retaddr2
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr3

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_logical
.main_body_retaddr3
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr4

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_strlen
.main_body_retaddr4
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr5

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_let
.main_body_retaddr5
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr6

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_mul
.main_body_retaddr6
                                
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr7

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .test_global
.main_body_retaddr7
                                
    imov! t0 .string_alloc_47
    push! t0
                    
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .main_body_retaddr8

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ps
.main_body_retaddr8
                                
    
.main_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .main
fn .pc


    pop! t0
    push! t0 t0
                            
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .pc_body_0_opskip
    imov t2 0
.pc_body_0_opskip
    push! t2
                            
    pop! t0
    tst  t0
    jz!  .pc_body_1_else
.pc_body_1_if

    pop! t0
                            
    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 .variable_alloc_text_progress
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    imov! t0 100
    push t0
                    
    imov! t0 .variable_alloc_text_progress
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    jmp! .pc_body_1_if_exit
.pc_body_1_else

    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    pop! t0 t1
    push! t0 t1
                            
    imov! t0 14336
    push t0
                    
    pop!  t1 t0
    or    t0 t1
    push! t0
                            
    pop! t0 t1
    push! t1 t0 t1
                            
    pop! t1 t0
    str  t1 t0
                            
    imov! t0 1
    push t0
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    imov! t0 .variable_alloc_text_progress
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 1
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    pop! t0
    push! t0 t0
                            
    imov! t0 0
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jz!  .pc_body_1_else_0_opskip
    imov t2 0
.pc_body_1_else_0_opskip
    push! t2
                            
    pop! t0
    tst  t0
    jz!  .pc_body_1_else_1_else
.pc_body_1_else_1_if

    pop! t0
                            
    imov! t0 100
    push t0
                    
    jmp! .pc_body_1_else_1_if_exit
.pc_body_1_else_1_else

.pc_body_1_else_1_if_exit
                    
    imov! t0 .variable_alloc_text_progress
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
.pc_body_1_if_exit
                    
    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t0
    load t0 t0
    push! t0
                            
    imov! t0 6000
    push t0
                    
    pop! t1 t0
    imov t2 0  # default value
    sub  t0 t1
    jn!  .pc_body_2_opskip
    imov t2 1
.pc_body_2_opskip
    push! t2
                            
    pop! t0
    tst  t0
    jz!  .pc_body_3_else
.pc_body_3_if

    imov! t0 0
    push t0
                    
    imov! t0 .variable_alloc_text_ptr
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    imov! t0 100
    push t0
                    
    imov! t0 .variable_alloc_text_progress
    push! t0
                                
    pop! t1 t0
    str  t1 t0
                            
    jmp! .pc_body_3_if_exit
.pc_body_3_else

.pc_body_3_if_exit
                    
    
.pc_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .pc
fn .ph


    pop! t0
    push! t0 t0
                            
    imov! t0 10
    push t0
                    
    pop! t1 t0
    imov t2 1  # default value
    sub  t0 t1
    jn!  .ph_body_0_opskip
    imov t2 0
.ph_body_0_opskip
    push! t2
                            
    pop! t0
    tst  t0
    jz!  .ph_body_1_else
.ph_body_1_if

    imov! t0 48
    push t0
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .ph_body_1_if_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pc
.ph_body_1_if_retaddr0
                                
    jmp! .ph_body_1_if_exit
.ph_body_1_else

    imov! t0 10
    push t0
                    
    pop!  t1 t0
    sub   t0 t1
    push! t0
                            
    imov! t0 65
    push t0
                    
    pop!  t1 t0
    add   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .ph_body_1_else_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pc
.ph_body_1_else_retaddr0
                                
.ph_body_1_if_exit
                    
    
.ph_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .ph
fn .pn


    pop! t0
    push! t0 t0
                            
    imov! t0 4
    push t0
                    
    pop!  t1 t0
    sshr  t0 t1
    push! t0
                            
    imov! t0 15
    push t0
                    
    pop!  t1 t0
    and   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .pn_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ph
.pn_body_retaddr0
                                
    pop! t0
    push! t0 t0
                            
    imov! t0 15
    push t0
                    
    pop!  t1 t0
    and   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .pn_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .ph
.pn_body_retaddr1
                                
    pop! t0
                            
    
.pn_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .pn
fn .p


    pop! t0
    push! t0 t0
                            
    imov! t0 8
    push t0
                    
    pop!  t1 t0
    sshr  t0 t1
    push! t0
                            
    imov! t0 255
    push t0
                    
    pop!  t1 t0
    and   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .p_body_retaddr0

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pn
.p_body_retaddr0
                                
    pop! t0
    push! t0 t0
                            
    imov! t0 255
    push t0
                    
    pop!  t1 t0
    and   t0 t1
    push! t0
                            
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr

    # load the return addr
    imov!   t1 .p_body_retaddr1

    # store t1 at t0
    str     t0 t1

    # increment t0
    iadd    t0 1
    str!    .ret_stack_ptr t0

    jmp!    .pn
.p_body_retaddr1
                                
    pop! t0
                            
    
.p_exit
    # load the stack ptr addr into t0
    load!   t0 .ret_stack_ptr
    isub    t0 1

    # load the return addr
    load    t1 t0

    # str the stack ptr addr
    str!    .ret_stack_ptr t0

    jmp     t1
#end .p
